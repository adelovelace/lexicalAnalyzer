
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPA_ENTERO MAPA_FLOTANTE MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRN PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTOR_ENTERO VECTOR_FLOTANTE WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica1\n                    | condicional\n                    | conjuntos\n                    | vector_entero\n                    | vector_flotante\n                    | mapa_entero\n                    | mapa_flotante\n                    | if\n                    | if_do\n                    | defn\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    \n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | definitiondato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEasignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresion\n            | dato dato STRING\n    case_else : DOSPUNTOS ELSE STRINGcase_expression : LPAREN CASE dato case case impresion RPAREN\n            | LPAREN CASE dato case case case_else RPAREN\n    lista : LPAREN LIST dato dato RPARENdescription : STRINGincrease : INCREASE LCOR dato RCORargumments : LCOR dato dato dato RCOR\n                   | LCOR dato dato RCOR\n                   | LCOR dato RCORbody : instruccionesrecur : LPAREN RECUR LPAREN INC dato RPAREN RPARENinternos : description\n                | argumments\n                | body\n                | increase\n                | argumments body\n                | description argumments bodydefinition : LPAREN DEFFUNCION VARIABLE internos RPAREN\n                | LPAREN DEFFUNCION internos if dato RPAREN\n    impresion : LPAREN IMPRIMIR dato RPARENvalor : VARIABLEvector_entero : VECTOR_ENTEROvector_flotante : VECTOR_FLOTANTEmapa_entero : MAPA_ENTEROmapa_flotante : MAPA_FLOTANTEif : IF LPAREN operador_comparadores dato dato RPAREN\n          | IF sentencia_booleana\n          | IF sentencia_booleana recur\n    if_do : LPAREN IF LPAREN operador_comparadores dato dato RPAREN LPAREN DO LPAREN dato RPAREN BOOLEAN RPAREN RPARENoperacion : MAS\n          | MENOS\n          | PRODUCTO\n          | DIVISION operacionesLogicas : LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPARENoperacion_aritmetica1 : LPAREN operacion valor valor RPARENcondicional : LPAREN operacion valor valor RPARENdoseq_args : LCOR dato LPAREN RANGE dato RPAREN RCOR\n                        | LCOR dato conjuntos RCOR\n                        | LCOR dato vector_entero dato vector_entero RCOR\n                        | LCOR vector_entero conjuntos RCOR\n      \n      doseq_prn : PRN LPAREN dato RPAREN\n                        | PRN LPAREN dato  dato RPAREN\n                        | PRN LPAREN dato  dato dato RPAREN\n      doseq : LPAREN DOSEQ doseq_args LPAREN impresion RPAREN RPAREN\n                        | LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN\n      defn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n      \n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGexpresionCase : dato STRING conjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP argumments LPAREN if dato RPAREN RPARENexpresionConjuntoEnteros : ENTERO\n                     | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                     | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,29,34,36,39,54,58,59,60,61,62,63,71,76,81,83,84,85,100,111,115,117,118,120,130,136,141,151,157,158,165,167,168,172,177,179,180,184,187,188,190,208,215,218,219,225,235,],[23,53,69,23,82,97,-22,-23,-24,-25,-26,-27,23,23,113,82,116,117,-64,23,-40,116,152,116,161,-39,-53,175,-43,116,189,-52,191,116,-82,-84,-44,-39,204,205,-51,222,-83,227,228,-81,239,]),'NUMERAL':([0,25,36,58,59,60,61,62,63,71,76,111,118,119,141,167,190,],[24,-66,24,-22,-23,-24,-25,-26,-27,24,24,24,24,24,-53,-52,-51,]),'VECTOR_ENTERO':([0,36,58,59,60,61,62,63,71,76,86,111,118,141,167,178,190,],[25,25,-22,-23,-24,-25,-26,-27,25,25,25,25,25,-53,-52,25,-51,]),'VECTOR_FLOTANTE':([0,36,71,76,111,141,167,190,],[26,26,26,26,26,-53,-52,-51,]),'MAPA_ENTERO':([0,36,71,76,111,141,167,190,],[27,27,27,27,27,-53,-52,-51,]),'MAPA_FLOTANTE':([0,36,71,76,111,141,167,190,],[28,28,28,28,28,-53,-52,-51,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,36,54,71,74,75,76,77,78,79,80,96,100,111,112,113,123,124,125,131,133,136,138,141,145,147,159,167,169,170,184,186,190,191,195,196,200,201,209,210,211,226,229,246,250,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,34,-66,-67,-68,-69,29,-71,29,29,-56,29,-58,-59,-49,-54,-72,-64,29,-60,29,-94,-95,-96,-37,-79,-39,-62,-53,-61,-41,-48,-52,-50,-63,-39,-38,-51,208,-88,-89,-46,-47,-91,-97,-42,-55,-90,-73,-78,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,54,96,100,123,124,125,131,133,136,138,147,159,170,184,186,195,196,200,201,209,210,211,226,229,246,250,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-66,-67,-68,-69,-71,-72,-64,-94,-95,-96,-37,-79,-39,-62,-41,-48,-63,-39,-38,-88,-89,-46,-47,-91,-97,-42,-55,-90,-73,-78,]),'RPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,54,57,58,59,60,61,62,63,65,66,67,68,75,76,77,78,79,80,96,98,100,101,104,106,112,114,115,122,123,124,125,131,133,136,138,141,144,145,147,149,150,159,160,162,163,164,167,169,170,171,173,174,181,182,184,186,190,192,193,194,195,196,197,198,200,201,203,206,209,210,211,212,213,216,217,220,223,224,226,229,233,234,241,242,243,244,245,246,248,249,250,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-66,-67,-68,-69,-71,100,-22,-23,-24,-25,-26,-27,-28,-29,-30,-65,-56,-57,-58,-59,-49,-54,-72,131,-64,133,136,138,-60,147,-40,159,-94,-95,-96,-37,-79,-39,-62,-53,170,-61,-41,173,174,-48,184,186,187,188,-52,-50,-63,193,195,196,200,201,-39,-38,-51,209,210,211,-88,-89,213,214,-46,-47,217,220,-91,-97,-42,224,-85,-45,226,229,233,-86,-55,-90,-87,238,244,245,-92,246,247,-73,249,250,-78,]),'DEFICION':([23,],[30,]),'LET':([23,],[31,]),'IMPRIMIR':([23,116,],[32,32,]),'DEFFUNCION':([23,],[36,]),'LOOP':([23,],[38,]),'COND':([23,],[39,]),'DOSEQ':([23,],[40,]),'CASE':([23,189,],[41,207,]),'LIST':([23,],[42,]),'MAS':([23,],[43,]),'MENOS':([23,],[44,]),'PRODUCTO':([23,],[45,]),'DIVISION':([23,],[46,]),'COMPARA_IGUAL':([23,53,69,82,],[47,47,47,47,]),'MENORQUE':([23,53,69,82,222,],[37,37,103,37,232,]),'MAYORQUE':([23,53,69,82,],[48,48,48,48,]),'MAYORIGUALQUE':([23,53,69,82,],[49,49,49,49,]),'MENORIGUALQUE':([23,53,69,82,],[50,50,50,50,]),'DIFERENTE':([23,53,69,82,],[51,51,51,51,]),'L_LLAVE':([24,],[52,]),'STRING':([25,32,35,36,37,41,42,47,48,49,50,51,52,54,55,58,59,60,61,62,63,70,71,72,86,87,88,94,95,96,99,100,102,103,105,108,109,110,120,121,129,134,137,139,140,146,154,156,157,175,176,180,184,185,197,202,212,221,226,227,231,240,],[-66,58,58,79,-32,58,58,-31,-33,-34,-35,-36,94,-71,58,-22,-23,-24,-25,-26,-27,58,79,58,58,58,58,94,58,-72,58,-64,58,-32,58,58,58,58,58,58,58,58,-27,58,58,58,58,180,-43,58,58,-44,-39,58,58,216,58,58,-55,58,237,243,]),'CHAR':([25,32,35,37,41,42,47,48,49,50,51,54,55,58,59,60,61,62,63,70,72,86,87,88,95,96,99,100,102,103,105,108,109,110,120,121,129,134,137,139,140,146,154,157,175,176,180,184,185,197,212,221,226,227,],[-66,59,59,-32,59,59,-31,-33,-34,-35,-36,-71,59,-22,-23,-24,-25,-26,-27,59,59,59,59,59,59,-72,59,-64,59,-32,59,59,59,59,59,59,59,59,-27,59,59,59,59,-43,59,59,-44,-39,59,59,59,59,-55,59,]),'ENTERO':([25,32,33,35,37,41,42,43,44,45,46,47,48,49,50,51,52,54,55,58,59,60,61,62,63,64,65,66,67,68,70,72,86,87,88,92,95,96,99,100,102,103,105,108,109,110,120,121,129,134,135,137,139,140,146,154,157,175,176,180,184,185,197,212,221,226,227,],[-66,60,65,60,-32,60,60,-74,-75,-76,-77,-31,-33,-34,-35,-36,92,-71,60,-22,-23,-24,-25,-26,-27,65,-28,-29,-30,-65,60,60,60,60,60,92,60,-72,60,-64,60,-32,60,60,60,60,60,60,60,60,164,-27,60,60,60,60,-43,60,60,-44,-39,60,60,60,60,-55,60,]),'FLOTANTE':([25,32,33,35,37,41,42,43,44,45,46,47,48,49,50,51,52,54,55,58,59,60,61,62,63,64,65,66,67,68,70,72,86,87,88,93,95,96,99,100,102,103,105,108,109,110,120,121,129,134,137,139,140,146,154,157,175,176,180,184,185,197,212,221,226,227,],[-66,61,66,61,-32,61,61,-74,-75,-76,-77,-31,-33,-34,-35,-36,93,-71,61,-22,-23,-24,-25,-26,-27,66,-28,-29,-30,-65,61,61,61,61,61,93,61,-72,61,-64,61,-32,61,61,61,61,61,61,61,61,-27,61,61,61,61,-43,61,61,-44,-39,61,61,61,61,-55,61,]),'BOOLEAN':([25,32,33,35,37,41,42,43,44,45,46,47,48,49,50,51,54,55,58,59,60,61,62,63,64,65,66,67,68,70,72,86,87,88,95,96,99,100,102,103,105,108,109,110,120,121,129,134,137,139,140,146,154,157,175,176,180,184,185,197,212,221,226,227,238,],[-66,62,67,62,-32,62,62,-74,-75,-76,-77,-31,-33,-34,-35,-36,-71,62,-22,-23,-24,-25,-26,-27,67,-28,-29,-30,-65,62,62,62,62,62,62,-72,62,-64,62,-32,62,62,62,62,62,62,62,62,-27,62,62,62,62,-43,62,62,-44,-39,62,62,62,62,-55,62,241,]),'VARIABLE':([25,30,32,33,35,36,37,41,42,43,44,45,46,47,48,49,50,51,54,55,56,58,59,60,61,62,63,64,65,66,67,68,70,72,86,87,88,95,96,99,100,102,103,105,108,109,110,120,121,129,134,137,139,140,146,154,157,175,176,180,184,185,197,207,212,221,226,227,232,239,247,],[-66,55,63,68,63,71,-32,63,63,-74,-75,-76,-77,-31,-33,-34,-35,-36,-71,63,99,-22,-23,-24,-25,-26,-27,68,-28,-29,-30,-65,63,63,63,63,63,63,-72,63,-64,63,135,137,63,142,63,63,63,63,63,-27,63,63,63,63,-43,63,63,-44,-39,63,63,221,63,63,-55,63,135,242,248,]),'RCOR':([25,58,59,60,61,62,63,108,123,124,125,132,137,140,142,143,153,155,166,199,214,],[-66,-22,-23,-24,-25,-26,-27,141,-94,-95,-96,162,165,167,168,169,177,179,190,215,225,]),'LCOR':([31,36,38,40,71,73,75,79,107,],[56,72,72,86,105,109,72,-49,139,]),'INCREASE':([36,71,],[73,107,]),'R_LLAVE':([89,90,91,92,93,94,126,127,128,],[123,124,125,-98,-100,-102,-99,-101,-103,]),'RECUR':([97,205,],[130,219,]),'DOSPUNTOS':([100,114,115,157,158,180,230,237,],[-64,148,-40,-43,183,-44,236,-93,]),'PRN':([117,],[151,]),'ELSE':([148,183,236,],[172,202,240,]),'RANGE':([152,],[176,]),'INC':([161,228,],[185,235,]),'DO':([204,],[218,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,36,71,76,111,],[1,80,80,80,80,]),'asignacion':([0,36,71,76,111,],[2,2,2,2,2,]),'impresion':([0,36,71,76,84,111,117,120,158,172,],[3,3,3,3,115,3,149,157,181,194,]),'operacion_aritmetica1':([0,36,71,76,111,],[4,4,4,4,4,]),'condicional':([0,36,71,76,111,],[5,5,5,5,5,]),'conjuntos':([0,36,71,76,111,118,119,],[6,6,6,6,6,153,155,]),'vector_entero':([0,36,71,76,86,111,118,178,],[7,7,7,7,119,7,154,199,]),'vector_flotante':([0,36,71,76,111,],[8,8,8,8,8,]),'mapa_entero':([0,36,71,76,111,],[9,9,9,9,9,]),'mapa_flotante':([0,36,71,76,111,],[10,10,10,10,10,]),'if':([0,36,71,74,76,111,113,],[11,11,11,110,11,11,146,]),'if_do':([0,36,71,76,111,],[12,12,12,12,12,]),'defn':([0,36,71,76,111,],[13,13,13,13,13,]),'operacionesLogicas':([0,36,71,76,111,168,],[14,14,14,14,14,192,]),'sentenciaLoopRecur':([0,36,71,76,111,],[15,15,15,15,15,]),'cond_':([0,36,71,76,111,],[16,16,16,16,16,]),'cond_else':([0,36,71,76,111,],[17,17,17,17,17,]),'doseq':([0,36,71,76,111,],[18,18,18,18,18,]),'case_expression':([0,36,71,76,111,],[19,19,19,19,19,]),'lista':([0,36,71,76,111,],[20,20,20,20,20,]),'sentencia_booleana':([0,29,36,39,71,76,83,111,],[21,54,21,84,21,21,84,21,]),'definition':([0,36,71,76,111,],[22,22,22,22,22,]),'operacion':([23,],[33,]),'operador_comparadores':([23,53,69,82,],[35,95,102,35,]),'dato':([32,35,41,42,55,70,72,86,87,88,95,99,102,105,108,109,110,120,121,129,134,139,140,146,154,175,176,185,197,212,221,227,],[57,70,87,88,98,104,108,118,120,122,129,132,134,108,140,143,144,156,120,160,163,143,166,171,178,197,198,203,212,223,231,234,]),'valor':([33,64,],[64,101,]),'internos':([36,71,],[74,106,]),'description':([36,71,],[75,75,]),'argumments':([36,38,71,75,],[76,81,76,111,]),'body':([36,71,76,111,],[77,77,112,145,]),'increase':([36,71,],[78,78,]),'linecondition':([39,83,],[83,114,]),'doseq_args':([40,],[85,]),'expresionConjuntoEnteros':([52,92,],[89,126,]),'expresionConjuntoDouble':([52,93,],[90,127,]),'expresionConjuntoString':([52,94,],[91,128,]),'recur':([54,],[96,]),'case':([87,121,],[121,158,]),'doseq_prn':([117,],[150,]),'case_else':([158,],[182,]),'expresionDefnElse':([189,],[206,]),'expresionCase':([221,],[230,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',5),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',6),
  ('instrucciones -> operacion_aritmetica1','instrucciones',1,'p_instrucciones','clojure_sin.py',7),
  ('instrucciones -> condicional','instrucciones',1,'p_instrucciones','clojure_sin.py',8),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> vector_entero','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> vector_flotante','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> mapa_entero','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> mapa_flotante','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> if','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> if_do','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',22),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',23),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',24),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',25),
  ('instrucciones -> definition','instrucciones',1,'p_instrucciones','clojure_sin.py',26),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',29),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',30),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',31),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',32),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',33),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',34),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',37),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',38),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',39),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',43),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',44),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',45),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',46),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',47),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',48),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',51),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',52),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',55),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',58),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',65),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',69),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',73),
  ('case -> dato dato STRING','case',3,'p_case','clojure_sin.py',74),
  ('case_else -> DOSPUNTOS ELSE STRING','case_else',3,'p_case_else','clojure_sin.py',77),
  ('case_expression -> LPAREN CASE dato case case impresion RPAREN','case_expression',7,'p_case_expression','clojure_sin.py',80),
  ('case_expression -> LPAREN CASE dato case case case_else RPAREN','case_expression',7,'p_case_expression','clojure_sin.py',81),
  ('lista -> LPAREN LIST dato dato RPAREN','lista',5,'p_lista','clojure_sin.py',86),
  ('description -> STRING','description',1,'p_description','clojure_sin.py',94),
  ('increase -> INCREASE LCOR dato RCOR','increase',4,'p_increase','clojure_sin.py',97),
  ('argumments -> LCOR dato dato dato RCOR','argumments',5,'p_argumments','clojure_sin.py',100),
  ('argumments -> LCOR dato dato RCOR','argumments',4,'p_argumments','clojure_sin.py',101),
  ('argumments -> LCOR dato RCOR','argumments',3,'p_argumments','clojure_sin.py',102),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',104),
  ('recur -> LPAREN RECUR LPAREN INC dato RPAREN RPAREN','recur',7,'p_recur','clojure_sin.py',107),
  ('internos -> description','internos',1,'p_internos','clojure_sin.py',111),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',112),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',113),
  ('internos -> increase','internos',1,'p_internos','clojure_sin.py',114),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',115),
  ('internos -> description argumments body','internos',3,'p_internos','clojure_sin.py',116),
  ('definition -> LPAREN DEFFUNCION VARIABLE internos RPAREN','definition',5,'p_function','clojure_sin.py',120),
  ('definition -> LPAREN DEFFUNCION internos if dato RPAREN','definition',6,'p_function','clojure_sin.py',121),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',126),
  ('valor -> VARIABLE','valor',1,'p_valor_variable','clojure_sin.py',129),
  ('vector_entero -> VECTOR_ENTERO','vector_entero',1,'p_vector_entero','clojure_sin.py',133),
  ('vector_flotante -> VECTOR_FLOTANTE','vector_flotante',1,'p_vector_flotante','clojure_sin.py',136),
  ('mapa_entero -> MAPA_ENTERO','mapa_entero',1,'p_mapa_entero','clojure_sin.py',139),
  ('mapa_flotante -> MAPA_FLOTANTE','mapa_flotante',1,'p_mapa_flotante','clojure_sin.py',142),
  ('if -> IF LPAREN operador_comparadores dato dato RPAREN','if',6,'p_if','clojure_sin.py',145),
  ('if -> IF sentencia_booleana','if',2,'p_if','clojure_sin.py',146),
  ('if -> IF sentencia_booleana recur','if',3,'p_if','clojure_sin.py',147),
  ('if_do -> LPAREN IF LPAREN operador_comparadores dato dato RPAREN LPAREN DO LPAREN dato RPAREN BOOLEAN RPAREN RPAREN','if_do',15,'p_if_do','clojure_sin.py',154),
  ('operacion -> MAS','operacion',1,'p_op_aritmetica1','clojure_sin.py',160),
  ('operacion -> MENOS','operacion',1,'p_op_aritmetica1','clojure_sin.py',161),
  ('operacion -> PRODUCTO','operacion',1,'p_op_aritmetica1','clojure_sin.py',162),
  ('operacion -> DIVISION','operacion',1,'p_op_aritmetica1','clojure_sin.py',163),
  ('operacionesLogicas -> LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPAREN','operacionesLogicas',18,'p_operacionesLogicas','clojure_sin.py',168),
  ('operacion_aritmetica1 -> LPAREN operacion valor valor RPAREN','operacion_aritmetica1',5,'p_operacion_aritmetica1','clojure_sin.py',172),
  ('condicional -> LPAREN operacion valor valor RPAREN','condicional',5,'p_booleanos','clojure_sin.py',175),
  ('doseq_args -> LCOR dato LPAREN RANGE dato RPAREN RCOR','doseq_args',7,'p_doseq_args','clojure_sin.py',180),
  ('doseq_args -> LCOR dato conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',181),
  ('doseq_args -> LCOR dato vector_entero dato vector_entero RCOR','doseq_args',6,'p_doseq_args','clojure_sin.py',182),
  ('doseq_args -> LCOR vector_entero conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',183),
  ('doseq_prn -> PRN LPAREN dato RPAREN','doseq_prn',4,'p_doseq_prn','clojure_sin.py',188),
  ('doseq_prn -> PRN LPAREN dato dato RPAREN','doseq_prn',5,'p_doseq_prn','clojure_sin.py',189),
  ('doseq_prn -> PRN LPAREN dato dato dato RPAREN','doseq_prn',6,'p_doseq_prn','clojure_sin.py',190),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN impresion RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',194),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',195),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',199),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',200),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',205),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',209),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',212),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',213),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',214),
  ('sentenciaLoopRecur -> LPAREN LOOP argumments LPAREN if dato RPAREN RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',227),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',232),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',233),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',237),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',238),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',242),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',243),
]
