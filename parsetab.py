
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LISTA LOOP LPAREN L_LLAVE MAPAS MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTORES WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica1\n                    | condicional\n                    | vectores\n                    | conjuntos\n                    | defn\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case\n                    | case_expression\n                    | sentencia_booleana\n                    | operador_comparadoresdato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEasignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresioncase_expression : LPAREN CASE dato case case case impresion RPARENimpresion : LPAREN IMPRIMIR dato RPARENvalor : VARIABLEoperacion : MAS\n          | MENOS\n          | PRODUCTO\n          | DIVISION operacionesLogicas : LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPARENoperacion_aritmetica1 : LPAREN operacion valor valor RPARENcondicional : LPAREN operacion valor valor RPARENvectores : VECTORESdoseq : LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPARENdefn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n      \n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGexpresionCase : dato STRING conjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP LCOR VARIABLE ENTERO RCOR  operacionesLogicas RPARENexpresionConjuntoEnteros : ENTERO\n                     | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                     | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,19,20,24,30,31,32,33,39,41,49,65,66,78,85,86,106,108,109,111,112,114,119,134,135,140,143,],[18,-22,50,-19,-17,-18,-20,-21,62,64,-38,64,50,-40,-35,104,-34,116,117,117,50,50,127,139,140,50,146,]),'VECTORES':([0,],[21,]),'NUMERAL':([0,],[22,]),'COMPARA_IGUAL':([0,18,64,],[25,25,25,]),'MENORQUE':([0,18,62,64,],[23,23,82,23,]),'MAYORQUE':([0,18,64,],[26,26,26,]),'MAYORIGUALQUE':([0,18,64,],[27,27,27,]),'MENORIGUALQUE':([0,18,64,],[28,28,28,]),'DIFERENTE':([0,18,64,],[29,29,29,]),'STRING':([0,19,23,24,25,26,27,28,29,30,31,32,33,36,43,44,49,51,52,68,69,75,77,78,87,105,133,138,145,],[30,-22,-27,-19,-26,-28,-29,-30,-31,-17,-18,-20,-21,30,30,30,-38,75,30,30,30,75,30,-40,30,30,30,142,148,]),'CHAR':([0,19,23,24,25,26,27,28,29,30,31,32,33,36,43,44,49,52,68,69,77,78,87,105,133,],[31,-22,-27,-19,-26,-28,-29,-30,-31,-17,-18,-20,-21,31,31,31,-38,31,31,31,31,-40,31,31,31,]),'ENTERO':([0,19,23,24,25,26,27,28,29,30,31,32,33,36,37,43,44,45,46,47,48,49,51,52,55,56,57,58,59,68,69,73,77,78,83,87,100,105,133,],[24,-22,-27,-19,-26,-28,-29,-30,-31,-17,-18,-20,-21,24,56,24,24,-42,-43,-44,-45,-38,73,24,56,-23,-24,-25,-41,24,24,73,24,-40,101,24,110,24,24,]),'FLOTANTE':([0,19,23,24,25,26,27,28,29,30,31,32,33,36,37,43,44,45,46,47,48,49,51,52,55,56,57,58,59,68,69,74,77,78,87,105,133,],[32,-22,-27,-19,-26,-28,-29,-30,-31,-17,-18,-20,-21,32,57,32,32,-42,-43,-44,-45,-38,74,32,57,-23,-24,-25,-41,32,32,74,32,-40,32,32,32,]),'BOOLEAN':([0,19,23,24,25,26,27,28,29,30,31,32,33,36,37,43,44,45,46,47,48,49,52,55,56,57,58,59,68,69,77,78,87,105,133,],[33,-22,-27,-19,-26,-28,-29,-30,-31,-17,-18,-20,-21,33,58,33,33,-42,-43,-44,-45,-38,33,58,-23,-24,-25,-41,33,33,33,-40,33,33,33,]),'VARIABLE':([0,19,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,43,44,45,46,47,48,49,52,53,55,56,57,58,59,63,67,68,69,77,78,80,81,82,87,105,113,125,133,146,152,],[19,-22,-27,-19,-26,-28,-29,-30,-31,-17,-18,-20,-21,52,19,59,60,19,19,-42,-43,-44,-45,-38,19,77,59,-23,-24,-25,-41,83,86,19,19,19,-40,98,99,100,19,19,122,133,19,149,153,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,23,25,26,27,28,29,49,78,89,90,91,95,97,102,106,115,126,128,129,131,136,150,155,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-49,-27,-26,-28,-29,-30,-31,-38,-40,-55,-56,-57,-32,-47,-36,-34,-33,-52,-58,-37,-39,-51,-50,-46,]),'DEFICION':([18,],[34,]),'LET':([18,],[35,]),'IMPRIMIR':([18,50,],[36,36,]),'DEFFUNCION':([18,],[38,]),'IF':([18,117,],[39,39,]),'LOOP':([18,],[40,]),'COND':([18,],[41,]),'DOSEQ':([18,],[42,]),'CASE':([18,116,],[43,125,]),'MAS':([18,],[45,]),'MENOS':([18,],[46,]),'PRODUCTO':([18,],[47,]),'DIVISION':([18,],[48,]),'RPAREN':([19,24,30,31,32,33,54,56,57,58,59,76,78,79,84,85,88,107,110,118,120,121,122,123,124,132,144,147,148,149,151,153,154,155,],[-22,-19,-17,-18,-20,-21,78,-23,-24,-25,-41,95,-40,97,102,-35,106,115,119,126,128,129,130,131,132,136,147,150,-53,151,152,154,155,-46,]),'RCOR':([19,24,30,31,32,33,96,98,99,101,130,],[-22,-19,-17,-18,-20,-21,107,108,109,111,135,]),'L_LLAVE':([22,],[51,]),'LCOR':([35,40,42,60,61,],[53,63,67,80,81,]),'INCREASE':([38,],[61,]),'R_LLAVE':([70,71,72,73,74,75,92,93,94,],[89,90,91,-59,-61,-63,-60,-62,-64,]),'DOSPUNTOS':([78,84,85,137,142,],[-40,103,-35,141,-54,]),'ELSE':([103,141,],[112,145,]),'RANGE':([104,],[113,]),'RECUR':([127,],[134,]),'INC':([139,],[143,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,],[1,]),'asignacion':([0,],[2,]),'impresion':([0,20,66,112,114,140,],[3,49,85,121,123,144,]),'operacion_aritmetica1':([0,],[4,]),'condicional':([0,],[5,]),'vectores':([0,],[6,]),'conjuntos':([0,],[7,]),'defn':([0,],[8,]),'operacionesLogicas':([0,109,111,],[9,118,120,]),'sentenciaLoopRecur':([0,],[10,]),'cond_':([0,],[11,]),'cond_else':([0,],[12,]),'doseq':([0,],[13,]),'case':([0,68,87,105,],[14,87,105,114,]),'case_expression':([0,],[15,]),'sentencia_booleana':([0,41,65,],[16,66,66,]),'operador_comparadores':([0,18,64,],[17,44,44,]),'dato':([0,36,43,44,52,68,69,77,87,105,133,],[20,54,68,69,76,20,88,96,20,20,138,]),'operacion':([18,],[37,]),'valor':([37,55,],[55,79,]),'linecondition':([41,65,],[65,84,]),'expresionConjuntoEnteros':([51,73,],[70,92,]),'expresionConjuntoDouble':([51,74,],[71,93,]),'expresionConjuntoString':([51,75,],[72,94,]),'expresionDefnElse':([116,],[124,]),'expresionCase':([133,],[137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',5),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',6),
  ('instrucciones -> operacion_aritmetica1','instrucciones',1,'p_instrucciones','clojure_sin.py',7),
  ('instrucciones -> condicional','instrucciones',1,'p_instrucciones','clojure_sin.py',8),
  ('instrucciones -> vectores','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> case','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> operador_comparadores','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',23),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',24),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',25),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',26),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',27),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',28),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',31),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',32),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',33),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',37),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',38),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',39),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',40),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',41),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',42),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',45),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',46),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',49),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',52),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',59),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',63),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',68),
  ('case_expression -> LPAREN CASE dato case case case impresion RPAREN','case_expression',8,'p_case_expression','clojure_sin.py',71),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',74),
  ('valor -> VARIABLE','valor',1,'p_valor_variable','clojure_sin.py',77),
  ('operacion -> MAS','operacion',1,'p_op_aritmetica1','clojure_sin.py',81),
  ('operacion -> MENOS','operacion',1,'p_op_aritmetica1','clojure_sin.py',82),
  ('operacion -> PRODUCTO','operacion',1,'p_op_aritmetica1','clojure_sin.py',83),
  ('operacion -> DIVISION','operacion',1,'p_op_aritmetica1','clojure_sin.py',84),
  ('operacionesLogicas -> LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPAREN','operacionesLogicas',18,'p_operacionesLogicas','clojure_sin.py',87),
  ('operacion_aritmetica1 -> LPAREN operacion valor valor RPAREN','operacion_aritmetica1',5,'p_operacion_aritmetica1','clojure_sin.py',90),
  ('condicional -> LPAREN operacion valor valor RPAREN','condicional',5,'p_booleanos','clojure_sin.py',93),
  ('vectores -> VECTORES','vectores',1,'p_vectores','clojure_sin.py',96),
  ('doseq -> LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPAREN','doseq',13,'p_doseq','clojure_sin.py',99),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',102),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',103),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',108),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',112),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',115),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',116),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',117),
  ('sentenciaLoopRecur -> LPAREN LOOP LCOR VARIABLE ENTERO RCOR operacionesLogicas RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',121),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',124),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',125),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',129),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',130),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',134),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',135),
]
