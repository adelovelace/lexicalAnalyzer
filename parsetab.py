
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPAS MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTORES WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica1\n                    | condicional\n                    | vectores\n                    | conjuntos\n                    | defn\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | definitiondato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEasignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresioncase_expression : LPAREN CASE dato case case impresion RPARENlista : LPAREN LIST dato dato RPARENdescription : STRINGargumments : LCOR dato dato dato RCOR\n                   | LCOR dato dato RCOR\n                   | LCOR dato RCORbody : instruccionesinternos : description\n                | argumments\n                | body\n                | argumments body\n                | description argumments bodydefinition : LPAREN DEFFUNCION VARIABLE internosimpresion : LPAREN IMPRIMIR dato RPARENvalor : VARIABLEoperacion : MAS\n          | MENOS\n          | PRODUCTO\n          | DIVISION operacionesLogicas : LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPARENoperacion_aritmetica1 : LPAREN operacion valor valor RPARENcondicional : LPAREN operacion valor valor RPARENvectores : VECTORESdoseq : LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPARENdefn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n      \n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGexpresionCase : dato STRING conjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP LCOR VARIABLE ENTERO RCOR  operacionesLogicas RPARENexpresionConjuntoEnteros : ENTERO\n                     | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                     | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,26,29,47,48,49,50,51,52,58,63,64,77,82,90,92,93,108,117,118,120,122,124,126,128,129,135,138,145,153,154,159,162,],[18,60,62,-17,-18,-19,-20,-21,-22,18,62,91,-52,18,-35,116,91,18,-38,91,-34,133,-44,136,136,91,-43,147,-42,158,159,91,165,]),'VECTORES':([0,58,82,108,124,135,145,],[19,19,19,19,-44,-43,-42,]),'NUMERAL':([0,58,82,108,124,135,145,],[20,20,20,20,-44,-43,-42,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,77,80,81,82,83,84,85,97,98,99,103,105,110,114,119,120,124,125,132,135,142,145,146,148,149,155,169,174,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-61,-52,-51,-46,-47,-48,-41,-45,-67,-68,-69,-32,-59,-49,-36,-40,-34,-44,-50,-33,-43,-39,-42,-64,-70,-37,-63,-62,-58,]),'DEFICION':([18,],[21,]),'LET':([18,],[22,]),'IMPRIMIR':([18,91,],[23,23,]),'DEFFUNCION':([18,],[25,]),'IF':([18,136,],[26,26,]),'LOOP':([18,],[28,]),'COND':([18,],[29,]),'DOSEQ':([18,],[30,]),'CASE':([18,133,],[31,144,]),'LIST':([18,],[32,]),'MAS':([18,],[34,]),'MENOS':([18,],[35,]),'PRODUCTO':([18,],[36,]),'DIVISION':([18,],[37,]),'COMPARA_IGUAL':([18,62,],[38,38,]),'MENORQUE':([18,60,62,],[27,87,27,]),'MAYORQUE':([18,62,],[39,39,]),'MAYORIGUALQUE':([18,62,],[40,40,]),'MENORIGUALQUE':([18,62,],[41,41,]),'DIFERENTE':([18,62,],[42,42,]),'L_LLAVE':([20,],[43,]),'VARIABLE':([21,23,24,25,27,31,32,33,34,35,36,37,38,39,40,41,42,44,45,47,48,49,50,51,52,53,54,55,56,57,61,65,66,67,68,76,77,79,86,87,94,106,107,109,117,123,130,144,152,165,171,],[44,52,57,58,-27,52,52,52,-54,-55,-56,-57,-26,-28,-29,-30,-31,52,76,-17,-18,-19,-20,-21,-22,57,-23,-24,-25,-53,88,92,52,52,52,52,-52,106,111,112,52,-22,52,52,-38,52,141,152,52,168,172,]),'LCOR':([22,28,30,58,59,81,84,],[45,61,65,79,86,109,-41,]),'STRING':([23,27,31,32,33,38,39,40,41,42,43,44,47,48,49,50,51,52,58,66,67,68,74,76,77,79,94,106,107,109,117,123,152,157,164,],[47,-27,47,47,47,-26,-28,-29,-30,-31,74,47,-17,-18,-19,-20,-21,-22,84,47,47,47,74,47,-52,47,47,-22,47,47,-38,47,47,161,167,]),'CHAR':([23,27,31,32,33,38,39,40,41,42,44,47,48,49,50,51,52,66,67,68,76,77,79,94,106,107,109,117,123,152,],[48,-27,48,48,48,-26,-28,-29,-30,-31,48,-17,-18,-19,-20,-21,-22,48,48,48,48,-52,48,48,-22,48,48,-38,48,48,]),'ENTERO':([23,24,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,66,67,68,72,76,77,79,88,94,106,107,109,112,117,123,152,],[49,54,-27,49,49,49,-54,-55,-56,-57,-26,-28,-29,-30,-31,72,49,-17,-18,-19,-20,-21,-22,54,-23,-24,-25,-53,49,49,49,72,49,-52,49,113,49,-22,49,49,127,-38,49,49,]),'FLOTANTE':([23,24,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,47,48,49,50,51,52,53,54,55,56,57,66,67,68,73,76,77,79,94,106,107,109,117,123,152,],[50,55,-27,50,50,50,-54,-55,-56,-57,-26,-28,-29,-30,-31,73,50,-17,-18,-19,-20,-21,-22,55,-23,-24,-25,-53,50,50,50,73,50,-52,50,50,-22,50,50,-38,50,50,]),'BOOLEAN':([23,24,27,31,32,33,34,35,36,37,38,39,40,41,42,44,47,48,49,50,51,52,53,54,55,56,57,66,67,68,76,77,79,94,106,107,109,117,123,152,],[51,56,-27,51,51,51,-54,-55,-56,-57,-26,-28,-29,-30,-31,51,-17,-18,-19,-20,-21,-22,56,-23,-24,-25,-53,51,51,51,51,-52,51,51,-22,51,51,-38,51,51,]),'INCREASE':([25,],[59,]),'RPAREN':([46,47,48,49,50,51,52,54,55,56,57,75,77,78,89,90,95,96,121,127,131,137,139,140,141,143,151,163,166,167,168,170,172,173,174,],[77,-17,-18,-19,-20,-21,-22,-23,-24,-25,-53,103,-52,105,114,-35,119,120,132,138,142,146,148,149,150,151,155,166,169,-65,170,171,173,174,-58,]),'RCOR':([47,48,49,50,51,52,104,106,107,111,113,123,134,150,],[-17,-18,-19,-20,-21,-22,121,122,124,126,128,135,145,154,]),'R_LLAVE':([69,70,71,72,73,74,100,101,102,],[97,98,99,-71,-73,-75,-72,-74,-76,]),'DOSPUNTOS':([77,89,90,156,161,],[-52,115,-35,160,-66,]),'ELSE':([115,160,],[129,164,]),'RANGE':([116,],[130,]),'RECUR':([147,],[153,]),'INC':([158,],[162,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,58,82,108,],[1,85,85,85,]),'asignacion':([0,58,82,108,],[2,2,2,2,]),'impresion':([0,58,64,82,93,108,118,129,159,],[3,3,90,3,117,3,131,140,163,]),'operacion_aritmetica1':([0,58,82,108,],[4,4,4,4,]),'condicional':([0,58,82,108,],[5,5,5,5,]),'vectores':([0,58,82,108,],[6,6,6,6,]),'conjuntos':([0,58,82,108,],[7,7,7,7,]),'defn':([0,58,82,108,],[8,8,8,8,]),'operacionesLogicas':([0,58,82,108,126,128,],[9,9,9,9,137,139,]),'sentenciaLoopRecur':([0,58,82,108,],[10,10,10,10,]),'cond_':([0,58,82,108,],[11,11,11,11,]),'cond_else':([0,58,82,108,],[12,12,12,12,]),'doseq':([0,58,82,108,],[13,13,13,13,]),'case_expression':([0,58,82,108,],[14,14,14,14,]),'lista':([0,58,82,108,],[15,15,15,15,]),'sentencia_booleana':([0,29,58,63,82,108,],[16,64,16,64,16,16,]),'definition':([0,58,82,108,],[17,17,17,17,]),'operacion':([18,],[24,]),'operador_comparadores':([18,62,],[33,33,]),'dato':([23,31,32,33,44,66,67,68,76,79,94,107,109,123,152,],[46,66,67,68,75,93,95,96,104,107,93,123,107,134,157,]),'valor':([24,53,],[53,78,]),'linecondition':([29,63,],[63,89,]),'expresionConjuntoEnteros':([43,72,],[69,100,]),'expresionConjuntoDouble':([43,73,],[70,101,]),'expresionConjuntoString':([43,74,],[71,102,]),'internos':([58,],[80,]),'description':([58,],[81,]),'argumments':([58,81,],[82,108,]),'body':([58,82,108,],[83,110,125,]),'case':([66,94,],[94,118,]),'expresionDefnElse':([133,],[143,]),'expresionCase':([152,],[156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',5),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',6),
  ('instrucciones -> operacion_aritmetica1','instrucciones',1,'p_instrucciones','clojure_sin.py',7),
  ('instrucciones -> condicional','instrucciones',1,'p_instrucciones','clojure_sin.py',8),
  ('instrucciones -> vectores','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> definition','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',23),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',24),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',25),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',26),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',27),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',28),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',31),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',32),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',33),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',37),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',38),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',39),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',40),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',41),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',42),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',45),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',46),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',49),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',52),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',59),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',63),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',67),
  ('case_expression -> LPAREN CASE dato case case impresion RPAREN','case_expression',7,'p_case_expression','clojure_sin.py',70),
  ('lista -> LPAREN LIST dato dato RPAREN','lista',5,'p_lista','clojure_sin.py',74),
  ('description -> STRING','description',1,'p_description','clojure_sin.py',82),
  ('argumments -> LCOR dato dato dato RCOR','argumments',5,'p_argumments','clojure_sin.py',85),
  ('argumments -> LCOR dato dato RCOR','argumments',4,'p_argumments','clojure_sin.py',86),
  ('argumments -> LCOR dato RCOR','argumments',3,'p_argumments','clojure_sin.py',87),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',89),
  ('internos -> description','internos',1,'p_internos','clojure_sin.py',91),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',92),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',93),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',94),
  ('internos -> description argumments body','internos',3,'p_internos','clojure_sin.py',95),
  ('definition -> LPAREN DEFFUNCION VARIABLE internos','definition',4,'p_function','clojure_sin.py',97),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',101),
  ('valor -> VARIABLE','valor',1,'p_valor_variable','clojure_sin.py',104),
  ('operacion -> MAS','operacion',1,'p_op_aritmetica1','clojure_sin.py',108),
  ('operacion -> MENOS','operacion',1,'p_op_aritmetica1','clojure_sin.py',109),
  ('operacion -> PRODUCTO','operacion',1,'p_op_aritmetica1','clojure_sin.py',110),
  ('operacion -> DIVISION','operacion',1,'p_op_aritmetica1','clojure_sin.py',111),
  ('operacionesLogicas -> LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPAREN','operacionesLogicas',18,'p_operacionesLogicas','clojure_sin.py',114),
  ('operacion_aritmetica1 -> LPAREN operacion valor valor RPAREN','operacion_aritmetica1',5,'p_operacion_aritmetica1','clojure_sin.py',117),
  ('condicional -> LPAREN operacion valor valor RPAREN','condicional',5,'p_booleanos','clojure_sin.py',120),
  ('vectores -> VECTORES','vectores',1,'p_vectores','clojure_sin.py',123),
  ('doseq -> LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPAREN','doseq',13,'p_doseq','clojure_sin.py',126),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',129),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',130),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',135),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',139),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',142),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',143),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',144),
  ('sentenciaLoopRecur -> LPAREN LOOP LCOR VARIABLE ENTERO RCOR operacionesLogicas RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',148),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',151),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',152),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',156),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',157),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',161),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',162),
]
