
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPA_ENTERO MAPA_FLOTANTE MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRN PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTOR_ENTERO VECTOR_FLOTANTE WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica1\n                    | condicional\n                    | conjuntos\n                    | vector_entero\n                    | vector_flotante\n                    | mapa_entero\n                    | mapa_flotante\n                    | if\n                    | if_do\n                    | defn\n                    | defn_with_return\n                    | operacionesLogicas\n                    | sentenciaLoopRecur    \n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | definitiondato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEasignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresion\n            | dato dato STRING\n    case_else : DOSPUNTOS ELSE STRINGcase_expression : LPAREN CASE dato case case impresion RPAREN\n            | LPAREN CASE dato case case case_else RPAREN\n    lista : LPAREN LIST dato dato RPARENdescription : STRINGincrease : INCREASE LCOR dato RCORargumments : LCOR dato dato dato RCOR\n                   | LCOR dato dato RCOR\n                   | LCOR dato RCORbody : instruccionesrecur : LPAREN RECUR LPAREN INC dato RPAREN RPARENinternos : description\n                | argumments\n                | body\n                | increase\n                | argumments body\n                | description argumments bodydefinition : LPAREN DEFFUNCION VARIABLE internos RPAREN\n                | LPAREN DEFFUNCION internos if dato RPAREN\n    impresion : LPAREN IMPRIMIR dato RPARENvalor : VARIABLEvector_entero : VECTOR_ENTEROvector_flotante : VECTOR_FLOTANTEmapa_entero : MAPA_ENTEROmapa_flotante : MAPA_FLOTANTEif : IF LPAREN operador_comparadores dato dato RPAREN\n          | IF sentencia_booleana\n          | IF sentencia_booleana recur\n    if_do : LPAREN IF LPAREN operador_comparadores dato dato RPAREN LPAREN DO LPAREN dato RPAREN BOOLEAN RPAREN RPARENoperacion : MAS\n          | MENOS\n          | PRODUCTO\n          | DIVISION operacionesLogicas : LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPARENoperacion_aritmetica1 : LPAREN operacion valor valor RPARENcondicional : LPAREN operacion valor valor RPARENdoseq_args : LCOR dato LPAREN RANGE dato RPAREN RCOR\n                        | LCOR dato conjuntos RCOR\n                        | LCOR dato vector_entero dato vector_entero RCOR\n                        | LCOR vector_entero conjuntos RCOR\n      \n      doseq_prn : PRN LPAREN dato RPAREN\n                        | PRN LPAREN dato  dato RPAREN\n                        | PRN LPAREN dato  dato dato RPAREN\n      doseq : LPAREN DOSEQ doseq_args LPAREN impresion RPAREN RPAREN\n                        | LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN\n      defn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n      \n      defn_with_return : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return\n      \n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGdefn_return : LPAREN dato dato RPARENexpresionCase : dato STRING conjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP argumments LPAREN if dato RPAREN RPARENexpresionConjuntoEnteros : ENTERO\n                     | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                     | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,30,35,37,40,55,59,60,61,62,63,64,72,77,82,84,85,86,101,112,116,118,119,121,131,137,142,152,158,159,166,168,169,173,178,180,181,185,188,189,191,209,210,216,219,220,228,232,239,],[24,54,70,24,83,98,-23,-24,-25,-26,-27,-28,24,24,114,83,117,118,-65,24,-41,117,153,117,162,-40,-54,176,-44,117,190,-53,192,117,-83,-85,-45,-40,205,206,-52,223,224,-84,230,231,-82,224,245,]),'NUMERAL':([0,26,37,59,60,61,62,63,64,72,77,112,119,120,142,168,191,],[25,-67,25,-23,-24,-25,-26,-27,-28,25,25,25,25,25,-54,-53,-52,]),'VECTOR_ENTERO':([0,37,59,60,61,62,63,64,72,77,87,112,119,142,168,179,191,],[26,26,-23,-24,-25,-26,-27,-28,26,26,26,26,26,-54,-53,26,-52,]),'VECTOR_FLOTANTE':([0,37,72,77,112,142,168,191,],[27,27,27,27,27,-54,-53,-52,]),'MAPA_ENTERO':([0,37,72,77,112,142,168,191,],[28,28,28,28,28,-54,-53,-52,]),'MAPA_FLOTANTE':([0,37,72,77,112,142,168,191,],[29,29,29,29,29,-54,-53,-52,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,37,55,72,75,76,77,78,79,80,81,97,101,112,113,114,124,125,126,132,134,137,139,142,146,148,160,168,170,171,185,187,191,192,196,197,201,202,210,211,212,225,229,232,240,247,253,257,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,35,-67,-68,-69,-70,30,-72,30,30,-57,30,-59,-60,-50,-55,-73,-65,30,-61,30,-98,-99,-100,-38,-80,-40,-63,-54,-62,-42,-49,-53,-51,-64,-40,-39,-52,209,-89,-90,-47,-48,-92,-101,-43,-94,-56,-91,-93,-96,-74,-79,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,28,29,55,97,101,124,125,126,132,134,137,139,148,160,171,185,187,196,197,201,202,210,211,212,225,229,232,240,247,253,257,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-67,-68,-69,-70,-72,-73,-65,-98,-99,-100,-38,-80,-40,-63,-42,-49,-64,-40,-39,-89,-90,-47,-48,-92,-101,-43,-94,-56,-91,-93,-96,-74,-79,]),'RPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,28,29,55,58,59,60,61,62,63,64,66,67,68,69,76,77,78,79,80,81,97,99,101,102,105,107,113,115,116,123,124,125,126,132,134,137,139,142,145,146,148,150,151,160,161,163,164,165,168,170,171,172,174,175,182,183,185,187,191,193,194,195,196,197,198,199,201,202,204,207,210,211,212,213,214,217,218,221,225,226,227,229,232,237,238,240,243,247,248,249,250,251,252,253,255,256,257,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-67,-68,-69,-70,-72,101,-23,-24,-25,-26,-27,-28,-29,-30,-31,-66,-57,-58,-59,-60,-50,-55,-73,132,-65,134,137,139,-61,148,-41,160,-98,-99,-100,-38,-80,-40,-63,-54,171,-62,-42,174,175,-49,185,187,188,189,-53,-51,-64,194,196,197,201,202,-40,-39,-52,210,211,212,-89,-90,214,215,-47,-48,218,221,-92,-101,-43,227,-86,-46,229,232,-94,237,-87,-56,-91,-88,244,-93,247,-96,251,252,-95,253,254,-74,256,257,-79,]),'DEFICION':([24,],[31,]),'LET':([24,],[32,]),'IMPRIMIR':([24,117,],[33,33,]),'DEFFUNCION':([24,],[37,]),'LOOP':([24,],[39,]),'COND':([24,],[40,]),'DOSEQ':([24,],[41,]),'CASE':([24,190,],[42,208,]),'LIST':([24,],[43,]),'MAS':([24,],[44,]),'MENOS':([24,],[45,]),'PRODUCTO':([24,],[46,]),'DIVISION':([24,],[47,]),'COMPARA_IGUAL':([24,54,70,83,],[48,48,48,48,]),'MENORQUE':([24,54,70,83,223,],[38,38,104,38,235,]),'MAYORQUE':([24,54,70,83,],[49,49,49,49,]),'MAYORIGUALQUE':([24,54,70,83,],[50,50,50,50,]),'MENORIGUALQUE':([24,54,70,83,],[51,51,51,51,]),'DIFERENTE':([24,54,70,83,],[52,52,52,52,]),'L_LLAVE':([25,],[53,]),'STRING':([26,33,36,37,38,42,43,48,49,50,51,52,53,55,56,59,60,61,62,63,64,71,72,73,87,88,89,95,96,97,100,101,103,104,106,109,110,111,121,122,130,135,138,140,141,147,155,157,158,176,177,181,185,186,198,203,213,222,224,229,230,234,236,246,],[-67,59,59,80,-33,59,59,-32,-34,-35,-36,-37,95,-72,59,-23,-24,-25,-26,-27,-28,59,80,59,59,59,59,95,59,-73,59,-65,59,-33,59,59,59,59,59,59,59,59,-28,59,59,59,59,181,-44,59,59,-45,-40,59,59,217,59,59,59,-56,59,242,59,250,]),'CHAR':([26,33,36,38,42,43,48,49,50,51,52,55,56,59,60,61,62,63,64,71,73,87,88,89,96,97,100,101,103,104,106,109,110,111,121,122,130,135,138,140,141,147,155,158,176,177,181,185,186,198,213,222,224,229,230,236,],[-67,60,60,-33,60,60,-32,-34,-35,-36,-37,-72,60,-23,-24,-25,-26,-27,-28,60,60,60,60,60,60,-73,60,-65,60,-33,60,60,60,60,60,60,60,60,-28,60,60,60,60,-44,60,60,-45,-40,60,60,60,60,60,-56,60,60,]),'ENTERO':([26,33,34,36,38,42,43,44,45,46,47,48,49,50,51,52,53,55,56,59,60,61,62,63,64,65,66,67,68,69,71,73,87,88,89,93,96,97,100,101,103,104,106,109,110,111,121,122,130,135,136,138,140,141,147,155,158,176,177,181,185,186,198,213,222,224,229,230,236,],[-67,61,66,61,-33,61,61,-75,-76,-77,-78,-32,-34,-35,-36,-37,93,-72,61,-23,-24,-25,-26,-27,-28,66,-29,-30,-31,-66,61,61,61,61,61,93,61,-73,61,-65,61,-33,61,61,61,61,61,61,61,61,165,-28,61,61,61,61,-44,61,61,-45,-40,61,61,61,61,61,-56,61,61,]),'FLOTANTE':([26,33,34,36,38,42,43,44,45,46,47,48,49,50,51,52,53,55,56,59,60,61,62,63,64,65,66,67,68,69,71,73,87,88,89,94,96,97,100,101,103,104,106,109,110,111,121,122,130,135,138,140,141,147,155,158,176,177,181,185,186,198,213,222,224,229,230,236,],[-67,62,67,62,-33,62,62,-75,-76,-77,-78,-32,-34,-35,-36,-37,94,-72,62,-23,-24,-25,-26,-27,-28,67,-29,-30,-31,-66,62,62,62,62,62,94,62,-73,62,-65,62,-33,62,62,62,62,62,62,62,62,-28,62,62,62,62,-44,62,62,-45,-40,62,62,62,62,62,-56,62,62,]),'BOOLEAN':([26,33,34,36,38,42,43,44,45,46,47,48,49,50,51,52,55,56,59,60,61,62,63,64,65,66,67,68,69,71,73,87,88,89,96,97,100,101,103,104,106,109,110,111,121,122,130,135,138,140,141,147,155,158,176,177,181,185,186,198,213,222,224,229,230,236,244,],[-67,63,68,63,-33,63,63,-75,-76,-77,-78,-32,-34,-35,-36,-37,-72,63,-23,-24,-25,-26,-27,-28,68,-29,-30,-31,-66,63,63,63,63,63,63,-73,63,-65,63,-33,63,63,63,63,63,63,63,63,-28,63,63,63,63,-44,63,63,-45,-40,63,63,63,63,63,-56,63,63,248,]),'VARIABLE':([26,31,33,34,36,37,38,42,43,44,45,46,47,48,49,50,51,52,55,56,57,59,60,61,62,63,64,65,66,67,68,69,71,73,87,88,89,96,97,100,101,103,104,106,109,110,111,121,122,130,135,138,140,141,147,155,158,176,177,181,185,186,198,208,213,222,224,229,230,235,236,245,254,],[-67,56,64,69,64,72,-33,64,64,-75,-76,-77,-78,-32,-34,-35,-36,-37,-72,64,100,-23,-24,-25,-26,-27,-28,69,-29,-30,-31,-66,64,64,64,64,64,64,-73,64,-65,64,136,138,64,143,64,64,64,64,64,-28,64,64,64,64,-44,64,64,-45,-40,64,64,222,64,64,64,-56,64,136,64,249,255,]),'RCOR':([26,59,60,61,62,63,64,109,124,125,126,133,138,141,143,144,154,156,167,200,215,],[-67,-23,-24,-25,-26,-27,-28,142,-98,-99,-100,163,166,168,169,170,178,180,191,216,228,]),'LCOR':([32,37,39,41,72,74,76,80,108,],[57,73,73,87,106,110,73,-50,140,]),'INCREASE':([37,72,],[74,108,]),'R_LLAVE':([90,91,92,93,94,95,127,128,129,],[124,125,126,-102,-104,-106,-103,-105,-107,]),'RECUR':([98,206,],[131,220,]),'DOSPUNTOS':([101,115,116,158,159,181,233,242,],[-65,149,-41,-44,184,-45,241,-97,]),'PRN':([118,],[152,]),'ELSE':([149,184,241,],[173,203,246,]),'RANGE':([153,],[177,]),'INC':([162,231,],[186,239,]),'DO':([205,],[219,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,37,72,77,112,],[1,81,81,81,81,]),'asignacion':([0,37,72,77,112,],[2,2,2,2,2,]),'impresion':([0,37,72,77,85,112,118,121,159,173,],[3,3,3,3,116,3,150,158,182,195,]),'operacion_aritmetica1':([0,37,72,77,112,],[4,4,4,4,4,]),'condicional':([0,37,72,77,112,],[5,5,5,5,5,]),'conjuntos':([0,37,72,77,112,119,120,],[6,6,6,6,6,154,156,]),'vector_entero':([0,37,72,77,87,112,119,179,],[7,7,7,7,120,7,155,200,]),'vector_flotante':([0,37,72,77,112,],[8,8,8,8,8,]),'mapa_entero':([0,37,72,77,112,],[9,9,9,9,9,]),'mapa_flotante':([0,37,72,77,112,],[10,10,10,10,10,]),'if':([0,37,72,75,77,112,114,],[11,11,11,111,11,11,147,]),'if_do':([0,37,72,77,112,],[12,12,12,12,12,]),'defn':([0,37,72,77,112,],[13,13,13,13,13,]),'defn_with_return':([0,37,72,77,112,],[14,14,14,14,14,]),'operacionesLogicas':([0,37,72,77,112,169,],[15,15,15,15,15,193,]),'sentenciaLoopRecur':([0,37,72,77,112,],[16,16,16,16,16,]),'cond_':([0,37,72,77,112,],[17,17,17,17,17,]),'cond_else':([0,37,72,77,112,],[18,18,18,18,18,]),'doseq':([0,37,72,77,112,],[19,19,19,19,19,]),'case_expression':([0,37,72,77,112,],[20,20,20,20,20,]),'lista':([0,37,72,77,112,],[21,21,21,21,21,]),'sentencia_booleana':([0,30,37,40,72,77,84,112,],[22,55,22,85,22,22,85,22,]),'definition':([0,37,72,77,112,],[23,23,23,23,23,]),'operacion':([24,],[34,]),'operador_comparadores':([24,54,70,83,],[36,96,103,36,]),'dato':([33,36,42,43,56,71,73,87,88,89,96,100,103,106,109,110,111,121,122,130,135,140,141,147,155,176,177,186,198,213,222,224,230,236,],[58,71,88,89,99,105,109,119,121,123,130,133,135,109,141,144,145,157,121,161,164,144,167,172,179,198,199,204,213,226,234,236,238,243,]),'valor':([34,65,],[65,102,]),'internos':([37,72,],[75,107,]),'description':([37,72,],[76,76,]),'argumments':([37,39,72,76,],[77,82,77,112,]),'body':([37,72,77,112,],[78,78,113,146,]),'increase':([37,72,],[79,79,]),'linecondition':([40,84,],[84,115,]),'doseq_args':([41,],[86,]),'expresionConjuntoEnteros':([53,93,],[90,127,]),'expresionConjuntoDouble':([53,94,],[91,128,]),'expresionConjuntoString':([53,95,],[92,129,]),'recur':([55,],[97,]),'case':([88,122,],[122,159,]),'doseq_prn':([118,],[151,]),'case_else':([159,],[183,]),'expresionDefnElse':([190,],[207,]),'defn_return':([210,232,],[225,240,]),'expresionCase':([222,],[233,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',5),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',6),
  ('instrucciones -> operacion_aritmetica1','instrucciones',1,'p_instrucciones','clojure_sin.py',7),
  ('instrucciones -> condicional','instrucciones',1,'p_instrucciones','clojure_sin.py',8),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> vector_entero','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> vector_flotante','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> mapa_entero','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> mapa_flotante','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> if','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> if_do','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> defn_with_return','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',22),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',23),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',24),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',25),
  ('instrucciones -> definition','instrucciones',1,'p_instrucciones','clojure_sin.py',26),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',29),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',30),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',31),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',32),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',33),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',34),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',37),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',38),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',39),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',43),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',44),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',45),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',46),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',47),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',48),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',51),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',52),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',55),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',58),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',65),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',69),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',73),
  ('case -> dato dato STRING','case',3,'p_case','clojure_sin.py',74),
  ('case_else -> DOSPUNTOS ELSE STRING','case_else',3,'p_case_else','clojure_sin.py',77),
  ('case_expression -> LPAREN CASE dato case case impresion RPAREN','case_expression',7,'p_case_expression','clojure_sin.py',80),
  ('case_expression -> LPAREN CASE dato case case case_else RPAREN','case_expression',7,'p_case_expression','clojure_sin.py',81),
  ('lista -> LPAREN LIST dato dato RPAREN','lista',5,'p_lista','clojure_sin.py',86),
  ('description -> STRING','description',1,'p_description','clojure_sin.py',94),
  ('increase -> INCREASE LCOR dato RCOR','increase',4,'p_increase','clojure_sin.py',97),
  ('argumments -> LCOR dato dato dato RCOR','argumments',5,'p_argumments','clojure_sin.py',100),
  ('argumments -> LCOR dato dato RCOR','argumments',4,'p_argumments','clojure_sin.py',101),
  ('argumments -> LCOR dato RCOR','argumments',3,'p_argumments','clojure_sin.py',102),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',104),
  ('recur -> LPAREN RECUR LPAREN INC dato RPAREN RPAREN','recur',7,'p_recur','clojure_sin.py',107),
  ('internos -> description','internos',1,'p_internos','clojure_sin.py',111),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',112),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',113),
  ('internos -> increase','internos',1,'p_internos','clojure_sin.py',114),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',115),
  ('internos -> description argumments body','internos',3,'p_internos','clojure_sin.py',116),
  ('definition -> LPAREN DEFFUNCION VARIABLE internos RPAREN','definition',5,'p_function','clojure_sin.py',120),
  ('definition -> LPAREN DEFFUNCION internos if dato RPAREN','definition',6,'p_function','clojure_sin.py',121),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',126),
  ('valor -> VARIABLE','valor',1,'p_valor_variable','clojure_sin.py',129),
  ('vector_entero -> VECTOR_ENTERO','vector_entero',1,'p_vector_entero','clojure_sin.py',133),
  ('vector_flotante -> VECTOR_FLOTANTE','vector_flotante',1,'p_vector_flotante','clojure_sin.py',136),
  ('mapa_entero -> MAPA_ENTERO','mapa_entero',1,'p_mapa_entero','clojure_sin.py',139),
  ('mapa_flotante -> MAPA_FLOTANTE','mapa_flotante',1,'p_mapa_flotante','clojure_sin.py',142),
  ('if -> IF LPAREN operador_comparadores dato dato RPAREN','if',6,'p_if','clojure_sin.py',145),
  ('if -> IF sentencia_booleana','if',2,'p_if','clojure_sin.py',146),
  ('if -> IF sentencia_booleana recur','if',3,'p_if','clojure_sin.py',147),
  ('if_do -> LPAREN IF LPAREN operador_comparadores dato dato RPAREN LPAREN DO LPAREN dato RPAREN BOOLEAN RPAREN RPAREN','if_do',15,'p_if_do','clojure_sin.py',154),
  ('operacion -> MAS','operacion',1,'p_op_aritmetica1','clojure_sin.py',160),
  ('operacion -> MENOS','operacion',1,'p_op_aritmetica1','clojure_sin.py',161),
  ('operacion -> PRODUCTO','operacion',1,'p_op_aritmetica1','clojure_sin.py',162),
  ('operacion -> DIVISION','operacion',1,'p_op_aritmetica1','clojure_sin.py',163),
  ('operacionesLogicas -> LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPAREN','operacionesLogicas',18,'p_operacionesLogicas','clojure_sin.py',168),
  ('operacion_aritmetica1 -> LPAREN operacion valor valor RPAREN','operacion_aritmetica1',5,'p_operacion_aritmetica1','clojure_sin.py',172),
  ('condicional -> LPAREN operacion valor valor RPAREN','condicional',5,'p_booleanos','clojure_sin.py',175),
  ('doseq_args -> LCOR dato LPAREN RANGE dato RPAREN RCOR','doseq_args',7,'p_doseq_args','clojure_sin.py',180),
  ('doseq_args -> LCOR dato conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',181),
  ('doseq_args -> LCOR dato vector_entero dato vector_entero RCOR','doseq_args',6,'p_doseq_args','clojure_sin.py',182),
  ('doseq_args -> LCOR vector_entero conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',183),
  ('doseq_prn -> PRN LPAREN dato RPAREN','doseq_prn',4,'p_doseq_prn','clojure_sin.py',188),
  ('doseq_prn -> PRN LPAREN dato dato RPAREN','doseq_prn',5,'p_doseq_prn','clojure_sin.py',189),
  ('doseq_prn -> PRN LPAREN dato dato dato RPAREN','doseq_prn',6,'p_doseq_prn','clojure_sin.py',190),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN impresion RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',194),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',195),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',199),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',200),
  ('defn_with_return -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return','defn_with_return',11,'p_defn_with_return','clojure_sin.py',205),
  ('defn_with_return -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return','defn_with_return',9,'p_defn_with_return','clojure_sin.py',206),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',211),
  ('defn_return -> LPAREN dato dato RPAREN','defn_return',4,'p_defn_return','clojure_sin.py',215),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',218),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',221),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',222),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',223),
  ('sentenciaLoopRecur -> LPAREN LOOP argumments LPAREN if dato RPAREN RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',236),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',241),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',242),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',246),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',247),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',251),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',252),
]
