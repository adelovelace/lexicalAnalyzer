
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPA MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRN PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTOR WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica\n                    | conjuntos\n                    | vector\n                    | mapa\n                    | if\n                    | do\n                    | if_do\n                    | when\n                    | defn\n                    | defn_with_return\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | function\n                    | dotimes\n                    | ciclo\n                    | valor\n                    | recur\n                    dato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEoperador_aritmetico : MAS\n                  | MENOS\n                  | PRODUCTO\n                  | DIVISION asignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresion\n            | dato STRING\n            | dato impresion case\n            | dato STRING case\n    case_expression : LPAREN CASE dato case impresion RPAREN\n                        | LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN\n    argumentos_lista : dato\n                        | dato argumentos_listalista : LPAREN LIST argumentos_lista RPARENargumments : LCOR argumentos_lista RCORdescription : STRINGnombre_funct : VARIABLEbody : instruccionesrecur : LPAREN RECUR LPAREN INC dato RPAREN RPARENinternos : description\n                | argumments\n                | body\n                | argumments body\n                | description argumments bodyfunction : LPAREN DEFFUNCION nombre_funct internos RPAREN\n                | LPAREN DEFFUNCION nombre_funct internos LPAREN if body RPAREN\n    info_imprimir : dato\n                    | dato info_imprimir\n    impresion : LPAREN IMPRIMIR info_imprimir RPAREN secuencia_v : dato \n                    | dato secuencia_v\n    vector : LCOR secuencia_v RCOR secuencia_mapa : DOSPUNTOS VARIABLE dato \n                        | DOSPUNTOS VARIABLE dato secuencia_mapa\n    mapa : L_LLAVE secuencia_mapa R_LLAVEif : IF sentencia_booleana\n          | IF sentencia_booleana recur\n          | LPAREN IF instrucciones body RPAREN\n    do : LPAREN DO instrucciones RPARENif_do : LPAREN if do RPARENwhen : LPAREN WHEN sentencia_booleana body RPARENciclo : LCOR VARIABLE ENTERO RCORdotimes : LPAREN DOTIMES ciclo body RPARENoperacionesLogicas : LPAREN if recur VARIABLE RPAREN RPARENoperacion_aritmetica : LPAREN operador_aritmetico dato dato RPARENdoseq_args : LCOR dato LPAREN RANGE dato RPAREN RCOR\n                    | LCOR dato conjuntos RCOR\n                    | LCOR dato vector dato vector RCOR\n                    | LCOR vector conjuntos RCORdoseq_prn : PRN LPAREN dato RPAREN\n                    | PRN dato dato\n                    | PRN dato dato dato\n                    | PRN operacion_aritmetica\n      doseq : LPAREN DOSEQ doseq_args impresion RPAREN\n            | LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN\n    defn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n             | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n    defn_with_return : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return\n\n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGdefn_return : LPAREN dato dato RPARENexpresionCase : dato STRINGconjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP argumments LPAREN if dato RPAREN RPARENexpresionConjuntoEnteros : ENTERO\n                                 | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                                  | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,32,33,34,40,41,42,43,46,52,65,67,68,69,70,74,76,81,83,84,85,90,91,93,94,96,97,98,104,107,116,118,122,125,127,128,133,134,135,136,137,139,142,147,149,150,151,157,158,159,160,165,167,168,170,173,174,175,176,179,180,183,184,189,190,193,194,198,199,200,201,202,204,210,212,213,214,215,218,220,225,231,234,235,236,237,238,242,243,247,248,249,253,258,],[27,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,35,75,-32,-33,-34,83,27,87,75,75,106,-28,-26,-27,-29,-30,119,27,-31,35,27,119,27,-62,27,139,75,143,144,27,-77,-80,-82,-74,-63,-84,-85,173,-67,-65,27,-61,35,-48,185,143,143,-59,-87,-108,-109,-110,-45,-90,-83,-86,35,-70,27,-68,-60,-49,206,-99,-51,-52,-47,-88,-89,219,220,27,-69,143,-92,-94,-53,-54,-55,-46,35,-100,-64,119,246,-71,-111,-50,-93,-56,-104,-91,246,-103,-106,]),'NUMERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,32,33,34,40,41,65,67,68,69,70,74,76,81,84,85,90,91,93,104,107,116,118,122,127,128,136,147,148,151,157,158,159,160,165,167,168,170,174,175,179,180,184,193,194,198,201,215,218,225,231,235,236,237,238,243,247,249,253,258,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-32,-33,-34,29,29,-28,-26,-27,-29,-30,-81,29,-31,29,-20,29,-62,29,29,-77,-80,-82,-74,-84,-85,29,29,29,-59,-87,-108,-109,-110,-45,-90,-83,-86,-70,29,-60,-49,-99,-47,-88,-89,29,-55,-46,-100,-64,-102,-71,-111,-50,-56,-104,-101,-103,-106,]),'LCOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,32,33,34,37,40,41,45,47,51,65,67,68,69,70,74,76,81,84,85,90,91,92,93,99,104,107,116,118,122,127,128,135,136,137,147,151,157,158,159,160,165,167,168,170,174,175,179,180,184,193,194,198,201,211,215,218,225,231,235,236,237,238,243,247,249,253,258,],[28,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-32,-33,-34,78,28,28,95,99,105,-28,-26,-27,-29,-30,-81,28,-31,28,-20,28,131,132,138,146,28,-77,-80,-82,-74,-84,-85,95,28,-61,146,-59,-87,-108,-109,-110,-45,-90,-83,-86,-70,28,-60,-49,-99,-47,-88,-89,28,146,-55,-46,-100,-64,-102,-71,-111,-50,-56,-104,-101,-103,-106,]),'L_LLAVE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,32,33,34,40,41,74,76,84,85,90,91,93,104,107,116,118,122,127,128,136,151,157,158,159,160,165,167,168,170,174,175,179,180,184,193,194,198,201,215,218,225,231,235,236,237,238,243,247,249,253,258,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,71,-32,-33,-34,30,30,-81,30,30,-20,30,-62,30,30,-77,-80,-82,-74,-84,-85,30,-59,-87,-108,-109,-110,-45,-90,-83,-86,-70,30,-60,-49,-99,-47,-88,-89,30,-55,-46,-100,-64,-102,-71,-111,-50,-56,-104,-101,-103,-106,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,33,34,35,40,41,74,76,83,84,85,90,91,93,104,107,116,118,122,127,128,136,139,151,157,158,159,160,165,167,168,170,173,174,175,179,180,184,193,194,198,201,215,218,220,225,231,235,236,237,238,243,247,249,253,258,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,40,-32,-33,-34,76,31,31,-81,31,40,31,-20,31,-62,31,31,-77,-80,-82,-74,-84,-85,31,31,-59,-87,-108,-109,-110,-45,-90,-83,-86,31,-70,31,-60,-49,-99,-47,-88,-89,31,-55,-46,31,-100,-64,-102,-71,-111,-50,-56,-104,-101,-103,-106,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,32,33,34,38,39,40,41,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,74,76,77,80,81,82,84,85,90,91,93,95,99,100,102,103,104,107,113,116,117,118,121,122,127,128,136,138,146,151,155,156,157,158,159,160,165,167,168,170,174,175,177,178,179,180,183,184,187,189,190,193,194,198,201,206,207,209,215,218,225,227,231,235,236,237,238,243,245,246,247,249,252,253,258,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,65,-32,-33,-34,65,65,32,32,65,65,65,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,108,-28,65,-26,-27,-29,-30,113,-81,32,65,65,-31,65,32,-20,32,-62,32,65,65,65,65,65,32,-77,113,-80,65,-82,65,-74,-84,-85,32,65,65,-59,108,65,-87,-108,-109,-110,-45,-90,-83,-86,-70,32,65,65,-60,-49,65,-99,65,65,65,-47,-88,-89,32,65,65,65,-55,-46,-100,65,-64,-102,-71,-111,-50,-56,65,65,-104,-101,65,-103,-106,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,32,33,34,38,39,40,41,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,74,76,77,80,81,82,84,85,90,91,93,95,99,100,102,103,104,107,114,116,117,118,121,122,127,128,136,138,146,151,156,157,158,159,160,165,167,168,170,174,175,177,178,179,180,183,184,187,189,190,193,194,198,201,206,207,209,215,218,225,227,231,235,236,237,238,243,245,246,247,249,252,253,258,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,69,-32,-33,-34,69,69,33,33,69,69,69,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,69,-26,-27,-29,-30,114,-81,33,69,69,-31,69,33,-20,33,-62,33,69,69,69,69,69,33,-77,114,-80,69,-82,69,-74,-84,-85,33,69,69,-59,69,-87,-108,-109,-110,-45,-90,-83,-86,-70,33,69,69,-60,-49,69,-99,69,69,69,-47,-88,-89,33,69,69,69,-55,-46,-100,69,-64,-102,-71,-111,-50,-56,69,69,-104,-101,69,-103,-106,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,32,33,34,38,39,40,41,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,74,76,77,80,81,82,84,85,90,91,93,95,99,100,102,103,104,107,116,117,118,121,122,127,128,136,138,146,151,156,157,158,159,160,165,167,168,170,174,175,177,178,179,180,183,184,187,189,190,193,194,198,201,206,207,209,215,218,225,227,231,235,236,237,238,243,245,246,247,249,252,253,258,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,70,-32,-33,-34,70,70,34,34,70,70,70,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,70,-26,-27,-29,-30,-81,34,70,70,-31,70,34,-20,34,-62,34,70,70,70,70,70,34,-77,-80,70,-82,70,-74,-84,-85,34,70,70,-59,70,-87,-108,-109,-110,-45,-90,-83,-86,-70,34,70,70,-60,-49,70,-99,70,70,70,-47,-88,-89,34,70,70,70,-55,-46,-100,70,-64,-102,-71,-111,-50,-56,70,70,-104,-101,70,-103,-106,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,32,33,34,74,107,116,118,122,127,128,151,157,158,159,160,165,167,168,170,174,180,184,193,194,198,215,218,225,231,235,236,237,238,243,247,249,253,258,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-32,-33,-34,-81,-77,-80,-82,-74,-84,-85,-59,-87,-108,-109,-110,-45,-90,-83,-86,-70,-49,-99,-47,-88,-89,-55,-46,-100,-64,-102,-71,-111,-50,-56,-104,-101,-103,-106,]),'RPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,32,33,34,65,67,68,69,70,74,79,80,81,86,88,101,102,107,116,118,120,122,123,124,125,126,127,128,129,130,133,134,135,136,137,141,142,145,151,152,153,154,157,158,159,160,165,167,168,169,170,174,176,179,180,182,184,191,193,194,195,197,198,202,203,205,208,215,217,218,221,222,223,224,225,226,227,228,230,231,232,235,236,237,238,239,240,243,244,247,249,253,256,258,259,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-32,-33,-34,-28,-26,-27,-29,-30,-81,122,-72,-31,127,128,151,-57,-77,-80,-82,165,-74,-73,167,-63,168,-84,-85,169,170,174,-67,-65,-66,-61,180,-48,184,-59,-58,193,194,-87,-108,-109,-110,-45,-90,-83,198,-86,-70,-68,-60,-49,205,-99,215,-47,-88,217,218,-89,-69,223,225,-98,-55,231,-46,235,236,237,238,-100,239,-96,241,243,-64,244,-102,-71,-111,-50,-95,-97,-56,249,-104,-101,-103,258,-106,-105,]),'DEFICION':([27,83,],[36,36,]),'LET':([27,83,],[37,37,]),'IMPRIMIR':([27,83,143,144,],[38,38,38,38,]),'DO':([27,83,87,],[41,41,41,]),'WHEN':([27,83,],[43,43,]),'DEFFUNCION':([27,83,],[44,44,]),'LOOP':([27,83,],[45,45,]),'COND':([27,83,],[46,46,]),'DOSEQ':([27,83,],[47,47,]),'CASE':([27,83,219,],[48,48,233,]),'LIST':([27,83,],[49,49,]),'DOTIMES':([27,83,],[51,51,]),'RECUR':([27,83,87,119,],[52,52,52,52,]),'MAS':([27,83,206,],[53,53,53,]),'MENOS':([27,83,206,],[54,54,54,]),'PRODUCTO':([27,83,206,],[55,55,55,]),'DIVISION':([27,83,206,],[56,56,56,]),'COMPARA_IGUAL':([27,75,83,],[57,57,57,]),'MENORQUE':([27,75,83,],[58,58,58,]),'MAYORQUE':([27,75,83,],[59,59,59,]),'MAYORIGUALQUE':([27,75,83,],[60,60,60,]),'MENORIGUALQUE':([27,75,83,],[61,61,61,]),'DIFERENTE':([27,75,83,],[62,62,62,]),'VARIABLE':([28,36,38,39,44,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,73,74,77,78,80,81,82,89,95,99,100,102,103,105,107,117,118,121,122,131,132,138,146,156,168,177,178,183,187,189,190,193,206,207,209,227,231,233,245,246,252,],[64,77,81,81,91,81,81,81,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,81,-26,-27,-29,-30,117,-81,81,121,81,-31,81,129,81,81,81,81,81,155,-77,81,-82,81,-74,171,172,64,81,81,-83,81,81,81,81,81,81,-47,81,81,81,81,-64,245,81,81,81,]),'STRING':([28,38,39,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,74,77,80,81,82,91,93,95,99,100,102,103,107,115,117,118,121,122,138,146,149,156,168,177,178,183,187,189,190,193,206,207,209,216,227,231,245,246,251,252,257,],[67,67,67,67,67,67,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,67,-26,-27,-29,-30,115,-81,67,67,-31,67,-62,137,67,67,67,67,67,-77,115,67,-82,67,-74,67,67,190,67,-83,67,67,67,67,67,67,-47,67,67,67,230,67,-64,67,67,255,67,259,]),'CHAR':([28,38,39,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,74,77,80,81,82,95,99,100,102,103,107,117,118,121,122,138,146,156,168,177,178,183,187,189,190,193,206,207,209,227,231,245,246,252,],[68,68,68,68,68,68,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,68,-26,-27,-29,-30,-81,68,68,-31,68,68,68,68,68,68,-77,68,-82,68,-74,68,68,68,-83,68,68,68,68,68,68,-47,68,68,68,68,-64,68,68,68,]),'DOSPUNTOS':([30,65,67,68,69,70,81,122,141,142,150,164,189,190,213,214,250,255,],[73,-28,-26,-27,-29,-30,-31,-74,181,-48,192,73,-51,-52,-53,-54,254,-107,]),'INCREASE':([44,],[92,]),'RCOR':([63,64,65,66,67,68,69,70,81,102,107,108,109,140,152,158,159,160,166,171,172,177,186,188,229,241,],[107,-31,-28,-75,-26,-27,-29,-30,-31,-57,-77,157,-76,179,-58,-108,-109,-110,197,199,200,-57,210,212,242,248,]),'R_LLAVE':([65,67,68,69,70,72,81,110,111,112,113,114,115,161,162,163,164,196,],[-28,-26,-27,-29,-30,116,-31,158,159,160,-112,-114,-116,-113,-115,-117,-78,-79,]),'INC':([106,],[156,]),'PRN':([144,],[183,]),'ELSE':([181,192,254,],[204,216,257,]),'RANGE':([185,],[209,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,40,41,76,84,90,93,104,136,175,201,],[1,84,86,84,125,125,125,125,125,125,125,]),'asignacion':([0,40,41,76,84,90,93,104,136,175,201,],[2,2,2,2,2,2,2,2,2,2,2,]),'impresion':([0,40,41,76,84,90,93,97,98,104,136,149,150,175,201,204,],[3,3,3,3,3,3,3,142,145,3,3,189,191,3,3,224,]),'operacion_aritmetica':([0,40,41,76,84,90,93,104,136,175,183,201,],[4,4,4,4,4,4,4,4,4,4,208,4,]),'conjuntos':([0,40,41,76,84,90,93,104,136,147,148,175,201,],[5,5,5,5,5,5,5,5,5,186,188,5,5,]),'vector':([0,40,41,76,84,90,93,99,104,136,147,175,201,211,],[6,6,6,6,6,6,6,148,6,6,187,6,6,229,]),'mapa':([0,40,41,76,84,90,93,104,136,175,201,],[7,7,7,7,7,7,7,7,7,7,7,]),'if':([0,27,40,41,76,83,84,90,93,104,136,139,173,175,201,220,],[8,42,8,8,8,42,8,8,8,8,8,178,201,8,8,234,]),'do':([0,40,41,42,76,84,90,93,104,136,175,201,],[9,9,9,88,9,9,9,9,9,9,9,9,]),'if_do':([0,40,41,76,84,90,93,104,136,175,201,],[10,10,10,10,10,10,10,10,10,10,10,]),'when':([0,40,41,76,84,90,93,104,136,175,201,],[11,11,11,11,11,11,11,11,11,11,11,]),'defn':([0,40,41,76,84,90,93,104,136,175,201,],[12,12,12,12,12,12,12,12,12,12,12,]),'defn_with_return':([0,40,41,76,84,90,93,104,136,175,201,],[13,13,13,13,13,13,13,13,13,13,13,]),'operacionesLogicas':([0,40,41,76,84,90,93,104,136,175,200,201,],[14,14,14,14,14,14,14,14,14,14,221,14,]),'sentenciaLoopRecur':([0,40,41,76,84,90,93,104,136,175,201,],[15,15,15,15,15,15,15,15,15,15,15,]),'cond_':([0,40,41,76,84,90,93,104,136,175,201,],[16,16,16,16,16,16,16,16,16,16,16,]),'cond_else':([0,40,41,76,84,90,93,104,136,175,201,],[17,17,17,17,17,17,17,17,17,17,17,]),'doseq':([0,40,41,76,84,90,93,104,136,175,201,],[18,18,18,18,18,18,18,18,18,18,18,]),'case_expression':([0,40,41,76,84,90,93,104,136,175,201,],[19,19,19,19,19,19,19,19,19,19,19,]),'lista':([0,40,41,76,84,90,93,104,136,175,201,],[20,20,20,20,20,20,20,20,20,20,20,]),'sentencia_booleana':([0,31,40,41,43,46,76,84,90,93,96,104,136,175,201,],[21,74,85,21,90,97,21,21,21,21,97,21,21,21,21,]),'function':([0,40,41,76,84,90,93,104,136,175,201,],[22,22,22,22,22,22,22,22,22,22,22,]),'dotimes':([0,40,41,76,84,90,93,104,136,175,201,],[23,23,23,23,23,23,23,23,23,23,23,]),'ciclo':([0,40,41,51,76,84,90,93,104,136,175,201,],[24,24,24,104,24,24,24,24,24,24,24,24,]),'valor':([0,40,41,76,84,90,93,104,136,175,201,],[25,25,25,25,25,25,25,25,25,25,25,]),'recur':([0,40,41,42,74,76,84,85,90,93,104,136,175,201,234,],[26,26,26,89,118,26,26,118,26,26,26,26,26,26,89,]),'operador_aritmetico':([27,83,206,],[39,39,39,]),'operador_comparadores':([27,75,83,],[50,50,50,]),'secuencia_v':([28,66,138,146,177,],[63,109,63,63,109,]),'dato':([28,38,39,48,49,50,66,77,80,82,95,99,100,102,103,117,121,138,146,156,177,178,183,187,189,190,206,207,209,227,245,246,252,],[66,80,82,100,102,103,66,120,80,124,102,147,149,102,153,164,166,177,66,195,177,203,207,211,149,149,226,227,228,240,251,252,256,]),'secuencia_mapa':([30,164,],[72,196,]),'info_imprimir':([38,80,],[79,123,]),'nombre_funct':([44,],[93,]),'argumments':([45,93,135,],[94,136,175,]),'linecondition':([46,96,],[96,141,]),'doseq_args':([47,],[98,]),'argumentos_lista':([49,95,102,138,177,],[101,140,152,140,152,]),'expresionConjuntoEnteros':([71,113,],[110,161,]),'expresionConjuntoDouble':([71,114,],[111,162,]),'expresionConjuntoString':([71,115,],[112,163,]),'body':([84,90,93,104,136,175,201,],[126,130,134,154,176,202,222,]),'internos':([93,],[133,]),'description':([93,],[135,]),'case':([100,189,190,],[150,213,214,]),'doseq_prn':([144,],[182,]),'expresionDefnElse':([219,],[232,]),'defn_return':([235,249,],[247,253,]),'expresionCase':([245,],[250,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> operacion_aritmetica','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> vector','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> mapa','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> if','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> do','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> if_do','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> when','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> defn_with_return','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',22),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',23),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',24),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',25),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',26),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',27),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',28),
  ('instrucciones -> function','instrucciones',1,'p_instrucciones','clojure_sin.py',29),
  ('instrucciones -> dotimes','instrucciones',1,'p_instrucciones','clojure_sin.py',30),
  ('instrucciones -> ciclo','instrucciones',1,'p_instrucciones','clojure_sin.py',31),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','clojure_sin.py',32),
  ('instrucciones -> recur','instrucciones',1,'p_instrucciones','clojure_sin.py',33),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',39),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',40),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',41),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',42),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',43),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',44),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',49),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',50),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',51),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',57),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',58),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',59),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',60),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',61),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',62),
  ('operador_aritmetico -> MAS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',67),
  ('operador_aritmetico -> MENOS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',68),
  ('operador_aritmetico -> PRODUCTO','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',69),
  ('operador_aritmetico -> DIVISION','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',70),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',75),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',76),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',86),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',92),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',99),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',105),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',118),
  ('case -> dato STRING','case',2,'p_case','clojure_sin.py',119),
  ('case -> dato impresion case','case',3,'p_case','clojure_sin.py',120),
  ('case -> dato STRING case','case',3,'p_case','clojure_sin.py',121),
  ('case_expression -> LPAREN CASE dato case impresion RPAREN','case_expression',6,'p_case_expression','clojure_sin.py',131),
  ('case_expression -> LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN','case_expression',8,'p_case_expression','clojure_sin.py',132),
  ('argumentos_lista -> dato','argumentos_lista',1,'p_argumentos_lista','clojure_sin.py',142),
  ('argumentos_lista -> dato argumentos_lista','argumentos_lista',2,'p_argumentos_lista','clojure_sin.py',143),
  ('lista -> LPAREN LIST argumentos_lista RPAREN','lista',4,'p_lista','clojure_sin.py',152),
  ('argumments -> LCOR argumentos_lista RCOR','argumments',3,'p_argumments','clojure_sin.py',157),
  ('description -> STRING','description',1,'p_description','clojure_sin.py',161),
  ('nombre_funct -> VARIABLE','nombre_funct',1,'p_nombre_funct','clojure_sin.py',165),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',169),
  ('recur -> LPAREN RECUR LPAREN INC dato RPAREN RPAREN','recur',7,'p_recur','clojure_sin.py',174),
  ('internos -> description','internos',1,'p_internos','clojure_sin.py',179),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',180),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',181),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',182),
  ('internos -> description argumments body','internos',3,'p_internos','clojure_sin.py',183),
  ('function -> LPAREN DEFFUNCION nombre_funct internos RPAREN','function',5,'p_function','clojure_sin.py',202),
  ('function -> LPAREN DEFFUNCION nombre_funct internos LPAREN if body RPAREN','function',8,'p_function','clojure_sin.py',203),
  ('info_imprimir -> dato','info_imprimir',1,'p_datos_impresion','clojure_sin.py',211),
  ('info_imprimir -> dato info_imprimir','info_imprimir',2,'p_datos_impresion','clojure_sin.py',212),
  ('impresion -> LPAREN IMPRIMIR info_imprimir RPAREN','impresion',4,'p_impresion','clojure_sin.py',216),
  ('secuencia_v -> dato','secuencia_v',1,'p_secuencia_vector','clojure_sin.py',224),
  ('secuencia_v -> dato secuencia_v','secuencia_v',2,'p_secuencia_vector','clojure_sin.py',225),
  ('vector -> LCOR secuencia_v RCOR','vector',3,'p_vector','clojure_sin.py',234),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato','secuencia_mapa',3,'p_secuencia_mapa','clojure_sin.py',242),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato secuencia_mapa','secuencia_mapa',4,'p_secuencia_mapa','clojure_sin.py',243),
  ('mapa -> L_LLAVE secuencia_mapa R_LLAVE','mapa',3,'p_mapa','clojure_sin.py',249),
  ('if -> IF sentencia_booleana','if',2,'p_if','clojure_sin.py',254),
  ('if -> IF sentencia_booleana recur','if',3,'p_if','clojure_sin.py',255),
  ('if -> LPAREN IF instrucciones body RPAREN','if',5,'p_if','clojure_sin.py',256),
  ('do -> LPAREN DO instrucciones RPAREN','do',4,'p_do','clojure_sin.py',268),
  ('if_do -> LPAREN if do RPAREN','if_do',4,'p_if_do','clojure_sin.py',273),
  ('when -> LPAREN WHEN sentencia_booleana body RPAREN','when',5,'p_when','clojure_sin.py',278),
  ('ciclo -> LCOR VARIABLE ENTERO RCOR','ciclo',4,'p_ciclo','clojure_sin.py',283),
  ('dotimes -> LPAREN DOTIMES ciclo body RPAREN','dotimes',5,'p_dotimes','clojure_sin.py',288),
  ('operacionesLogicas -> LPAREN if recur VARIABLE RPAREN RPAREN','operacionesLogicas',6,'p_operacionesLogicas','clojure_sin.py',293),
  ('operacion_aritmetica -> LPAREN operador_aritmetico dato dato RPAREN','operacion_aritmetica',5,'p_operacion_aritmetica1','clojure_sin.py',298),
  ('doseq_args -> LCOR dato LPAREN RANGE dato RPAREN RCOR','doseq_args',7,'p_doseq_args','clojure_sin.py',304),
  ('doseq_args -> LCOR dato conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',305),
  ('doseq_args -> LCOR dato vector dato vector RCOR','doseq_args',6,'p_doseq_args','clojure_sin.py',306),
  ('doseq_args -> LCOR vector conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',307),
  ('doseq_prn -> PRN LPAREN dato RPAREN','doseq_prn',4,'p_doseq_prn','clojure_sin.py',318),
  ('doseq_prn -> PRN dato dato','doseq_prn',3,'p_doseq_prn','clojure_sin.py',319),
  ('doseq_prn -> PRN dato dato dato','doseq_prn',4,'p_doseq_prn','clojure_sin.py',320),
  ('doseq_prn -> PRN operacion_aritmetica','doseq_prn',2,'p_doseq_prn','clojure_sin.py',321),
  ('doseq -> LPAREN DOSEQ doseq_args impresion RPAREN','doseq',5,'p_doseq','clojure_sin.py',339),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',340),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',349),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',350),
  ('defn_with_return -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return','defn_with_return',11,'p_defn_with_return','clojure_sin.py',359),
  ('defn_with_return -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return','defn_with_return',9,'p_defn_with_return','clojure_sin.py',360),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',370),
  ('defn_return -> LPAREN dato dato RPAREN','defn_return',4,'p_defn_return','clojure_sin.py',375),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',380),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',386),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',387),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',388),
  ('sentenciaLoopRecur -> LPAREN LOOP argumments LPAREN if dato RPAREN RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',395),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',401),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',402),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',412),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',413),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',422),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',423),
]
