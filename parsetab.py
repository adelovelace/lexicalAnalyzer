
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPA_ENTERO MAPA_FLOTANTE MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTOR_ENTERO VECTOR_FLOTANTE WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica1\n                    | condicional\n                    | conjuntos\n                    | vector_entero\n                    | vector_flotante\n                    | mapa_entero\n                    | mapa_flotante\n                    | if\n                    | if_do\n                    | defn\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | definitiondato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEasignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresioncase_expression : LPAREN CASE dato case case impresion RPARENlista : LPAREN LIST dato dato RPARENdescription : STRINGargumments : LCOR dato dato dato RCOR\n                   | LCOR dato dato RCOR\n                   | LCOR dato RCORbody : instruccionesinternos : description\n                | argumments\n                | body\n                | argumments body\n                | description argumments bodydefinition : LPAREN DEFFUNCION VARIABLE internos RPARENimpresion : LPAREN IMPRIMIR dato RPARENvalor : VARIABLEvector_entero : VECTOR_ENTEROvector_flotante : VECTOR_FLOTANTEmapa_entero : MAPA_ENTEROmapa_flotante : MAPA_FLOTANTEif :  IF LPAREN operador_comparadores dato dato RPARENif_do : LPAREN IF LPAREN operador_comparadores dato dato RPAREN LPAREN DO LPAREN dato RPAREN BOOLEAN RPAREN RPARENoperacion : MAS\n          | MENOS\n          | PRODUCTO\n          | DIVISION operacionesLogicas : LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPARENoperacion_aritmetica1 : LPAREN operacion valor valor RPARENcondicional : LPAREN operacion valor valor RPARENdoseq : LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPARENdefn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n      \n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGexpresionCase : dato STRING conjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP LCOR VARIABLE ENTERO RCOR  operacionesLogicas RPARENexpresionConjuntoEnteros : ENTERO\n                     | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                     | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,29,34,39,57,58,59,60,61,62,70,74,75,88,96,103,105,106,121,125,133,134,140,142,144,145,146,151,152,155,166,167,172,173,177,184,186,],[23,53,68,73,-22,-23,-24,-25,-26,-27,23,73,104,-57,23,-40,132,104,-39,23,-43,104,153,-49,156,156,104,162,163,-48,-47,176,178,179,184,104,191,]),'NUMERAL':([0,70,96,125,142,155,166,],[24,24,24,24,-49,-48,-47,]),'VECTOR_ENTERO':([0,70,96,125,142,155,166,],[25,25,25,25,-49,-48,-47,]),'VECTOR_FLOTANTE':([0,70,96,125,142,155,166,],[26,26,26,26,-49,-48,-47,]),'MAPA_ENTERO':([0,70,96,125,142,155,166,],[27,27,27,27,-49,-48,-47,]),'MAPA_FLOTANTE':([0,70,96,125,142,155,166,],[28,28,28,28,-49,-48,-47,]),'IF':([0,23,70,96,125,142,155,156,166,],[29,34,29,29,29,-49,-48,167,-47,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,88,109,110,111,116,118,121,124,130,135,149,150,161,168,169,170,180,197,200,204,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-59,-60,-61,-62,-57,-77,-78,-79,-37,-70,-39,-56,-41,-45,-63,-38,-44,-74,-80,-42,-73,-72,-64,-69,]),'RPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,56,57,58,59,60,61,62,64,65,66,67,86,88,89,92,94,95,96,97,98,99,102,103,108,109,110,111,116,118,121,124,127,130,135,136,137,138,139,142,143,148,149,150,155,157,158,159,160,161,164,166,168,169,170,174,180,185,189,193,194,195,196,197,198,199,200,202,203,204,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-59,-60,-61,-62,88,-22,-23,-24,-25,-26,-27,-28,-29,-30,-58,116,-57,118,121,124,-51,-52,-53,-46,-50,130,-40,135,-77,-78,-79,-37,-70,-39,-56,-54,-41,-45,149,150,151,152,-49,-55,161,-63,-38,-48,168,169,170,171,-44,174,-47,-74,-80,-42,180,-73,190,193,197,198,199,-75,-72,200,201,-64,203,204,-69,]),'DEFICION':([23,],[30,]),'LET':([23,],[31,]),'IMPRIMIR':([23,104,],[32,32,]),'DEFFUNCION':([23,],[36,]),'LOOP':([23,],[38,]),'COND':([23,],[39,]),'DOSEQ':([23,],[40,]),'CASE':([23,153,],[41,165,]),'LIST':([23,],[42,]),'MAS':([23,],[43,]),'MENOS':([23,],[44,]),'PRODUCTO':([23,],[45,]),'DIVISION':([23,],[46,]),'COMPARA_IGUAL':([23,53,68,73,],[47,47,47,47,]),'MENORQUE':([23,53,68,73,176,],[37,37,91,37,183,]),'MAYORQUE':([23,53,68,73,],[48,48,48,48,]),'MAYORIGUALQUE':([23,53,68,73,],[49,49,49,49,]),'MENORIGUALQUE':([23,53,68,73,],[50,50,50,50,]),'DIFERENTE':([23,53,68,73,],[51,51,51,51,]),'L_LLAVE':([24,],[52,]),'VARIABLE':([30,32,33,35,36,37,41,42,43,44,45,46,47,48,49,50,51,54,55,57,58,59,60,61,62,63,64,65,66,67,69,72,76,77,78,85,87,88,90,91,93,100,107,115,119,122,123,126,133,141,147,165,175,178,183,191,201,],[54,62,67,62,70,-32,62,62,-65,-66,-67,-68,-31,-33,-34,-35,-36,62,87,-22,-23,-24,-25,-26,-27,67,-28,-29,-30,-58,62,101,105,62,62,62,62,-57,62,120,122,128,62,62,62,-27,62,62,-43,62,160,175,62,62,120,195,202,]),'LCOR':([31,38,40,70,71,95,98,],[55,72,76,93,100,126,-46,]),'STRING':([32,35,37,41,42,47,48,49,50,51,52,54,57,58,59,60,61,62,69,70,77,78,84,85,87,88,90,91,93,107,115,119,122,123,126,133,141,175,178,182,192,],[57,57,-32,57,57,-31,-33,-34,-35,-36,84,57,-22,-23,-24,-25,-26,-27,57,98,57,57,84,57,57,-57,57,-32,57,57,57,57,-27,57,57,-43,57,57,57,188,196,]),'CHAR':([32,35,37,41,42,47,48,49,50,51,54,57,58,59,60,61,62,69,77,78,85,87,88,90,91,93,107,115,119,122,123,126,133,141,175,178,],[58,58,-32,58,58,-31,-33,-34,-35,-36,58,-22,-23,-24,-25,-26,-27,58,58,58,58,58,-57,58,-32,58,58,58,58,-27,58,58,-43,58,58,58,]),'ENTERO':([32,33,35,37,41,42,43,44,45,46,47,48,49,50,51,52,54,57,58,59,60,61,62,63,64,65,66,67,69,77,78,82,85,87,88,90,91,93,101,107,115,119,120,122,123,126,133,141,175,178,],[59,64,59,-32,59,59,-65,-66,-67,-68,-31,-33,-34,-35,-36,82,59,-22,-23,-24,-25,-26,-27,64,-28,-29,-30,-58,59,59,59,82,59,59,-57,59,-32,59,129,59,59,59,139,-27,59,59,-43,59,59,59,]),'FLOTANTE':([32,33,35,37,41,42,43,44,45,46,47,48,49,50,51,52,54,57,58,59,60,61,62,63,64,65,66,67,69,77,78,83,85,87,88,90,91,93,107,115,119,122,123,126,133,141,175,178,],[60,65,60,-32,60,60,-65,-66,-67,-68,-31,-33,-34,-35,-36,83,60,-22,-23,-24,-25,-26,-27,65,-28,-29,-30,-58,60,60,60,83,60,60,-57,60,-32,60,60,60,60,-27,60,60,-43,60,60,60,]),'BOOLEAN':([32,33,35,37,41,42,43,44,45,46,47,48,49,50,51,54,57,58,59,60,61,62,63,64,65,66,67,69,77,78,85,87,88,90,91,93,107,115,119,122,123,126,133,141,175,178,190,],[61,66,61,-32,61,61,-65,-66,-67,-68,-31,-33,-34,-35,-36,61,-22,-23,-24,-25,-26,-27,66,-28,-29,-30,-58,61,61,61,61,61,-57,61,-32,61,61,61,61,-27,61,61,-43,61,61,61,194,]),'INCREASE':([36,],[71,]),'RCOR':([57,58,59,60,61,62,117,122,123,128,129,141,154,171,],[-22,-23,-24,-25,-26,-27,137,140,142,144,145,155,166,177,]),'R_LLAVE':([79,80,81,82,83,84,112,113,114,],[109,110,111,-81,-83,-85,-82,-84,-86,]),'DOSPUNTOS':([88,102,103,181,188,],[-57,131,-40,187,-76,]),'ELSE':([131,187,],[146,192,]),'RANGE':([132,],[147,]),'DO':([162,],[172,]),'RECUR':([163,],[173,]),'INC':([179,],[186,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,70,96,125,],[1,99,99,99,]),'asignacion':([0,70,96,125,],[2,2,2,2,]),'impresion':([0,70,75,96,106,125,134,146,184,],[3,3,103,3,133,3,148,159,189,]),'operacion_aritmetica1':([0,70,96,125,],[4,4,4,4,]),'condicional':([0,70,96,125,],[5,5,5,5,]),'conjuntos':([0,70,96,125,],[6,6,6,6,]),'vector_entero':([0,70,96,125,],[7,7,7,7,]),'vector_flotante':([0,70,96,125,],[8,8,8,8,]),'mapa_entero':([0,70,96,125,],[9,9,9,9,]),'mapa_flotante':([0,70,96,125,],[10,10,10,10,]),'if':([0,70,96,125,],[11,11,11,11,]),'if_do':([0,70,96,125,],[12,12,12,12,]),'defn':([0,70,96,125,],[13,13,13,13,]),'operacionesLogicas':([0,70,96,125,144,145,],[14,14,14,14,157,158,]),'sentenciaLoopRecur':([0,70,96,125,],[15,15,15,15,]),'cond_':([0,70,96,125,],[16,16,16,16,]),'cond_else':([0,70,96,125,],[17,17,17,17,]),'doseq':([0,70,96,125,],[18,18,18,18,]),'case_expression':([0,70,96,125,],[19,19,19,19,]),'lista':([0,70,96,125,],[20,20,20,20,]),'sentencia_booleana':([0,39,70,74,96,125,],[21,75,21,75,21,21,]),'definition':([0,70,96,125,],[22,22,22,22,]),'operacion':([23,],[33,]),'operador_comparadores':([23,53,68,73,],[35,85,90,35,]),'dato':([32,35,41,42,54,69,77,78,85,87,90,93,107,115,119,123,126,141,175,178,],[56,69,77,78,86,92,106,108,115,117,119,123,106,136,138,141,123,154,182,185,]),'valor':([33,63,],[63,89,]),'linecondition':([39,74,],[74,102,]),'expresionConjuntoEnteros':([52,82,],[79,112,]),'expresionConjuntoDouble':([52,83,],[80,113,]),'expresionConjuntoString':([52,84,],[81,114,]),'internos':([70,],[94,]),'description':([70,],[95,]),'argumments':([70,95,],[96,125,]),'body':([70,96,125,],[97,127,143,]),'case':([77,107,],[107,134,]),'expresionDefnElse':([153,],[164,]),'expresionCase':([175,],[181,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',5),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',6),
  ('instrucciones -> operacion_aritmetica1','instrucciones',1,'p_instrucciones','clojure_sin.py',7),
  ('instrucciones -> condicional','instrucciones',1,'p_instrucciones','clojure_sin.py',8),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> vector_entero','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> vector_flotante','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> mapa_entero','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> mapa_flotante','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> if','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> if_do','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',22),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',23),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',24),
  ('instrucciones -> definition','instrucciones',1,'p_instrucciones','clojure_sin.py',25),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',28),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',29),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',30),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',31),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',32),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',33),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',36),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',37),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',38),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',42),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',43),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',44),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',45),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',46),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',47),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',50),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',51),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',54),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',57),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',64),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',68),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',72),
  ('case_expression -> LPAREN CASE dato case case impresion RPAREN','case_expression',7,'p_case_expression','clojure_sin.py',75),
  ('lista -> LPAREN LIST dato dato RPAREN','lista',5,'p_lista','clojure_sin.py',79),
  ('description -> STRING','description',1,'p_description','clojure_sin.py',87),
  ('argumments -> LCOR dato dato dato RCOR','argumments',5,'p_argumments','clojure_sin.py',90),
  ('argumments -> LCOR dato dato RCOR','argumments',4,'p_argumments','clojure_sin.py',91),
  ('argumments -> LCOR dato RCOR','argumments',3,'p_argumments','clojure_sin.py',92),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',94),
  ('internos -> description','internos',1,'p_internos','clojure_sin.py',96),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',97),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',98),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',99),
  ('internos -> description argumments body','internos',3,'p_internos','clojure_sin.py',100),
  ('definition -> LPAREN DEFFUNCION VARIABLE internos RPAREN','definition',5,'p_function','clojure_sin.py',104),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',108),
  ('valor -> VARIABLE','valor',1,'p_valor_variable','clojure_sin.py',111),
  ('vector_entero -> VECTOR_ENTERO','vector_entero',1,'p_vector_entero','clojure_sin.py',115),
  ('vector_flotante -> VECTOR_FLOTANTE','vector_flotante',1,'p_vector_flotante','clojure_sin.py',118),
  ('mapa_entero -> MAPA_ENTERO','mapa_entero',1,'p_mapa_entero','clojure_sin.py',121),
  ('mapa_flotante -> MAPA_FLOTANTE','mapa_flotante',1,'p_mapa_flotante','clojure_sin.py',124),
  ('if -> IF LPAREN operador_comparadores dato dato RPAREN','if',6,'p_if','clojure_sin.py',127),
  ('if_do -> LPAREN IF LPAREN operador_comparadores dato dato RPAREN LPAREN DO LPAREN dato RPAREN BOOLEAN RPAREN RPAREN','if_do',15,'p_if_do','clojure_sin.py',130),
  ('operacion -> MAS','operacion',1,'p_op_aritmetica1','clojure_sin.py',136),
  ('operacion -> MENOS','operacion',1,'p_op_aritmetica1','clojure_sin.py',137),
  ('operacion -> PRODUCTO','operacion',1,'p_op_aritmetica1','clojure_sin.py',138),
  ('operacion -> DIVISION','operacion',1,'p_op_aritmetica1','clojure_sin.py',139),
  ('operacionesLogicas -> LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPAREN','operacionesLogicas',18,'p_operacionesLogicas','clojure_sin.py',142),
  ('operacion_aritmetica1 -> LPAREN operacion valor valor RPAREN','operacion_aritmetica1',5,'p_operacion_aritmetica1','clojure_sin.py',145),
  ('condicional -> LPAREN operacion valor valor RPAREN','condicional',5,'p_booleanos','clojure_sin.py',148),
  ('doseq -> LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPAREN','doseq',13,'p_doseq','clojure_sin.py',151),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',154),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',155),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',160),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',164),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',167),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',168),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',169),
  ('sentenciaLoopRecur -> LPAREN LOOP LCOR VARIABLE ENTERO RCOR operacionesLogicas RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',173),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',176),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',177),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',181),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',182),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',186),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',187),
]
