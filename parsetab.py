
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPA MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRN PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTOR WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica\n                    | conjuntos\n                    | vector\n                    | mapa\n                    | if\n                    | do\n                    | if_do\n                    | when\n                    | defn\n                    | defn_with_return\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | function\n                    | dotimes\n                    | ciclo\n                    | valor\n                    | recur\n                    | dato\n                    dato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEoperador_aritmetico : MAS\n                  | MENOS\n                  | PRODUCTO\n                  | DIVISION asignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresion\n            | dato STRING\n            | dato impresion case\n            | dato STRING case\n    case_expression : LPAREN CASE dato case impresion RPAREN\n                        | LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN\n    argumentos_lista : dato\n                        | dato argumentos_listalista : LPAREN LIST argumentos_lista RPARENargumments : LCOR argumentos_lista RCORdescription : STRINGnombre_funct : VARIABLEbody : instruccionesrecur : LPAREN RECUR LPAREN INC dato RPAREN RPARENinternos : description\n                | argumments\n                | body\n                | argumments body\n                | description argumments bodyfunction : LPAREN DEFFUNCION nombre_funct internos RPAREN\n                | LPAREN DEFFUNCION nombre_funct internos LPAREN if body RPAREN\n    info_imprimir : dato\n                    | dato info_imprimir\n    impresion : LPAREN IMPRIMIR info_imprimir RPAREN secuencia_v : dato \n                    | dato secuencia_v\n    vector : LCOR secuencia_v RCOR secuencia_mapa : DOSPUNTOS VARIABLE dato \n                        | DOSPUNTOS VARIABLE dato secuencia_mapa\n    mapa : L_LLAVE secuencia_mapa R_LLAVEif : IF sentencia_booleana\n          | IF sentencia_booleana recur\n          | LPAREN IF instrucciones body RPAREN\n    do : LPAREN DO instrucciones RPARENif_do : LPAREN if do RPARENwhen : LPAREN WHEN sentencia_booleana body RPARENciclo : LCOR VARIABLE ENTERO RCORdotimes : LPAREN DOTIMES ciclo body RPARENoperacionesLogicas : LPAREN if recur VARIABLE RPAREN RPARENoperacion_aritmetica : LPAREN operador_aritmetico dato dato RPARENdoseq_args : LCOR dato LPAREN RANGE dato RPAREN RCOR\n                    | LCOR dato conjuntos RCOR\n                    | LCOR dato vector dato vector RCOR\n                    | LCOR vector conjuntos RCOR\n                    | LCOR dato vector RCOR\n    pnr_dato : dato\n            | dato pnr_dato\n    doseq_prn : PRN LPAREN dato RPAREN\n                | PRN pnr_dato\n                | PRN operacion_aritmetica\n    doseq : LPAREN DOSEQ doseq_args impresion RPAREN\n            | LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN\n    defn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n             | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n    defn_with_return : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return\n\n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGdefn_return : LPAREN dato dato RPARENexpresionCase : dato STRINGconjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP argumments LPAREN if dato RPAREN RPARENexpresionConjuntoEnteros : ENTERO\n                                 | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                                  | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36,37,38,44,45,46,47,50,56,69,71,72,76,78,84,85,86,91,92,94,95,97,98,99,105,108,117,119,123,126,128,129,134,135,136,137,138,140,143,148,150,151,152,158,159,160,161,166,168,169,171,174,175,176,177,180,181,184,185,190,191,194,195,199,200,201,202,203,205,212,214,215,216,217,218,221,223,228,234,237,238,239,240,241,244,245,249,250,251,255,260,],[28,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,39,-32,77,-27,-29,-30,-31,-28,84,28,88,77,77,107,-29,-30,-31,120,28,39,28,120,28,-63,28,140,77,144,145,28,-78,-81,-83,-75,-64,-85,-86,174,-68,-66,28,-27,39,-49,186,144,144,-60,-88,-111,-112,-113,-46,-91,-84,-87,39,-71,28,-69,-61,-50,207,-102,-52,-53,-48,-89,-90,222,223,28,-70,144,-93,-96,-95,-54,-55,-56,-47,39,-103,-65,120,248,-72,-114,-51,-94,-57,-107,-92,248,-106,-109,]),'NUMERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,44,45,69,71,72,76,78,85,86,91,92,94,105,108,117,119,123,128,129,137,148,149,152,158,159,160,161,166,168,169,171,175,176,180,181,185,194,195,199,202,218,221,228,234,238,239,240,241,245,249,251,255,260,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,31,31,-29,-30,-31,-82,31,31,-20,31,-63,31,31,-78,-81,-83,-75,-85,-86,31,31,31,-60,-88,-111,-112,-113,-46,-91,-84,-87,-71,31,-61,-50,-102,-48,-89,-90,31,-56,-47,-103,-65,-105,-72,-114,-51,-57,-107,-104,-106,-109,]),'LCOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,41,44,45,49,51,55,69,71,72,76,78,85,86,91,92,93,94,100,105,108,117,119,123,128,129,136,137,138,148,152,158,159,160,161,166,168,169,171,175,176,180,181,185,194,195,199,202,213,218,221,228,234,238,239,240,241,245,249,251,255,260,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,80,30,30,96,100,106,-29,-30,-31,-82,30,30,-20,30,132,133,139,147,30,-78,-81,-83,-75,-85,-86,96,30,-62,147,-60,-88,-111,-112,-113,-46,-91,-84,-87,-71,30,-61,-50,-102,-48,-89,-90,30,147,-56,-47,-103,-65,-105,-72,-114,-51,-57,-107,-104,-106,-109,]),'L_LLAVE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,34,35,36,37,38,44,45,76,78,85,86,91,92,94,105,108,117,119,123,128,129,137,152,158,159,160,161,166,168,169,171,175,176,180,181,185,194,195,199,202,218,221,228,234,238,239,240,241,245,249,251,255,260,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,73,-27,-29,-30,-31,-28,32,32,-82,32,32,-20,32,-63,32,32,-78,-81,-83,-75,-85,-86,32,-60,-88,-111,-112,-113,-46,-91,-84,-87,-71,32,-61,-50,-102,-48,-89,-90,32,-56,-47,-103,-65,-105,-72,-114,-51,-57,-107,-104,-106,-109,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,34,35,36,37,38,39,44,45,76,78,84,85,86,91,92,94,105,108,117,119,123,128,129,137,140,152,158,159,160,161,166,168,169,171,174,175,176,180,181,185,194,195,199,202,218,221,223,228,234,238,239,240,241,245,249,251,255,260,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,44,-32,-27,-29,-30,-31,-28,78,33,33,-82,33,44,33,-20,33,-63,33,33,-78,-81,-83,-75,-85,-86,33,33,-60,-88,-111,-112,-113,-46,-91,-84,-87,33,-71,33,-61,-50,-102,-48,-89,-90,33,-56,-47,33,-103,-65,-105,-72,-114,-51,-57,-107,-104,-106,-109,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,44,45,52,53,54,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,76,78,79,82,83,85,86,91,92,94,96,100,101,103,104,105,108,114,117,118,119,122,123,128,129,137,139,147,152,156,157,158,159,160,161,166,168,169,171,175,176,178,179,180,181,184,185,188,190,191,194,195,199,202,207,208,211,218,221,228,234,238,239,240,241,245,247,248,249,251,254,255,260,],[35,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,69,-27,-29,-30,-31,-28,69,69,35,35,69,69,69,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,109,-29,69,-30,-31,114,-82,35,69,69,69,35,-20,35,-63,35,69,69,69,69,69,35,-78,114,-81,69,-83,69,-75,-85,-86,35,69,69,-60,109,69,-88,-111,-112,-113,-46,-91,-84,-87,-71,35,69,69,-61,-50,69,-102,69,69,69,-48,-89,-90,35,69,69,69,-56,-47,-103,-65,-105,-72,-114,-51,-57,69,69,-107,-104,69,-106,-109,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,44,45,52,53,54,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,76,78,79,82,83,85,86,91,92,94,96,100,101,103,104,105,108,115,117,118,119,122,123,128,129,137,139,147,152,157,158,159,160,161,166,168,169,171,175,176,178,179,180,181,184,185,188,190,191,194,195,199,202,207,208,211,218,221,228,234,238,239,240,241,245,247,248,249,251,254,255,260,],[36,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,71,-27,-29,-30,-31,-28,71,71,36,36,71,71,71,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,71,-30,-31,115,-82,36,71,71,71,36,-20,36,-63,36,71,71,71,71,71,36,-78,115,-81,71,-83,71,-75,-85,-86,36,71,71,-60,71,-88,-111,-112,-113,-46,-91,-84,-87,-71,36,71,71,-61,-50,71,-102,71,71,71,-48,-89,-90,36,71,71,71,-56,-47,-103,-65,-105,-72,-114,-51,-57,71,71,-107,-104,71,-106,-109,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,44,45,52,53,54,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,76,78,79,82,83,85,86,91,92,94,96,100,101,103,104,105,108,117,118,119,122,123,128,129,137,139,147,152,157,158,159,160,161,166,168,169,171,175,176,178,179,180,181,184,185,188,190,191,194,195,199,202,207,208,211,218,221,228,234,238,239,240,241,245,247,248,249,251,254,255,260,],[37,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,72,-27,-29,-30,-31,-28,72,72,37,37,72,72,72,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,72,-30,-31,-82,37,72,72,72,37,-20,37,-63,37,72,72,72,72,72,37,-78,-81,72,-83,72,-75,-85,-86,37,72,72,-60,72,-88,-111,-112,-113,-46,-91,-84,-87,-71,37,72,72,-61,-50,72,-102,72,72,72,-48,-89,-90,37,72,72,72,-56,-47,-103,-65,-105,-72,-114,-51,-57,72,72,-107,-104,72,-106,-109,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,44,45,52,53,54,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,76,78,79,82,83,85,86,91,92,94,96,100,101,103,104,105,108,116,117,118,119,122,123,128,129,137,139,147,150,152,157,158,159,160,161,166,168,169,171,175,176,178,179,180,181,184,185,188,190,191,194,195,199,202,207,208,211,218,219,221,228,234,238,239,240,241,245,247,248,249,251,253,254,255,259,260,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,34,-27,-29,-30,-31,-28,34,34,34,34,34,34,34,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,34,-30,-31,116,-82,34,34,34,34,34,-20,34,-63,138,34,34,34,34,34,34,-78,116,-81,34,-83,34,-75,-85,-86,34,34,34,191,-60,34,-88,-111,-112,-113,-46,-91,-84,-87,-71,34,34,34,-61,-50,34,-102,34,34,34,-48,-89,-90,34,34,34,34,-56,233,-47,-103,-65,-105,-72,-114,-51,-57,34,34,-107,-104,257,34,-106,261,-109,]),'CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,44,45,52,53,54,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,76,78,79,82,83,85,86,91,92,94,96,100,101,103,104,105,108,117,118,119,122,123,128,129,137,139,147,152,157,158,159,160,161,166,168,169,171,175,176,178,179,180,181,184,185,188,190,191,194,195,199,202,207,208,211,218,221,228,234,238,239,240,241,245,247,248,249,251,254,255,260,],[38,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,38,-27,-29,-30,-31,-28,38,38,38,38,38,38,38,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,38,-30,-31,-82,38,38,38,38,38,-20,38,-63,38,38,38,38,38,38,38,-78,-81,38,-83,38,-75,-85,-86,38,38,38,-60,38,-88,-111,-112,-113,-46,-91,-84,-87,-71,38,38,38,-61,-50,38,-102,38,38,38,-48,-89,-90,38,38,38,38,-56,-47,-103,-65,-105,-72,-114,-51,-57,38,38,-107,-104,38,-106,-109,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,40,42,43,44,45,48,52,53,54,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,75,76,78,79,80,82,83,85,86,90,91,92,94,96,100,101,103,104,105,106,108,117,118,119,122,123,128,129,132,133,137,139,147,152,157,158,159,160,161,166,168,169,171,175,176,178,179,180,181,184,185,188,190,191,194,195,199,202,207,208,211,218,221,228,234,236,238,239,240,241,245,247,248,249,251,254,255,260,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,68,-27,-29,-30,-31,-28,79,29,29,29,29,92,29,29,29,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,29,-30,-31,118,-82,29,29,122,29,29,29,-20,130,29,-63,29,29,29,29,29,29,29,156,-78,-81,29,-83,29,-75,-85,-86,172,173,29,68,29,-60,29,-88,-111,-112,-113,-46,-91,-84,-87,-71,29,29,29,-61,-50,29,-102,29,29,29,-48,-89,-90,29,29,29,29,-56,-47,-103,-65,247,-105,-72,-114,-51,-57,29,29,-107,-104,29,-106,-109,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,76,108,117,119,123,128,129,152,158,159,160,161,166,168,169,171,175,181,185,194,195,199,218,221,228,234,238,239,240,241,245,249,251,255,260,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,-82,-78,-81,-83,-75,-85,-86,-60,-88,-111,-112,-113,-46,-91,-84,-87,-71,-50,-102,-48,-89,-90,-56,-47,-103,-65,-105,-72,-114,-51,-57,-107,-104,-106,-109,]),'RPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,69,71,72,76,81,82,87,89,102,103,108,117,119,121,123,124,125,126,127,128,129,130,131,134,135,136,137,138,142,143,146,152,153,154,155,158,159,160,161,166,168,169,170,171,175,177,180,181,183,185,192,194,195,196,198,199,203,204,206,208,209,210,218,220,221,224,225,226,227,228,229,230,231,233,234,235,238,239,240,241,242,245,246,249,251,255,258,260,261,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,-29,-30,-31,-82,123,-73,128,129,152,-58,-78,-81,-83,166,-75,-74,168,-64,169,-85,-86,170,171,175,-68,-66,-67,-27,181,-49,185,-60,-59,194,195,-88,-111,-112,-113,-46,-91,-84,199,-87,-71,-69,-61,-50,206,-102,218,-48,-89,220,221,-90,-70,226,228,-97,-100,-101,-56,234,-47,238,239,240,241,-103,242,-98,243,245,-65,246,-105,-72,-114,-51,-99,-57,251,-107,-104,-106,260,-109,-108,]),'DEFICION':([28,84,],[40,40,]),'LET':([28,84,],[41,41,]),'IMPRIMIR':([28,84,144,145,],[42,42,42,42,]),'DO':([28,84,88,],[45,45,45,]),'WHEN':([28,84,],[47,47,]),'DEFFUNCION':([28,84,],[48,48,]),'LOOP':([28,84,],[49,49,]),'COND':([28,84,],[50,50,]),'DOSEQ':([28,84,],[51,51,]),'CASE':([28,84,222,],[52,52,236,]),'LIST':([28,84,],[53,53,]),'DOTIMES':([28,84,],[55,55,]),'RECUR':([28,84,88,120,],[56,56,56,56,]),'MAS':([28,84,207,],[57,57,57,]),'MENOS':([28,84,207,],[58,58,58,]),'PRODUCTO':([28,84,207,],[59,59,59,]),'DIVISION':([28,84,207,],[60,60,60,]),'COMPARA_IGUAL':([28,77,84,],[61,61,61,]),'MENORQUE':([28,77,84,],[62,62,62,]),'MAYORQUE':([28,77,84,],[63,63,63,]),'MAYORIGUALQUE':([28,77,84,],[64,64,64,]),'MENORIGUALQUE':([28,77,84,],[65,65,65,]),'DIFERENTE':([28,77,84,],[66,66,66,]),'RCOR':([29,34,38,67,68,69,70,71,72,103,108,109,110,141,153,159,160,161,167,172,173,178,187,188,189,232,243,],[-32,-27,-28,108,-32,-29,-76,-30,-31,-58,-78,158,-77,180,-59,-111,-112,-113,198,200,201,-58,212,214,215,244,250,]),'DOSPUNTOS':([29,32,34,38,69,71,72,123,142,143,151,165,190,191,216,217,252,257,],[-32,75,-27,-28,-29,-30,-31,-75,182,-49,193,75,-52,-53,-54,-55,256,-110,]),'R_LLAVE':([29,34,38,69,71,72,74,111,112,113,114,115,116,162,163,164,165,197,],[-32,-27,-28,-29,-30,-31,117,159,160,161,-115,-117,-119,-116,-118,-120,-79,-80,]),'INCREASE':([48,],[93,]),'INC':([107,],[157,]),'PRN':([145,],[184,]),'ELSE':([182,193,256,],[205,219,259,]),'RANGE':([186,],[211,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,44,45,78,85,91,94,105,137,176,202,],[1,85,87,85,126,126,126,126,126,126,126,]),'asignacion':([0,44,45,78,85,91,94,105,137,176,202,],[2,2,2,2,2,2,2,2,2,2,2,]),'impresion':([0,44,45,78,85,91,94,98,99,105,137,150,151,176,202,205,],[3,3,3,3,3,3,3,143,146,3,3,190,192,3,3,227,]),'operacion_aritmetica':([0,44,45,78,85,91,94,105,137,176,184,202,],[4,4,4,4,4,4,4,4,4,4,210,4,]),'conjuntos':([0,44,45,78,85,91,94,105,137,148,149,176,202,],[5,5,5,5,5,5,5,5,5,187,189,5,5,]),'vector':([0,44,45,78,85,91,94,100,105,137,148,176,202,213,],[6,6,6,6,6,6,6,149,6,6,188,6,6,232,]),'mapa':([0,44,45,78,85,91,94,105,137,176,202,],[7,7,7,7,7,7,7,7,7,7,7,]),'if':([0,28,44,45,78,84,85,91,94,105,137,140,174,176,202,223,],[8,46,8,8,8,46,8,8,8,8,8,179,202,8,8,237,]),'do':([0,44,45,46,78,85,91,94,105,137,176,202,],[9,9,9,89,9,9,9,9,9,9,9,9,]),'if_do':([0,44,45,78,85,91,94,105,137,176,202,],[10,10,10,10,10,10,10,10,10,10,10,]),'when':([0,44,45,78,85,91,94,105,137,176,202,],[11,11,11,11,11,11,11,11,11,11,11,]),'defn':([0,44,45,78,85,91,94,105,137,176,202,],[12,12,12,12,12,12,12,12,12,12,12,]),'defn_with_return':([0,44,45,78,85,91,94,105,137,176,202,],[13,13,13,13,13,13,13,13,13,13,13,]),'operacionesLogicas':([0,44,45,78,85,91,94,105,137,176,201,202,],[14,14,14,14,14,14,14,14,14,14,224,14,]),'sentenciaLoopRecur':([0,44,45,78,85,91,94,105,137,176,202,],[15,15,15,15,15,15,15,15,15,15,15,]),'cond_':([0,44,45,78,85,91,94,105,137,176,202,],[16,16,16,16,16,16,16,16,16,16,16,]),'cond_else':([0,44,45,78,85,91,94,105,137,176,202,],[17,17,17,17,17,17,17,17,17,17,17,]),'doseq':([0,44,45,78,85,91,94,105,137,176,202,],[18,18,18,18,18,18,18,18,18,18,18,]),'case_expression':([0,44,45,78,85,91,94,105,137,176,202,],[19,19,19,19,19,19,19,19,19,19,19,]),'lista':([0,44,45,78,85,91,94,105,137,176,202,],[20,20,20,20,20,20,20,20,20,20,20,]),'sentencia_booleana':([0,33,44,45,47,50,78,85,91,94,97,105,137,176,202,],[21,76,86,21,91,98,21,21,21,21,98,21,21,21,21,]),'function':([0,44,45,78,85,91,94,105,137,176,202,],[22,22,22,22,22,22,22,22,22,22,22,]),'dotimes':([0,44,45,78,85,91,94,105,137,176,202,],[23,23,23,23,23,23,23,23,23,23,23,]),'ciclo':([0,44,45,55,78,85,91,94,105,137,176,202,],[24,24,24,105,24,24,24,24,24,24,24,24,]),'valor':([0,44,45,78,85,91,94,105,137,176,202,],[25,25,25,25,25,25,25,25,25,25,25,]),'recur':([0,44,45,46,76,78,85,86,91,94,105,137,176,202,237,],[26,26,26,90,119,26,26,119,26,26,26,26,26,26,90,]),'dato':([0,30,42,43,44,45,52,53,54,70,78,79,82,83,85,91,94,96,100,101,103,104,105,118,122,137,139,147,157,176,178,179,184,188,190,191,202,207,208,211,247,248,254,],[27,70,82,83,27,27,101,103,104,70,27,121,82,125,27,27,27,103,148,150,103,154,27,165,167,27,178,70,196,27,178,204,208,213,150,150,27,229,208,231,253,254,258,]),'operador_aritmetico':([28,84,207,],[43,43,43,]),'operador_comparadores':([28,77,84,],[54,54,54,]),'secuencia_v':([30,70,139,147,178,],[67,110,67,67,110,]),'secuencia_mapa':([32,165,],[74,197,]),'info_imprimir':([42,82,],[81,124,]),'nombre_funct':([48,],[94,]),'argumments':([49,94,136,],[95,137,176,]),'linecondition':([50,97,],[97,142,]),'doseq_args':([51,],[99,]),'argumentos_lista':([53,96,103,139,178,],[102,141,153,141,153,]),'expresionConjuntoEnteros':([73,114,],[111,162,]),'expresionConjuntoDouble':([73,115,],[112,163,]),'expresionConjuntoString':([73,116,],[113,164,]),'body':([85,91,94,105,137,176,202,],[127,131,135,155,177,203,225,]),'internos':([94,],[134,]),'description':([94,],[136,]),'case':([101,190,191,],[151,216,217,]),'doseq_prn':([145,],[183,]),'pnr_dato':([184,208,],[209,230,]),'expresionDefnElse':([222,],[235,]),'defn_return':([238,251,],[249,255,]),'expresionCase':([247,],[252,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> operacion_aritmetica','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> vector','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> mapa','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> if','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> do','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> if_do','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> when','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> defn_with_return','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',22),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',23),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',24),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',25),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',26),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',27),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',28),
  ('instrucciones -> function','instrucciones',1,'p_instrucciones','clojure_sin.py',29),
  ('instrucciones -> dotimes','instrucciones',1,'p_instrucciones','clojure_sin.py',30),
  ('instrucciones -> ciclo','instrucciones',1,'p_instrucciones','clojure_sin.py',31),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','clojure_sin.py',32),
  ('instrucciones -> recur','instrucciones',1,'p_instrucciones','clojure_sin.py',33),
  ('instrucciones -> dato','instrucciones',1,'p_instrucciones','clojure_sin.py',34),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',40),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',41),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',42),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',43),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',44),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',45),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',50),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',51),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',52),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',58),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',59),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',60),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',61),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',62),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',63),
  ('operador_aritmetico -> MAS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',68),
  ('operador_aritmetico -> MENOS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',69),
  ('operador_aritmetico -> PRODUCTO','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',70),
  ('operador_aritmetico -> DIVISION','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',71),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',76),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',77),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',87),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',93),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',100),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',106),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',119),
  ('case -> dato STRING','case',2,'p_case','clojure_sin.py',120),
  ('case -> dato impresion case','case',3,'p_case','clojure_sin.py',121),
  ('case -> dato STRING case','case',3,'p_case','clojure_sin.py',122),
  ('case_expression -> LPAREN CASE dato case impresion RPAREN','case_expression',6,'p_case_expression','clojure_sin.py',132),
  ('case_expression -> LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN','case_expression',8,'p_case_expression','clojure_sin.py',133),
  ('argumentos_lista -> dato','argumentos_lista',1,'p_argumentos_lista','clojure_sin.py',143),
  ('argumentos_lista -> dato argumentos_lista','argumentos_lista',2,'p_argumentos_lista','clojure_sin.py',144),
  ('lista -> LPAREN LIST argumentos_lista RPAREN','lista',4,'p_lista','clojure_sin.py',153),
  ('argumments -> LCOR argumentos_lista RCOR','argumments',3,'p_argumments','clojure_sin.py',158),
  ('description -> STRING','description',1,'p_description','clojure_sin.py',162),
  ('nombre_funct -> VARIABLE','nombre_funct',1,'p_nombre_funct','clojure_sin.py',166),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',170),
  ('recur -> LPAREN RECUR LPAREN INC dato RPAREN RPAREN','recur',7,'p_recur','clojure_sin.py',175),
  ('internos -> description','internos',1,'p_internos','clojure_sin.py',180),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',181),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',182),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',183),
  ('internos -> description argumments body','internos',3,'p_internos','clojure_sin.py',184),
  ('function -> LPAREN DEFFUNCION nombre_funct internos RPAREN','function',5,'p_function','clojure_sin.py',204),
  ('function -> LPAREN DEFFUNCION nombre_funct internos LPAREN if body RPAREN','function',8,'p_function','clojure_sin.py',205),
  ('info_imprimir -> dato','info_imprimir',1,'p_datos_impresion','clojure_sin.py',213),
  ('info_imprimir -> dato info_imprimir','info_imprimir',2,'p_datos_impresion','clojure_sin.py',214),
  ('impresion -> LPAREN IMPRIMIR info_imprimir RPAREN','impresion',4,'p_impresion','clojure_sin.py',222),
  ('secuencia_v -> dato','secuencia_v',1,'p_secuencia_vector','clojure_sin.py',230),
  ('secuencia_v -> dato secuencia_v','secuencia_v',2,'p_secuencia_vector','clojure_sin.py',231),
  ('vector -> LCOR secuencia_v RCOR','vector',3,'p_vector','clojure_sin.py',240),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato','secuencia_mapa',3,'p_secuencia_mapa','clojure_sin.py',248),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato secuencia_mapa','secuencia_mapa',4,'p_secuencia_mapa','clojure_sin.py',249),
  ('mapa -> L_LLAVE secuencia_mapa R_LLAVE','mapa',3,'p_mapa','clojure_sin.py',255),
  ('if -> IF sentencia_booleana','if',2,'p_if','clojure_sin.py',260),
  ('if -> IF sentencia_booleana recur','if',3,'p_if','clojure_sin.py',261),
  ('if -> LPAREN IF instrucciones body RPAREN','if',5,'p_if','clojure_sin.py',262),
  ('do -> LPAREN DO instrucciones RPAREN','do',4,'p_do','clojure_sin.py',274),
  ('if_do -> LPAREN if do RPAREN','if_do',4,'p_if_do','clojure_sin.py',279),
  ('when -> LPAREN WHEN sentencia_booleana body RPAREN','when',5,'p_when','clojure_sin.py',284),
  ('ciclo -> LCOR VARIABLE ENTERO RCOR','ciclo',4,'p_ciclo','clojure_sin.py',289),
  ('dotimes -> LPAREN DOTIMES ciclo body RPAREN','dotimes',5,'p_dotimes','clojure_sin.py',294),
  ('operacionesLogicas -> LPAREN if recur VARIABLE RPAREN RPAREN','operacionesLogicas',6,'p_operacionesLogicas','clojure_sin.py',299),
  ('operacion_aritmetica -> LPAREN operador_aritmetico dato dato RPAREN','operacion_aritmetica',5,'p_operacion_aritmetica1','clojure_sin.py',304),
  ('doseq_args -> LCOR dato LPAREN RANGE dato RPAREN RCOR','doseq_args',7,'p_doseq_args','clojure_sin.py',310),
  ('doseq_args -> LCOR dato conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',311),
  ('doseq_args -> LCOR dato vector dato vector RCOR','doseq_args',6,'p_doseq_args','clojure_sin.py',312),
  ('doseq_args -> LCOR vector conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',313),
  ('doseq_args -> LCOR dato vector RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',314),
  ('pnr_dato -> dato','pnr_dato',1,'p_pnr_dato','clojure_sin.py',325),
  ('pnr_dato -> dato pnr_dato','pnr_dato',2,'p_pnr_dato','clojure_sin.py',326),
  ('doseq_prn -> PRN LPAREN dato RPAREN','doseq_prn',4,'p_doseq_prn','clojure_sin.py',335),
  ('doseq_prn -> PRN pnr_dato','doseq_prn',2,'p_doseq_prn','clojure_sin.py',336),
  ('doseq_prn -> PRN operacion_aritmetica','doseq_prn',2,'p_doseq_prn','clojure_sin.py',337),
  ('doseq -> LPAREN DOSEQ doseq_args impresion RPAREN','doseq',5,'p_doseq','clojure_sin.py',351),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',352),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',361),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',362),
  ('defn_with_return -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return','defn_with_return',11,'p_defn_with_return','clojure_sin.py',371),
  ('defn_with_return -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return','defn_with_return',9,'p_defn_with_return','clojure_sin.py',372),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',382),
  ('defn_return -> LPAREN dato dato RPAREN','defn_return',4,'p_defn_return','clojure_sin.py',387),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',392),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',398),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',399),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',400),
  ('sentenciaLoopRecur -> LPAREN LOOP argumments LPAREN if dato RPAREN RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',407),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',413),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',414),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',424),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',425),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',434),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',435),
]
