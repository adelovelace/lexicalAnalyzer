
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LISTA LOOP LPAREN L_LLAVE MAPAS MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTORES WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica1\n                    | condicional\n                    | vectores\n                    | conjuntos\n                    | defn\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | doseq\n                    | cond_\n                    | sentencia_booleana\n                    | operador_comparadoresdato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEasignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresion\n                    | sentencia_booleana datocond_ : LPAREN COND linecondition RPARENimpresion : LPAREN IMPRIMIR dato RPARENvalor : VARIABLEoperacion : MAS\n          | MENOS\n          | PRODUCTO\n          | DIVISION operacionesLogicas : LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPARENoperacion_aritmetica1 : LPAREN operacion valor valor RPARENcondicional : LPAREN operacion valor valor RPARENvectores : VECTORESdoseq : LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPARENdefn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n      \n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGexpresionCase : dato STRING conjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP LCOR VARIABLE ENTERO RCOR  operacionesLogicas RPARENexpresionConjuntoEnteros : ENTERO\n                     | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                     | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,29,32,60,76,96,98,99,101,107,118,119,124,127,],[15,55,58,80,95,-31,104,105,105,113,123,124,80,130,]),'VECTORES':([0,],[16,]),'NUMERAL':([0,],[17,]),'COMPARA_IGUAL':([0,15,58,],[19,19,19,]),'MENORQUE':([0,15,55,58,],[18,18,74,18,]),'MAYORQUE':([0,15,58,],[20,20,20,]),'MAYORIGUALQUE':([0,15,58,],[21,21,21,]),'MENORIGUALQUE':([0,15,58,],[22,22,22,]),'DIFERENTE':([0,15,58,],[23,23,23,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,18,19,20,21,22,23,70,77,82,83,84,88,90,96,103,112,114,120,134,139,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-44,-24,-23,-25,-26,-27,-28,-35,-34,-50,-51,-52,-29,-42,-31,-30,-47,-53,-46,-45,-41,]),'DEFICION':([15,],[24,]),'LET':([15,],[25,]),'IMPRIMIR':([15,80,],[26,26,]),'DEFFUNCION':([15,],[28,]),'IF':([15,105,],[29,29,]),'LOOP':([15,],[30,]),'DOSEQ':([15,],[31,]),'COND':([15,],[32,]),'MAS':([15,],[34,]),'MENOS':([15,],[35,]),'PRODUCTO':([15,],[36,]),'DIVISION':([15,],[37,]),'L_LLAVE':([17,],[38,]),'STRING':([18,19,20,21,22,23,26,33,38,39,42,43,44,45,46,47,60,61,67,69,96,117,122,129,],[-24,-23,-25,-26,-27,-28,42,42,67,42,-14,-15,-16,-17,-18,-19,42,42,67,42,-31,42,126,132,]),'CHAR':([18,19,20,21,22,23,26,33,39,42,43,44,45,46,47,60,61,69,96,117,],[-24,-23,-25,-26,-27,-28,43,43,43,-14,-15,-16,-17,-18,-19,43,43,43,-31,43,]),'ENTERO':([18,19,20,21,22,23,26,27,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,60,61,65,69,75,93,96,117,],[-24,-23,-25,-26,-27,-28,44,49,44,-37,-38,-39,-40,65,44,-14,-15,-16,-17,-18,-19,49,-20,-21,-22,-36,44,44,65,44,94,100,-31,44,]),'FLOTANTE':([18,19,20,21,22,23,26,27,33,34,35,36,37,38,39,42,43,44,45,46,47,48,49,50,51,52,60,61,66,69,96,117,],[-24,-23,-25,-26,-27,-28,45,50,45,-37,-38,-39,-40,66,45,-14,-15,-16,-17,-18,-19,50,-20,-21,-22,-36,45,45,66,45,-31,45,]),'BOOLEAN':([18,19,20,21,22,23,26,27,33,34,35,36,37,39,42,43,44,45,46,47,48,49,50,51,52,60,61,69,96,117,],[-24,-23,-25,-26,-27,-28,46,51,46,-37,-38,-39,-40,46,-14,-15,-16,-17,-18,-19,51,-20,-21,-22,-36,46,46,46,-31,46,]),'VARIABLE':([18,19,20,21,22,23,24,26,27,28,33,34,35,36,37,39,40,42,43,44,45,46,47,48,49,50,51,52,56,57,60,61,69,72,73,74,96,102,111,117,130,136,],[-24,-23,-25,-26,-27,-28,39,47,52,53,47,-37,-38,-39,-40,47,69,-14,-15,-16,-17,-18,-19,52,-20,-21,-22,-36,75,76,47,47,47,91,92,93,-31,109,117,47,133,137,]),'LCOR':([25,30,31,53,54,],[40,56,57,72,73,]),'INCREASE':([28,],[54,]),'RPAREN':([41,42,43,44,45,46,47,49,50,51,52,59,68,70,71,78,79,81,97,100,106,108,109,110,116,128,131,132,133,135,137,138,139,],[70,-14,-15,-16,-17,-18,-19,-20,-21,-22,-36,77,88,-35,90,-32,-33,96,103,107,112,114,115,116,120,131,134,-48,135,136,138,139,-41,]),'RCOR':([42,43,44,45,46,47,89,91,92,94,115,],[-14,-15,-16,-17,-18,-19,97,98,99,101,119,]),'R_LLAVE':([62,63,64,65,66,67,85,86,87,],[82,83,84,-54,-56,-58,-55,-57,-59,]),'RANGE':([95,],[102,]),'CASE':([104,],[111,]),'RECUR':([113,],[118,]),'DOSPUNTOS':([121,126,],[125,-49,]),'INC':([123,],[127,]),'ELSE':([125,],[129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,],[1,]),'asignacion':([0,],[2,]),'impresion':([0,60,124,],[3,78,128,]),'operacion_aritmetica1':([0,],[4,]),'condicional':([0,],[5,]),'vectores':([0,],[6,]),'conjuntos':([0,],[7,]),'defn':([0,],[8,]),'operacionesLogicas':([0,99,101,],[9,106,108,]),'sentenciaLoopRecur':([0,],[10,]),'doseq':([0,],[11,]),'cond_':([0,],[12,]),'sentencia_booleana':([0,32,],[13,60,]),'operador_comparadores':([0,15,58,],[14,33,33,]),'operacion':([15,],[27,]),'dato':([26,33,39,60,61,69,117,],[41,61,68,79,81,89,122,]),'valor':([27,48,],[48,71,]),'linecondition':([32,],[59,]),'expresionConjuntoEnteros':([38,65,],[62,85,]),'expresionConjuntoDouble':([38,66,],[63,86,]),'expresionConjuntoString':([38,67,],[64,87,]),'expresionDefnElse':([104,],[110,]),'expresionCase':([117,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',5),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',6),
  ('instrucciones -> operacion_aritmetica1','instrucciones',1,'p_instrucciones','clojure_sin.py',7),
  ('instrucciones -> condicional','instrucciones',1,'p_instrucciones','clojure_sin.py',8),
  ('instrucciones -> vectores','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> operador_comparadores','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',20),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',21),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',22),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',23),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',24),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',25),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',28),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',29),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',30),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',34),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',35),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',36),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',37),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',38),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',39),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',42),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',43),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',46),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',49),
  ('linecondition -> sentencia_booleana dato','linecondition',2,'p_linecondition','clojure_sin.py',50),
  ('cond_ -> LPAREN COND linecondition RPAREN','cond_',4,'p_cond','clojure_sin.py',55),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',58),
  ('valor -> VARIABLE','valor',1,'p_valor_variable','clojure_sin.py',61),
  ('operacion -> MAS','operacion',1,'p_op_aritmetica1','clojure_sin.py',65),
  ('operacion -> MENOS','operacion',1,'p_op_aritmetica1','clojure_sin.py',66),
  ('operacion -> PRODUCTO','operacion',1,'p_op_aritmetica1','clojure_sin.py',67),
  ('operacion -> DIVISION','operacion',1,'p_op_aritmetica1','clojure_sin.py',68),
  ('operacionesLogicas -> LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPAREN','operacionesLogicas',18,'p_operacionesLogicas','clojure_sin.py',71),
  ('operacion_aritmetica1 -> LPAREN operacion valor valor RPAREN','operacion_aritmetica1',5,'p_operacion_aritmetica1','clojure_sin.py',74),
  ('condicional -> LPAREN operacion valor valor RPAREN','condicional',5,'p_booleanos','clojure_sin.py',77),
  ('vectores -> VECTORES','vectores',1,'p_vectores','clojure_sin.py',80),
  ('doseq -> LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPAREN','doseq',13,'p_doseq','clojure_sin.py',83),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',86),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',87),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',92),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',96),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',99),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',100),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',101),
  ('sentenciaLoopRecur -> LPAREN LOOP LCOR VARIABLE ENTERO RCOR operacionesLogicas RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',105),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',108),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',109),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',113),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',114),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',118),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',119),
]
