
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPA MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRN PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTOR WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica\n                    | conjuntos\n                    | vector\n                    | mapa\n                    | if\n                    | do\n                    | if_do\n                    | when\n                    | defn\n                    | defn_with_return\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | function\n                    | dotimes\n                    | ciclo\n                    | valor\n                    | recur\n                    dato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEoperador_aritmetico : MAS\n                  | MENOS\n                  | PRODUCTO\n                  | DIVISION asignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresion\n            | dato STRING\n            | dato impresion case\n            | dato STRING case\n    case_expression : LPAREN CASE dato case impresion RPAREN\n                        | LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN\n    argumentos_lista : dato\n                        | dato argumentos_listalista : LPAREN LIST argumentos_lista RPARENargumments : LCOR argumentos_lista RCORbody : instruccionesrecur : LPAREN RECUR LPAREN INC dato RPAREN RPARENinternos : STRING\n                | argumments\n                | body\n                | argumments body\n                | STRING argumments bodyfunction : LPAREN DEFFUNCION VARIABLE internos RPAREN\n                | LPAREN DEFFUNCION VARIABLE internos LPAREN if body RPAREN\n    impresion : LPAREN IMPRIMIR dato RPAREN secuencia_v : dato \n                    | dato secuencia_v\n    vector : LCOR secuencia_v RCOR secuencia_mapa : DOSPUNTOS VARIABLE dato \n        | DOSPUNTOS VARIABLE secuencia_mapa\n    mapa : L_LLAVE secuencia_mapa R_LLAVEif : IF sentencia_booleana\n          | IF sentencia_booleana recur\n          | LPAREN IF instrucciones body RPAREN\n    do : LPAREN DO instrucciones RPARENif_do : LPAREN if do RPARENwhen : LPAREN WHEN sentencia_booleana body RPARENciclo : LCOR VARIABLE ENTERO RCORdotimes : LPAREN DOTIMES ciclo body RPARENoperacionesLogicas : LPAREN if recur VARIABLE RPAREN RPARENoperacion_aritmetica : LPAREN operador_aritmetico dato dato RPARENdoseq_args : LCOR dato LPAREN RANGE dato RPAREN RCOR\n                    | LCOR dato conjuntos RCOR\n                    | LCOR dato vector dato vector RCOR\n                    | LCOR vector conjuntos RCORdoseq_prn : PRN LPAREN dato RPAREN\n                    | PRN dato dato\n                    | PRN dato dato dato\n                    | PRN operacion_aritmetica\n      doseq : LPAREN DOSEQ doseq_args impresion RPAREN\n            | LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN\n    defn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n             | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n    defn_with_return : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return\n\n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGdefn_return : LPAREN dato dato RPARENexpresionCase : dato STRINGconjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP argumments LPAREN if dato RPAREN RPARENexpresionConjuntoEnteros : ENTERO\n                                 | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                                  | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,31,32,33,34,40,41,42,43,46,52,65,67,68,69,70,74,76,80,82,83,84,89,90,92,94,95,96,102,105,114,116,120,122,124,125,129,130,131,132,134,137,142,144,145,146,152,153,154,155,161,163,164,166,169,170,171,172,175,176,179,180,185,186,189,190,193,194,195,196,197,199,205,207,208,209,210,213,216,220,226,229,230,231,232,233,237,238,242,243,244,248,253,],[27,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,35,75,-32,-33,-34,82,27,86,75,75,104,-28,-26,-27,-29,-30,117,27,-31,35,27,117,27,27,134,75,138,139,27,-73,-76,-78,-70,-61,-80,-81,169,-65,-63,27,35,-48,181,138,138,-59,-83,-104,-105,-106,-45,-86,-79,-82,35,-68,27,-66,-60,-49,201,-95,-51,-52,-47,-84,-85,214,27,-67,216,138,-88,-90,-53,-54,-55,-46,35,-96,-62,-69,117,241,-107,-50,-89,-56,-100,-87,241,-99,-102,]),'NUMERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,32,33,34,40,41,65,67,68,69,70,74,76,80,83,84,89,90,102,105,114,116,120,124,125,132,142,143,146,152,153,154,155,161,163,164,166,170,171,175,176,180,189,190,193,195,210,213,220,226,229,231,232,233,238,242,244,248,253,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-32,-33,-34,29,29,-28,-26,-27,-29,-30,-77,29,-31,29,-20,29,29,29,-73,-76,-78,-70,-80,-81,29,29,29,-59,-83,-104,-105,-106,-45,-86,-79,-82,-68,29,-60,-49,-95,-47,-84,-85,29,-55,-46,-96,-62,-69,-98,-107,-50,-56,-100,-97,-99,-102,]),'LCOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,32,33,34,37,40,41,45,47,51,65,67,68,69,70,74,76,80,83,84,89,90,91,97,102,105,114,116,120,124,125,131,132,142,146,152,153,154,155,161,163,164,166,170,171,175,176,180,189,190,193,195,206,210,213,220,226,229,231,232,233,238,242,244,248,253,],[28,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-32,-33,-34,78,28,28,93,97,103,-28,-26,-27,-29,-30,-77,28,-31,28,-20,28,128,133,141,28,-73,-76,-78,-70,-80,-81,93,28,141,-59,-83,-104,-105,-106,-45,-86,-79,-82,-68,28,-60,-49,-95,-47,-84,-85,28,141,-55,-46,-96,-62,-69,-98,-107,-50,-56,-100,-97,-99,-102,]),'L_LLAVE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,32,33,34,40,41,74,76,83,84,89,90,102,105,114,116,120,124,125,132,146,152,153,154,155,161,163,164,166,170,171,175,176,180,189,190,193,195,210,213,220,226,229,231,232,233,238,242,244,248,253,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,71,-32,-33,-34,30,30,-77,30,30,-20,30,30,30,-73,-76,-78,-70,-80,-81,30,-59,-83,-104,-105,-106,-45,-86,-79,-82,-68,30,-60,-49,-95,-47,-84,-85,30,-55,-46,-96,-62,-69,-98,-107,-50,-56,-100,-97,-99,-102,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,32,33,34,35,40,41,74,76,82,83,84,89,90,102,105,114,116,120,124,125,132,134,146,152,153,154,155,161,163,164,166,169,170,171,175,176,180,189,190,193,195,210,213,216,220,226,229,231,232,233,238,242,244,248,253,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,40,-32,-33,-34,76,31,31,-77,31,40,31,-20,31,31,31,-73,-76,-78,-70,-80,-81,31,31,-59,-83,-104,-105,-106,-45,-86,-79,-82,31,-68,31,-60,-49,-95,-47,-84,-85,31,-55,-46,31,-96,-62,-69,-98,-107,-50,-56,-100,-97,-99,-102,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,32,33,34,38,39,40,41,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,74,76,77,80,81,83,84,89,90,93,97,98,100,101,102,105,111,114,115,116,119,120,124,125,128,132,141,146,150,151,152,153,154,155,161,163,164,166,167,168,170,171,174,175,176,179,180,183,185,186,189,190,193,195,201,202,204,210,213,220,222,226,229,231,232,233,238,240,241,242,244,247,248,253,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,65,-32,-33,-34,65,65,32,32,65,65,65,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,106,-28,65,-26,-27,-29,-30,111,-77,32,65,-31,65,32,-20,32,32,65,65,65,65,65,32,-73,111,-76,65,-78,65,-70,-80,-81,65,32,65,-59,106,65,-83,-104,-105,-106,-45,-86,-79,-82,106,65,-68,32,65,-60,-49,65,-95,65,65,65,-47,-84,-85,32,65,65,65,-55,-46,-96,65,-62,-69,-98,-107,-50,-56,65,65,-100,-97,65,-99,-102,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,32,33,34,38,39,40,41,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,74,76,77,80,81,83,84,89,90,93,97,98,100,101,102,105,112,114,115,116,119,120,124,125,128,132,141,146,151,152,153,154,155,161,163,164,166,167,168,170,171,174,175,176,179,180,183,185,186,189,190,193,195,201,202,204,210,213,220,222,226,229,231,232,233,238,240,241,242,244,247,248,253,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,69,-32,-33,-34,69,69,33,33,69,69,69,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,69,-26,-27,-29,-30,112,-77,33,69,-31,69,33,-20,33,33,69,69,69,69,69,33,-73,112,-76,69,-78,69,-70,-80,-81,69,33,69,-59,69,-83,-104,-105,-106,-45,-86,-79,-82,-31,69,-68,33,69,-60,-49,69,-95,69,69,69,-47,-84,-85,33,69,69,69,-55,-46,-96,69,-62,-69,-98,-107,-50,-56,69,69,-100,-97,69,-99,-102,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,32,33,34,38,39,40,41,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,74,76,77,80,81,83,84,89,90,93,97,98,100,101,102,105,114,115,116,119,120,124,125,128,132,141,146,151,152,153,154,155,161,163,164,166,167,168,170,171,174,175,176,179,180,183,185,186,189,190,193,195,201,202,204,210,213,220,222,226,229,231,232,233,238,240,241,242,244,247,248,253,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,70,-32,-33,-34,70,70,34,34,70,70,70,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,70,-26,-27,-29,-30,-77,34,70,-31,70,34,-20,34,34,70,70,70,70,70,34,-73,-76,70,-78,70,-70,-80,-81,70,34,70,-59,70,-83,-104,-105,-106,-45,-86,-79,-82,-31,70,-68,34,70,-60,-49,70,-95,70,70,70,-47,-84,-85,34,70,70,70,-55,-46,-96,70,-62,-69,-98,-107,-50,-56,70,70,-100,-97,70,-99,-102,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,32,33,34,74,105,114,116,120,124,125,146,152,153,154,155,161,163,164,166,170,176,180,189,190,193,210,213,220,226,229,231,232,233,238,242,244,248,253,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-32,-33,-34,-77,-73,-76,-78,-70,-80,-81,-59,-83,-104,-105,-106,-45,-86,-79,-82,-68,-49,-95,-47,-84,-85,-55,-46,-96,-62,-69,-98,-107,-50,-56,-100,-97,-99,-102,]),'RPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,32,33,34,65,67,68,69,70,74,79,80,85,87,99,100,105,114,116,118,120,121,122,123,124,125,126,127,129,130,131,132,136,137,140,146,147,148,149,152,153,154,155,161,163,164,165,166,170,172,175,176,178,180,187,189,190,191,192,193,196,198,200,203,210,212,213,215,217,218,219,220,221,222,223,225,226,227,229,231,232,233,234,235,238,239,242,244,248,251,253,254,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-32,-33,-34,-28,-26,-27,-29,-30,-77,120,-31,124,125,146,-57,-73,-76,-78,161,-70,163,-61,164,-80,-81,165,166,170,-65,-63,-64,176,-48,180,-59,-58,189,190,-83,-104,-105,-106,-45,-86,-79,193,-82,-68,-66,-60,-49,200,-95,210,-47,-84,212,213,-85,-67,218,220,-94,-55,226,-46,229,231,232,233,-96,234,-92,236,238,-62,239,-69,-98,-107,-50,-91,-93,-56,244,-100,-97,-99,253,-102,-101,]),'DEFICION':([27,82,],[36,36,]),'LET':([27,82,],[37,37,]),'IMPRIMIR':([27,82,138,139,],[38,38,38,38,]),'DO':([27,82,86,],[41,41,41,]),'WHEN':([27,82,],[43,43,]),'DEFFUNCION':([27,82,],[44,44,]),'LOOP':([27,82,],[45,45,]),'COND':([27,82,],[46,46,]),'DOSEQ':([27,82,],[47,47,]),'CASE':([27,82,214,],[48,48,228,]),'LIST':([27,82,],[49,49,]),'DOTIMES':([27,82,],[51,51,]),'RECUR':([27,82,86,117,],[52,52,52,52,]),'MAS':([27,82,201,],[53,53,53,]),'MENOS':([27,82,201,],[54,54,54,]),'PRODUCTO':([27,82,201,],[55,55,55,]),'DIVISION':([27,82,201,],[56,56,56,]),'COMPARA_IGUAL':([27,75,82,],[57,57,57,]),'MENORQUE':([27,75,82,],[58,58,58,]),'MAYORQUE':([27,75,82,],[59,59,59,]),'MAYORIGUALQUE':([27,75,82,],[60,60,60,]),'MENORIGUALQUE':([27,75,82,],[61,61,61,]),'DIFERENTE':([27,75,82,],[62,62,62,]),'VARIABLE':([28,36,38,39,44,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,73,74,77,78,80,81,88,93,97,98,100,101,103,105,115,116,119,120,128,133,141,151,164,167,168,174,179,183,185,186,189,201,202,204,222,226,228,240,241,247,],[64,77,80,80,90,80,80,80,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,80,-26,-27,-29,-30,115,-77,80,119,-31,80,126,80,80,80,80,80,150,-73,80,-78,80,-70,167,173,80,80,-79,-31,80,80,80,80,80,80,-47,80,80,80,80,-62,240,80,80,80,]),'STRING':([28,38,39,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,74,77,80,81,90,93,97,98,100,101,105,113,115,116,119,120,128,141,144,151,164,167,168,174,179,183,185,186,189,201,202,204,211,222,226,240,241,246,247,252,],[67,67,67,67,67,67,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,67,-26,-27,-29,-30,113,-77,67,-31,67,131,67,67,67,67,67,-73,113,67,-78,67,-70,67,67,186,67,-79,-31,67,67,67,67,67,67,-47,67,67,67,225,67,-62,67,67,250,67,254,]),'CHAR':([28,38,39,48,49,50,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,74,77,80,81,93,97,98,100,101,105,115,116,119,120,128,141,151,164,167,168,174,179,183,185,186,189,201,202,204,222,226,240,241,247,],[68,68,68,68,68,68,-41,-42,-43,-44,-35,-36,-37,-38,-39,-40,-31,-28,68,-26,-27,-29,-30,-77,68,-31,68,68,68,68,68,68,-73,68,-78,68,-70,68,68,68,-79,-31,68,68,68,68,68,68,-47,68,68,68,68,-62,68,68,68,]),'DOSPUNTOS':([30,115,120,136,137,145,185,186,208,209,245,250,],[73,73,-70,177,-48,188,-51,-52,-53,-54,249,-103,]),'INCREASE':([44,],[91,]),'RCOR':([63,64,65,66,67,68,69,70,80,100,105,106,107,135,147,153,154,155,162,167,168,173,182,184,224,236,],[105,-31,-28,-71,-26,-27,-29,-30,-31,-57,-73,152,-72,175,-58,-104,-105,-106,192,194,-57,197,205,207,237,243,]),'R_LLAVE':([65,67,68,69,70,72,80,108,109,110,111,112,113,156,157,158,159,160,],[-28,-26,-27,-29,-30,114,-31,153,154,155,-108,-110,-112,-109,-111,-113,-74,-75,]),'INC':([104,],[151,]),'PRN':([139,],[179,]),'ELSE':([177,188,249,],[199,211,252,]),'RANGE':([181,],[204,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,40,41,76,83,89,90,102,132,171,195,],[1,83,85,83,122,122,122,122,122,122,122,]),'asignacion':([0,40,41,76,83,89,90,102,132,171,195,],[2,2,2,2,2,2,2,2,2,2,2,]),'impresion':([0,40,41,76,83,89,90,95,96,102,132,144,145,171,195,199,],[3,3,3,3,3,3,3,137,140,3,3,185,187,3,3,219,]),'operacion_aritmetica':([0,40,41,76,83,89,90,102,132,171,179,195,],[4,4,4,4,4,4,4,4,4,4,203,4,]),'conjuntos':([0,40,41,76,83,89,90,102,132,142,143,171,195,],[5,5,5,5,5,5,5,5,5,182,184,5,5,]),'vector':([0,40,41,76,83,89,90,97,102,132,142,171,195,206,],[6,6,6,6,6,6,6,143,6,6,183,6,6,224,]),'mapa':([0,40,41,76,83,89,90,102,132,171,195,],[7,7,7,7,7,7,7,7,7,7,7,]),'if':([0,27,40,41,76,82,83,89,90,102,132,134,169,171,195,216,],[8,42,8,8,8,42,8,8,8,8,8,174,195,8,8,230,]),'do':([0,40,41,42,76,83,89,90,102,132,171,195,],[9,9,9,87,9,9,9,9,9,9,9,9,]),'if_do':([0,40,41,76,83,89,90,102,132,171,195,],[10,10,10,10,10,10,10,10,10,10,10,]),'when':([0,40,41,76,83,89,90,102,132,171,195,],[11,11,11,11,11,11,11,11,11,11,11,]),'defn':([0,40,41,76,83,89,90,102,132,171,195,],[12,12,12,12,12,12,12,12,12,12,12,]),'defn_with_return':([0,40,41,76,83,89,90,102,132,171,195,],[13,13,13,13,13,13,13,13,13,13,13,]),'operacionesLogicas':([0,40,41,76,83,89,90,102,132,171,195,197,],[14,14,14,14,14,14,14,14,14,14,14,217,]),'sentenciaLoopRecur':([0,40,41,76,83,89,90,102,132,171,195,],[15,15,15,15,15,15,15,15,15,15,15,]),'cond_':([0,40,41,76,83,89,90,102,132,171,195,],[16,16,16,16,16,16,16,16,16,16,16,]),'cond_else':([0,40,41,76,83,89,90,102,132,171,195,],[17,17,17,17,17,17,17,17,17,17,17,]),'doseq':([0,40,41,76,83,89,90,102,132,171,195,],[18,18,18,18,18,18,18,18,18,18,18,]),'case_expression':([0,40,41,76,83,89,90,102,132,171,195,],[19,19,19,19,19,19,19,19,19,19,19,]),'lista':([0,40,41,76,83,89,90,102,132,171,195,],[20,20,20,20,20,20,20,20,20,20,20,]),'sentencia_booleana':([0,31,40,41,43,46,76,83,89,90,94,102,132,171,195,],[21,74,84,21,89,95,21,21,21,21,95,21,21,21,21,]),'function':([0,40,41,76,83,89,90,102,132,171,195,],[22,22,22,22,22,22,22,22,22,22,22,]),'dotimes':([0,40,41,76,83,89,90,102,132,171,195,],[23,23,23,23,23,23,23,23,23,23,23,]),'ciclo':([0,40,41,51,76,83,89,90,102,132,171,195,],[24,24,24,102,24,24,24,24,24,24,24,24,]),'valor':([0,40,41,76,83,89,90,102,132,171,195,],[25,25,25,25,25,25,25,25,25,25,25,]),'recur':([0,40,41,42,74,76,83,84,89,90,102,132,171,195,230,],[26,26,26,88,116,26,26,116,26,26,26,26,26,26,88,]),'operador_aritmetico':([27,82,201,],[39,39,39,]),'operador_comparadores':([27,75,82,],[50,50,50,]),'secuencia_v':([28,66,128,141,168,],[63,107,63,63,107,]),'dato':([28,38,39,48,49,50,66,77,81,93,97,98,100,101,115,119,128,141,151,168,174,179,183,185,186,201,202,204,222,240,241,247,],[66,79,81,98,100,101,66,118,121,100,142,144,100,148,159,162,168,66,191,168,198,202,206,144,144,221,222,223,235,246,247,251,]),'secuencia_mapa':([30,115,],[72,160,]),'argumments':([45,90,131,],[92,132,171,]),'linecondition':([46,94,],[94,136,]),'doseq_args':([47,],[96,]),'argumentos_lista':([49,93,100,128,168,],[99,135,147,135,147,]),'expresionConjuntoEnteros':([71,111,],[108,156,]),'expresionConjuntoDouble':([71,112,],[109,157,]),'expresionConjuntoString':([71,113,],[110,158,]),'body':([83,89,90,102,132,171,195,],[123,127,130,149,172,196,215,]),'internos':([90,],[129,]),'case':([98,185,186,],[145,208,209,]),'doseq_prn':([139,],[178,]),'expresionDefnElse':([214,],[227,]),'defn_return':([231,244,],[242,248,]),'expresionCase':([240,],[245,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> operacion_aritmetica','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> vector','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> mapa','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> if','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> do','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> if_do','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> when','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> defn_with_return','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',22),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',23),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',24),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',25),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',26),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',27),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',28),
  ('instrucciones -> function','instrucciones',1,'p_instrucciones','clojure_sin.py',29),
  ('instrucciones -> dotimes','instrucciones',1,'p_instrucciones','clojure_sin.py',30),
  ('instrucciones -> ciclo','instrucciones',1,'p_instrucciones','clojure_sin.py',31),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','clojure_sin.py',32),
  ('instrucciones -> recur','instrucciones',1,'p_instrucciones','clojure_sin.py',33),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',39),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',40),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',41),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',42),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',43),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',44),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',49),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',50),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',51),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',57),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',58),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',59),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',60),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',61),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',62),
  ('operador_aritmetico -> MAS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',67),
  ('operador_aritmetico -> MENOS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',68),
  ('operador_aritmetico -> PRODUCTO','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',69),
  ('operador_aritmetico -> DIVISION','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',70),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',75),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',76),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',86),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',92),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',99),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',105),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',118),
  ('case -> dato STRING','case',2,'p_case','clojure_sin.py',119),
  ('case -> dato impresion case','case',3,'p_case','clojure_sin.py',120),
  ('case -> dato STRING case','case',3,'p_case','clojure_sin.py',121),
  ('case_expression -> LPAREN CASE dato case impresion RPAREN','case_expression',6,'p_case_expression','clojure_sin.py',131),
  ('case_expression -> LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN','case_expression',8,'p_case_expression','clojure_sin.py',132),
  ('argumentos_lista -> dato','argumentos_lista',1,'p_argumentos_lista','clojure_sin.py',142),
  ('argumentos_lista -> dato argumentos_lista','argumentos_lista',2,'p_argumentos_lista','clojure_sin.py',143),
  ('lista -> LPAREN LIST argumentos_lista RPAREN','lista',4,'p_lista','clojure_sin.py',152),
  ('argumments -> LCOR argumentos_lista RCOR','argumments',3,'p_argumments','clojure_sin.py',157),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',162),
  ('recur -> LPAREN RECUR LPAREN INC dato RPAREN RPAREN','recur',7,'p_recur','clojure_sin.py',167),
  ('internos -> STRING','internos',1,'p_internos','clojure_sin.py',172),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',173),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',174),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',175),
  ('internos -> STRING argumments body','internos',3,'p_internos','clojure_sin.py',176),
  ('function -> LPAREN DEFFUNCION VARIABLE internos RPAREN','function',5,'p_function','clojure_sin.py',195),
  ('function -> LPAREN DEFFUNCION VARIABLE internos LPAREN if body RPAREN','function',8,'p_function','clojure_sin.py',196),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',205),
  ('secuencia_v -> dato','secuencia_v',1,'p_secuencia_vector','clojure_sin.py',213),
  ('secuencia_v -> dato secuencia_v','secuencia_v',2,'p_secuencia_vector','clojure_sin.py',214),
  ('vector -> LCOR secuencia_v RCOR','vector',3,'p_vector','clojure_sin.py',223),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato','secuencia_mapa',3,'p_secuencia_mapa','clojure_sin.py',231),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE secuencia_mapa','secuencia_mapa',3,'p_secuencia_mapa','clojure_sin.py',232),
  ('mapa -> L_LLAVE secuencia_mapa R_LLAVE','mapa',3,'p_mapa','clojure_sin.py',238),
  ('if -> IF sentencia_booleana','if',2,'p_if','clojure_sin.py',243),
  ('if -> IF sentencia_booleana recur','if',3,'p_if','clojure_sin.py',244),
  ('if -> LPAREN IF instrucciones body RPAREN','if',5,'p_if','clojure_sin.py',245),
  ('do -> LPAREN DO instrucciones RPAREN','do',4,'p_do','clojure_sin.py',257),
  ('if_do -> LPAREN if do RPAREN','if_do',4,'p_if_do','clojure_sin.py',262),
  ('when -> LPAREN WHEN sentencia_booleana body RPAREN','when',5,'p_when','clojure_sin.py',267),
  ('ciclo -> LCOR VARIABLE ENTERO RCOR','ciclo',4,'p_ciclo','clojure_sin.py',272),
  ('dotimes -> LPAREN DOTIMES ciclo body RPAREN','dotimes',5,'p_dotimes','clojure_sin.py',277),
  ('operacionesLogicas -> LPAREN if recur VARIABLE RPAREN RPAREN','operacionesLogicas',6,'p_operacionesLogicas','clojure_sin.py',282),
  ('operacion_aritmetica -> LPAREN operador_aritmetico dato dato RPAREN','operacion_aritmetica',5,'p_operacion_aritmetica1','clojure_sin.py',287),
  ('doseq_args -> LCOR dato LPAREN RANGE dato RPAREN RCOR','doseq_args',7,'p_doseq_args','clojure_sin.py',293),
  ('doseq_args -> LCOR dato conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',294),
  ('doseq_args -> LCOR dato vector dato vector RCOR','doseq_args',6,'p_doseq_args','clojure_sin.py',295),
  ('doseq_args -> LCOR vector conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',296),
  ('doseq_prn -> PRN LPAREN dato RPAREN','doseq_prn',4,'p_doseq_prn','clojure_sin.py',307),
  ('doseq_prn -> PRN dato dato','doseq_prn',3,'p_doseq_prn','clojure_sin.py',308),
  ('doseq_prn -> PRN dato dato dato','doseq_prn',4,'p_doseq_prn','clojure_sin.py',309),
  ('doseq_prn -> PRN operacion_aritmetica','doseq_prn',2,'p_doseq_prn','clojure_sin.py',310),
  ('doseq -> LPAREN DOSEQ doseq_args impresion RPAREN','doseq',5,'p_doseq','clojure_sin.py',328),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',329),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',338),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',339),
  ('defn_with_return -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return','defn_with_return',11,'p_defn_with_return','clojure_sin.py',348),
  ('defn_with_return -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return','defn_with_return',9,'p_defn_with_return','clojure_sin.py',349),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',359),
  ('defn_return -> LPAREN dato dato RPAREN','defn_return',4,'p_defn_return','clojure_sin.py',364),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',369),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',375),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',376),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',377),
  ('sentenciaLoopRecur -> LPAREN LOOP argumments LPAREN if dato RPAREN RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',384),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',390),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',391),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',401),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',402),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',411),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',412),
]
