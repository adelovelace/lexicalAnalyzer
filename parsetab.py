
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPAS MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTORES WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica1\n                    | condicional\n                    | vectores\n                    | conjuntos\n                    | defn\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | operador_comparadoresdato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEasignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresioncase_expression : LPAREN CASE dato case case case impresion RPARENlista : LPAREN LIST dato dato RPARENimpresion : LPAREN IMPRIMIR dato RPARENvalor : VARIABLEoperacion : MAS\n          | MENOS\n          | PRODUCTO\n          | DIVISION operacionesLogicas : LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPARENoperacion_aritmetica1 : LPAREN operacion valor valor RPARENcondicional : LPAREN operacion valor valor RPARENvectores : VECTORESdoseq : LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPARENdefn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n      \n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGexpresionCase : dato STRING conjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP LCOR VARIABLE ENTERO RCOR  operacionesLogicas RPARENexpresionConjuntoEnteros : ENTERO\n                     | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                     | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,20,21,25,31,32,33,34,40,42,51,67,68,81,88,89,111,113,114,116,117,119,124,139,140,145,148,],[19,-23,52,-20,-18,-19,-21,-22,64,66,-39,66,52,-42,-36,108,-35,121,122,122,52,52,132,144,145,52,151,]),'VECTORES':([0,],[22,]),'NUMERAL':([0,],[23,]),'COMPARA_IGUAL':([0,19,66,],[26,26,26,]),'MENORQUE':([0,19,64,66,],[24,24,85,24,]),'MAYORQUE':([0,19,66,],[27,27,27,]),'MAYORIGUALQUE':([0,19,66,],[28,28,28,]),'MENORIGUALQUE':([0,19,66,],[29,29,29,]),'DIFERENTE':([0,19,66,],[30,30,30,]),'STRING':([0,20,24,25,26,27,28,29,30,31,32,33,34,37,44,45,46,51,53,54,70,71,72,78,80,81,90,109,138,143,150,],[31,-23,-28,-20,-27,-29,-30,-31,-32,-18,-19,-21,-22,31,31,31,31,-39,78,31,31,31,31,78,31,-42,31,31,31,147,153,]),'CHAR':([0,20,24,25,26,27,28,29,30,31,32,33,34,37,44,45,46,51,54,70,71,72,80,81,90,109,138,],[32,-23,-28,-20,-27,-29,-30,-31,-32,-18,-19,-21,-22,32,32,32,32,-39,32,32,32,32,32,-42,32,32,32,]),'ENTERO':([0,20,24,25,26,27,28,29,30,31,32,33,34,37,38,44,45,46,47,48,49,50,51,53,54,57,58,59,60,61,70,71,72,76,80,81,86,90,104,109,138,],[25,-23,-28,-20,-27,-29,-30,-31,-32,-18,-19,-21,-22,25,58,25,25,25,-44,-45,-46,-47,-39,76,25,58,-24,-25,-26,-43,25,25,25,76,25,-42,105,25,115,25,25,]),'FLOTANTE':([0,20,24,25,26,27,28,29,30,31,32,33,34,37,38,44,45,46,47,48,49,50,51,53,54,57,58,59,60,61,70,71,72,77,80,81,90,109,138,],[33,-23,-28,-20,-27,-29,-30,-31,-32,-18,-19,-21,-22,33,59,33,33,33,-44,-45,-46,-47,-39,77,33,59,-24,-25,-26,-43,33,33,33,77,33,-42,33,33,33,]),'BOOLEAN':([0,20,24,25,26,27,28,29,30,31,32,33,34,37,38,44,45,46,47,48,49,50,51,54,57,58,59,60,61,70,71,72,80,81,90,109,138,],[34,-23,-28,-20,-27,-29,-30,-31,-32,-18,-19,-21,-22,34,60,34,34,34,-44,-45,-46,-47,-39,34,60,-24,-25,-26,-43,34,34,34,34,-42,34,34,34,]),'VARIABLE':([0,20,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,44,45,46,47,48,49,50,51,54,55,57,58,59,60,61,65,69,70,71,72,80,81,83,84,85,90,109,118,130,138,151,157,],[20,-23,-28,-20,-27,-29,-30,-31,-32,-18,-19,-21,-22,54,20,61,62,20,20,20,-44,-45,-46,-47,-39,20,80,61,-24,-25,-26,-43,86,89,20,20,20,20,-42,102,103,104,20,20,127,138,20,154,158,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,22,24,26,27,28,29,30,51,81,93,94,95,99,101,106,110,111,120,131,133,134,136,141,155,160,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-51,-28,-27,-29,-30,-31,-32,-39,-42,-57,-58,-59,-33,-49,-37,-41,-35,-34,-54,-60,-38,-40,-53,-52,-48,]),'DEFICION':([19,],[35,]),'LET':([19,],[36,]),'IMPRIMIR':([19,52,],[37,37,]),'DEFFUNCION':([19,],[39,]),'IF':([19,122,],[40,40,]),'LOOP':([19,],[41,]),'COND':([19,],[42,]),'DOSEQ':([19,],[43,]),'CASE':([19,121,],[44,130,]),'LIST':([19,],[45,]),'MAS':([19,],[47,]),'MENOS':([19,],[48,]),'PRODUCTO':([19,],[49,]),'DIVISION':([19,],[50,]),'RPAREN':([20,25,31,32,33,34,56,58,59,60,61,79,81,82,87,88,91,92,112,115,123,125,126,127,128,129,137,149,152,153,154,156,158,159,160,],[-23,-20,-18,-19,-21,-22,81,-24,-25,-26,-43,99,-42,101,106,-36,110,111,120,124,131,133,134,135,136,137,141,152,155,-55,156,157,159,160,-48,]),'RCOR':([20,25,31,32,33,34,100,102,103,105,135,],[-23,-20,-18,-19,-21,-22,112,113,114,116,140,]),'L_LLAVE':([23,],[53,]),'LCOR':([36,41,43,62,63,],[55,65,69,83,84,]),'INCREASE':([39,],[63,]),'R_LLAVE':([73,74,75,76,77,78,96,97,98,],[93,94,95,-61,-63,-65,-62,-64,-66,]),'DOSPUNTOS':([81,87,88,142,147,],[-42,107,-36,146,-56,]),'ELSE':([107,146,],[117,150,]),'RANGE':([108,],[118,]),'RECUR':([132,],[139,]),'INC':([144,],[148,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,],[1,]),'asignacion':([0,],[2,]),'impresion':([0,21,68,117,119,145,],[3,51,88,126,128,149,]),'operacion_aritmetica1':([0,],[4,]),'condicional':([0,],[5,]),'vectores':([0,],[6,]),'conjuntos':([0,],[7,]),'defn':([0,],[8,]),'operacionesLogicas':([0,114,116,],[9,123,125,]),'sentenciaLoopRecur':([0,],[10,]),'cond_':([0,],[11,]),'cond_else':([0,],[12,]),'doseq':([0,],[13,]),'case':([0,70,90,109,],[14,90,109,119,]),'case_expression':([0,],[15,]),'lista':([0,],[16,]),'sentencia_booleana':([0,42,67,],[17,68,68,]),'operador_comparadores':([0,19,66,],[18,46,46,]),'dato':([0,37,44,45,46,54,70,71,72,80,90,109,138,],[21,56,70,71,72,79,21,91,92,100,21,21,143,]),'operacion':([19,],[38,]),'valor':([38,57,],[57,82,]),'linecondition':([42,67,],[67,87,]),'expresionConjuntoEnteros':([53,76,],[73,96,]),'expresionConjuntoDouble':([53,77,],[74,97,]),'expresionConjuntoString':([53,78,],[75,98,]),'expresionDefnElse':([121,],[129,]),'expresionCase':([138,],[142,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',5),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',6),
  ('instrucciones -> operacion_aritmetica1','instrucciones',1,'p_instrucciones','clojure_sin.py',7),
  ('instrucciones -> condicional','instrucciones',1,'p_instrucciones','clojure_sin.py',8),
  ('instrucciones -> vectores','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> case','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> operador_comparadores','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',24),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',25),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',26),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',27),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',28),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',29),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',32),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',33),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',34),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',38),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',39),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',40),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',41),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',42),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',43),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',46),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',47),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',50),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',53),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',60),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',64),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',69),
  ('case_expression -> LPAREN CASE dato case case case impresion RPAREN','case_expression',8,'p_case_expression','clojure_sin.py',72),
  ('lista -> LPAREN LIST dato dato RPAREN','lista',5,'p_lista','clojure_sin.py',75),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',78),
  ('valor -> VARIABLE','valor',1,'p_valor_variable','clojure_sin.py',81),
  ('operacion -> MAS','operacion',1,'p_op_aritmetica1','clojure_sin.py',85),
  ('operacion -> MENOS','operacion',1,'p_op_aritmetica1','clojure_sin.py',86),
  ('operacion -> PRODUCTO','operacion',1,'p_op_aritmetica1','clojure_sin.py',87),
  ('operacion -> DIVISION','operacion',1,'p_op_aritmetica1','clojure_sin.py',88),
  ('operacionesLogicas -> LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPAREN','operacionesLogicas',18,'p_operacionesLogicas','clojure_sin.py',91),
  ('operacion_aritmetica1 -> LPAREN operacion valor valor RPAREN','operacion_aritmetica1',5,'p_operacion_aritmetica1','clojure_sin.py',94),
  ('condicional -> LPAREN operacion valor valor RPAREN','condicional',5,'p_booleanos','clojure_sin.py',97),
  ('vectores -> VECTORES','vectores',1,'p_vectores','clojure_sin.py',100),
  ('doseq -> LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPAREN','doseq',13,'p_doseq','clojure_sin.py',103),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',106),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',107),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',112),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',116),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',119),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',120),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',121),
  ('sentenciaLoopRecur -> LPAREN LOOP LCOR VARIABLE ENTERO RCOR operacionesLogicas RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',125),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',128),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',129),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',133),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',134),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',138),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',139),
]
