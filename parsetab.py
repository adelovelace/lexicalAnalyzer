
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LISTA LOOP LPAREN L_LLAVE MAPAS MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTORES WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica1\n                    | condicional\n                    | vectores\n                    | conjuntos\n                    | defn\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | doseq\n                    | cond_\n                    | cond_else\n                    | sentencia_booleana\n                    | operador_comparadoresdato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEANvalor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEasignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENimpresion : LPAREN IMPRIMIR dato RPARENvalor : VARIABLEoperacion : MAS\n          | MENOS\n          | PRODUCTO\n          | DIVISION operacionesLogicas : LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPARENoperacion_aritmetica1 : LPAREN operacion valor valor RPARENcondicional : LPAREN operacion valor valor RPARENvectores : VECTORESdoseq : LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPARENdefn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n      \n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGexpresionCase : dato STRING conjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP LCOR VARIABLE ENTERO RCOR  operacionesLogicas RPARENexpresionConjuntoEnteros : ENTERO\n                     | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                     | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,30,33,59,60,70,76,78,97,99,100,102,104,109,122,123,128,131,],[16,55,58,58,79,-35,94,-32,-31,106,107,107,79,116,127,128,79,134,]),'VECTORES':([0,],[17,]),'NUMERAL':([0,],[18,]),'COMPARA_IGUAL':([0,16,58,],[20,20,20,]),'MENORQUE':([0,16,55,58,],[19,19,74,19,]),'MAYORQUE':([0,16,58,],[21,21,21,]),'MAYORIGUALQUE':([0,16,58,],[22,22,22,]),'MENORIGUALQUE':([0,16,58,],[23,23,23,]),'DIFERENTE':([0,16,58,],[24,24,24,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,19,20,21,22,23,24,70,81,82,83,87,89,95,97,105,115,117,119,124,138,143,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-44,-24,-23,-25,-26,-27,-28,-35,-50,-51,-52,-29,-42,-33,-31,-30,-47,-53,-34,-46,-45,-41,]),'DEFICION':([16,],[25,]),'LET':([16,],[26,]),'IMPRIMIR':([16,79,],[27,27,]),'DEFFUNCION':([16,],[29,]),'IF':([16,107,],[30,30,]),'LOOP':([16,],[31,]),'DOSEQ':([16,],[32,]),'COND':([16,],[33,]),'MAS':([16,],[35,]),'MENOS':([16,],[36,]),'PRODUCTO':([16,],[37,]),'DIVISION':([16,],[38,]),'L_LLAVE':([18,],[39,]),'STRING':([19,20,21,22,23,24,27,34,39,40,43,44,45,46,47,61,67,69,121,126,133,],[-24,-23,-25,-26,-27,-28,43,43,67,43,-15,-16,-17,-18,-19,43,67,43,43,130,136,]),'CHAR':([19,20,21,22,23,24,27,34,40,43,44,45,46,47,61,69,121,],[-24,-23,-25,-26,-27,-28,44,44,44,-15,-16,-17,-18,-19,44,44,44,]),'ENTERO':([19,20,21,22,23,24,27,28,34,35,36,37,38,39,40,43,44,45,46,47,48,49,50,51,52,61,65,69,75,92,121,],[-24,-23,-25,-26,-27,-28,45,49,45,-37,-38,-39,-40,65,45,-15,-16,-17,-18,-19,49,-20,-21,-22,-36,45,65,45,93,101,45,]),'FLOTANTE':([19,20,21,22,23,24,27,28,34,35,36,37,38,39,40,43,44,45,46,47,48,49,50,51,52,61,66,69,121,],[-24,-23,-25,-26,-27,-28,46,50,46,-37,-38,-39,-40,66,46,-15,-16,-17,-18,-19,50,-20,-21,-22,-36,46,66,46,46,]),'BOOLEAN':([19,20,21,22,23,24,27,28,34,35,36,37,38,40,43,44,45,46,47,48,49,50,51,52,61,69,121,],[-24,-23,-25,-26,-27,-28,47,51,47,-37,-38,-39,-40,47,-15,-16,-17,-18,-19,51,-20,-21,-22,-36,47,47,47,]),'VARIABLE':([25,28,29,35,36,37,38,41,48,49,50,51,52,56,57,72,73,74,103,114,134,140,],[40,52,53,-37,-38,-39,-40,69,52,-20,-21,-22,-36,75,76,90,91,92,111,121,137,141,]),'LCOR':([26,31,32,53,54,],[41,56,57,72,73,]),'INCREASE':([29,],[54,]),'RPAREN':([42,43,44,45,46,47,49,50,51,52,68,70,71,77,78,80,98,101,108,110,111,112,113,120,132,135,136,137,139,141,142,143,],[70,-15,-16,-17,-18,-19,-20,-21,-22,-36,87,-35,89,95,-32,97,105,109,115,117,118,119,120,124,135,138,-48,139,140,142,143,-41,]),'RCOR':([43,44,45,46,47,88,90,91,93,118,],[-15,-16,-17,-18,-19,98,99,100,102,123,]),'R_LLAVE':([62,63,64,65,66,67,84,85,86,],[81,82,83,-54,-56,-58,-55,-57,-59,]),'DOSPUNTOS':([70,77,78,125,130,],[-35,96,-32,129,-49,]),'RANGE':([94,],[103,]),'ELSE':([96,129,],[104,133,]),'CASE':([106,],[114,]),'RECUR':([116,],[122,]),'INC':([127,],[131,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,],[1,]),'asignacion':([0,],[2,]),'impresion':([0,60,104,128,],[3,78,112,132,]),'operacion_aritmetica1':([0,],[4,]),'condicional':([0,],[5,]),'vectores':([0,],[6,]),'conjuntos':([0,],[7,]),'defn':([0,],[8,]),'operacionesLogicas':([0,100,102,],[9,108,110,]),'sentenciaLoopRecur':([0,],[10,]),'doseq':([0,],[11,]),'cond_':([0,],[12,]),'cond_else':([0,],[13,]),'sentencia_booleana':([0,33,59,],[14,60,60,]),'operador_comparadores':([0,16,58,],[15,34,34,]),'operacion':([16,],[28,]),'dato':([27,34,40,61,69,121,],[42,61,68,80,88,126,]),'valor':([28,48,],[48,71,]),'linecondition':([33,59,],[59,77,]),'expresionConjuntoEnteros':([39,65,],[62,84,]),'expresionConjuntoDouble':([39,66,],[63,85,]),'expresionConjuntoString':([39,67,],[64,86,]),'expresionDefnElse':([106,],[113,]),'expresionCase':([121,],[125,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',5),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',6),
  ('instrucciones -> operacion_aritmetica1','instrucciones',1,'p_instrucciones','clojure_sin.py',7),
  ('instrucciones -> condicional','instrucciones',1,'p_instrucciones','clojure_sin.py',8),
  ('instrucciones -> vectores','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> operador_comparadores','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',21),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',22),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',23),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',24),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',25),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',28),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',29),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',30),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',34),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',35),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',36),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',37),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',38),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',39),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',42),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',43),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',46),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',49),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',57),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',60),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',63),
  ('valor -> VARIABLE','valor',1,'p_valor_variable','clojure_sin.py',66),
  ('operacion -> MAS','operacion',1,'p_op_aritmetica1','clojure_sin.py',70),
  ('operacion -> MENOS','operacion',1,'p_op_aritmetica1','clojure_sin.py',71),
  ('operacion -> PRODUCTO','operacion',1,'p_op_aritmetica1','clojure_sin.py',72),
  ('operacion -> DIVISION','operacion',1,'p_op_aritmetica1','clojure_sin.py',73),
  ('operacionesLogicas -> LPAREN IF LPAREN MENORQUE VARIABLE ENTERO RPAREN LPAREN RECUR LPAREN INC LPAREN VARIABLE RPAREN RPAREN VARIABLE RPAREN RPAREN','operacionesLogicas',18,'p_operacionesLogicas','clojure_sin.py',76),
  ('operacion_aritmetica1 -> LPAREN operacion valor valor RPAREN','operacion_aritmetica1',5,'p_operacion_aritmetica1','clojure_sin.py',79),
  ('condicional -> LPAREN operacion valor valor RPAREN','condicional',5,'p_booleanos','clojure_sin.py',82),
  ('vectores -> VECTORES','vectores',1,'p_vectores','clojure_sin.py',85),
  ('doseq -> LPAREN DOSEQ LCOR VARIABLE LPAREN RANGE VARIABLE RPAREN RCOR LPAREN impresion RPAREN RPAREN','doseq',13,'p_doseq','clojure_sin.py',88),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',91),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',92),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',97),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',101),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',104),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',105),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',106),
  ('sentenciaLoopRecur -> LPAREN LOOP LCOR VARIABLE ENTERO RCOR operacionesLogicas RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',110),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',113),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',114),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',118),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',119),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',123),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',124),
]
