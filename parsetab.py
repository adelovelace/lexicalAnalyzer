
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPA MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRN PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTOR WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica\n                    | conjuntos\n                    | vector\n                    | mapa\n                    | if\n                    | do\n                    | if_do\n                    | when\n                    | defn\n                    | defn_with_return\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | function\n                    | dotimes\n                    | ciclo\n                    | valordato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEoperador_aritmetico : MAS\n                  | MENOS\n                  | PRODUCTO\n                  | DIVISION asignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresion\n            | dato STRING\n            | dato impresion case\n            | dato STRING case\n    case_expression : LPAREN CASE dato case impresion RPAREN\n                        | LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN\n    argumentos_lista : dato\n                        | dato argumentos_listalista : LPAREN LIST argumentos_lista RPARENdescription : STRINGincrease : INCREASE LCOR dato RCORargumments : LCOR argumentos_lista RCORbody : instruccionesrecur : LPAREN RECUR LPAREN INC dato RPAREN RPARENinternos : description\n                | argumments\n                | body\n                | increase\n                | argumments body\n                | description argumments bodyfunction : LPAREN DEFFUNCION VARIABLE internos RPAREN\n                | LPAREN DEFFUNCION VARIABLE internos LPAREN if RPAREN RPAREN\n    impresion : LPAREN IMPRIMIR dato RPAREN secuencia_v : dato \n                    | dato secuencia_v\n    vector : LCOR secuencia_v RCOR secuencia_mapa : DOSPUNTOS VARIABLE dato \n        | DOSPUNTOS VARIABLE secuencia_mapa\n    mapa : L_LLAVE secuencia_mapa R_LLAVEif : IF sentencia_booleana\n          | IF sentencia_booleana recur\n          | LPAREN IF instrucciones body RPAREN\n    do : LPAREN DO instrucciones RPARENif_do : LPAREN if do RPARENwhen : LPAREN WHEN sentencia_booleana body RPARENciclo : LCOR VARIABLE ENTERO RCORdotimes : LPAREN DOTIMES ciclo body RPARENoperacionesLogicas : LPAREN if recur VARIABLE RPAREN RPARENoperacion_aritmetica : LPAREN operador_aritmetico dato dato RPARENdoseq_args : LCOR dato LPAREN RANGE dato RPAREN RCOR\n                    | LCOR dato conjuntos RCOR\n                    | LCOR dato vector dato vector RCOR\n                    | LCOR vector conjuntos RCORdoseq_prn : PRN LPAREN dato RPAREN\n                    | PRN dato dato\n                    | PRN dato dato dato\n                    | PRN operacion_aritmetica\n      doseq : LPAREN DOSEQ doseq_args impresion RPAREN\n            | LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN\n    defn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n             | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n    defn_with_return : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return\n\n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGdefn_return : LPAREN dato dato RPARENexpresionCase : dato STRINGconjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                      | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP argumments LPAREN if dato RPAREN RPARENexpresionConjuntoEnteros : ENTERO\n                                 | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                                  | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,30,31,32,33,39,40,41,42,45,63,65,66,67,68,72,74,78,80,81,82,87,88,90,92,93,94,100,102,111,113,117,119,121,122,123,127,128,129,130,131,132,135,138,143,145,146,147,152,153,154,155,161,163,164,167,170,171,172,173,177,178,181,182,187,188,191,192,195,196,198,200,202,208,210,211,212,213,215,219,220,224,233,234,235,236,237,241,242,243,247,248,249,253,258,],[26,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,34,73,-31,-32,-33,80,26,84,73,73,-27,-25,-26,-28,-29,114,26,-30,34,26,114,26,26,135,73,139,140,26,-75,-78,-80,-72,-62,-82,165,-83,170,-64,26,-66,-67,-59,34,-47,183,139,139,-58,-85,-106,-107,-108,-44,-88,-81,-84,34,-70,26,-68,-61,-48,204,-97,-50,-51,-46,-86,-87,217,-69,220,139,-90,-92,-52,-53,-54,-45,-60,34,-98,-71,114,246,-109,-49,-91,-55,-63,-102,-89,246,-101,-104,]),'NUMERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,31,32,33,39,40,63,65,66,67,68,72,74,78,81,82,87,88,100,102,111,113,117,121,123,129,143,144,147,152,153,154,155,161,163,164,167,171,172,177,178,182,191,192,195,213,215,224,233,235,236,237,242,243,247,249,253,258,],[28,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-31,-32,-33,28,28,-27,-25,-26,-28,-29,-79,28,-30,28,-20,28,28,28,-75,-78,-80,-72,-82,-83,28,28,28,-58,-85,-106,-107,-108,-44,-88,-81,-84,-70,28,-61,-48,-97,-46,-86,-87,-54,-45,-98,-71,-100,-109,-49,-55,-63,-102,-99,-101,-104,]),'LCOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,31,32,33,36,39,40,44,46,50,63,65,66,67,68,72,74,78,81,82,87,88,89,95,100,102,111,113,117,121,123,128,129,132,133,143,147,152,153,154,155,161,163,164,167,171,172,177,178,182,191,192,195,209,213,215,224,233,235,236,237,242,243,247,249,253,258,],[27,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-31,-32,-33,76,27,27,91,95,101,-27,-25,-26,-28,-29,-79,27,-30,27,-20,27,126,134,142,27,-75,-78,-80,-72,-82,-83,91,27,-59,174,142,-58,-85,-106,-107,-108,-44,-88,-81,-84,-70,27,-61,-48,-97,-46,-86,-87,142,-54,-45,-98,-71,-100,-109,-49,-55,-63,-102,-99,-101,-104,]),'L_LLAVE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,28,31,32,33,39,40,72,74,81,82,87,88,100,102,111,113,117,121,123,129,147,152,153,154,155,161,163,164,167,171,172,177,178,182,191,192,195,213,215,224,233,235,236,237,242,243,247,249,253,258,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,69,-31,-32,-33,29,29,-79,29,29,-20,29,29,29,-75,-78,-80,-72,-82,-83,29,-58,-85,-106,-107,-108,-44,-88,-81,-84,-70,29,-61,-48,-97,-46,-86,-87,-54,-45,-98,-71,-100,-109,-49,-55,-63,-102,-99,-101,-104,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,31,32,33,34,39,40,72,74,80,81,82,87,88,100,102,111,113,117,121,123,129,135,147,152,153,154,155,161,163,164,167,170,171,172,177,178,182,191,192,195,213,215,220,224,233,235,236,237,242,243,247,249,253,258,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,39,-31,-32,-33,74,30,30,-79,30,39,30,-20,30,30,30,-75,-78,-80,-72,-82,-83,30,30,-58,-85,-106,-107,-108,-44,-88,-81,-84,30,-70,30,-61,-48,-97,-46,-86,-87,-54,-45,30,-98,-71,-100,-109,-49,-55,-63,-102,-99,-101,-104,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,31,32,33,37,38,39,40,47,48,49,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,72,74,75,78,79,81,82,87,88,91,95,96,98,99,100,102,108,111,112,113,116,117,121,123,126,129,142,147,151,152,153,154,155,161,163,164,167,168,169,171,172,174,176,177,178,181,182,185,187,188,191,192,194,195,204,205,207,213,215,224,226,233,235,236,237,242,243,245,246,247,249,252,253,258,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,63,-31,-32,-33,63,63,31,31,63,63,63,-40,-41,-42,-43,-34,-35,-36,-37,-38,-39,103,-27,63,-25,-26,-28,-29,108,-79,31,63,-30,63,31,-20,31,31,63,63,63,63,63,31,-75,108,-78,63,-80,63,-72,-82,-83,63,31,63,-58,103,-85,-106,-107,-108,-44,-88,-81,-84,103,63,-70,31,63,63,-61,-48,63,-97,63,63,63,-46,-86,63,-87,63,63,63,-54,-45,-98,63,-71,-100,-109,-49,-55,-63,63,63,-102,-99,63,-101,-104,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,31,32,33,37,38,39,40,47,48,49,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,72,74,75,78,79,81,82,87,88,91,95,96,98,99,100,102,109,111,112,113,116,117,121,123,126,129,142,147,152,153,154,155,161,163,164,167,168,169,171,172,174,176,177,178,181,182,185,187,188,191,192,194,195,204,205,207,213,215,224,226,233,235,236,237,242,243,245,246,247,249,252,253,258,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,67,-31,-32,-33,67,67,32,32,67,67,67,-40,-41,-42,-43,-34,-35,-36,-37,-38,-39,-30,-27,67,-25,-26,-28,-29,109,-79,32,67,-30,67,32,-20,32,32,67,67,67,67,67,32,-75,109,-78,67,-80,67,-72,-82,-83,67,32,67,-58,-85,-106,-107,-108,-44,-88,-81,-84,-30,67,-70,32,67,67,-61,-48,67,-97,67,67,67,-46,-86,67,-87,67,67,67,-54,-45,-98,67,-71,-100,-109,-49,-55,-63,67,67,-102,-99,67,-101,-104,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,31,32,33,37,38,39,40,47,48,49,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,72,74,75,78,79,81,82,87,88,91,95,96,98,99,100,102,111,112,113,116,117,121,123,126,129,142,147,152,153,154,155,161,163,164,167,168,169,171,172,174,176,177,178,181,182,185,187,188,191,192,194,195,204,205,207,213,215,224,226,233,235,236,237,242,243,245,246,247,249,252,253,258,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,68,-31,-32,-33,68,68,33,33,68,68,68,-40,-41,-42,-43,-34,-35,-36,-37,-38,-39,-30,-27,68,-25,-26,-28,-29,-79,33,68,-30,68,33,-20,33,33,68,68,68,68,68,33,-75,-78,68,-80,68,-72,-82,-83,68,33,68,-58,-85,-106,-107,-108,-44,-88,-81,-84,-30,68,-70,33,68,68,-61,-48,68,-97,68,68,68,-46,-86,68,-87,68,68,68,-54,-45,-98,68,-71,-100,-109,-49,-55,-63,68,68,-102,-99,68,-101,-104,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,31,32,33,72,102,111,113,117,121,123,147,152,153,154,155,161,163,164,167,171,178,182,191,192,195,213,215,224,233,235,236,237,242,243,247,249,253,258,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-31,-32,-33,-79,-75,-78,-80,-72,-82,-83,-58,-85,-106,-107,-108,-44,-88,-81,-84,-70,-48,-97,-46,-86,-87,-54,-45,-98,-71,-100,-109,-49,-55,-63,-102,-99,-101,-104,]),'RPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,31,32,33,63,65,66,67,68,72,77,78,83,85,97,98,102,111,113,115,117,118,119,120,121,123,124,125,127,128,129,130,131,132,137,138,141,147,148,149,150,152,153,154,155,161,163,164,166,167,171,173,177,178,180,182,189,191,192,193,195,197,198,201,203,206,213,215,216,218,219,221,222,223,224,225,226,227,229,230,231,233,235,236,237,238,239,242,243,244,247,249,253,256,258,259,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-31,-32,-33,-27,-25,-26,-28,-29,-79,117,-30,121,123,147,-56,-75,-78,-80,161,-72,163,-62,164,-82,-83,166,167,171,-64,-65,-66,-67,-59,178,-47,182,-58,-57,191,192,-85,-106,-107,-108,-44,-88,-81,195,-84,-70,-68,-61,-48,203,-97,213,-46,-86,215,-87,218,-69,222,224,-96,-54,-45,230,233,-60,235,236,237,-98,238,-94,240,242,243,244,-71,-100,-109,-49,-93,-95,-55,-63,249,-102,-99,-101,258,-104,-103,]),'DEFICION':([26,80,],[35,35,]),'LET':([26,80,],[36,36,]),'IMPRIMIR':([26,80,139,140,],[37,37,37,37,]),'DO':([26,80,84,],[40,40,40,]),'WHEN':([26,80,],[42,42,]),'DEFFUNCION':([26,80,],[43,43,]),'LOOP':([26,80,],[44,44,]),'COND':([26,80,],[45,45,]),'DOSEQ':([26,80,],[46,46,]),'CASE':([26,80,217,],[47,47,232,]),'LIST':([26,80,],[48,48,]),'DOTIMES':([26,80,],[50,50,]),'MAS':([26,80,204,],[51,51,51,]),'MENOS':([26,80,204,],[52,52,52,]),'PRODUCTO':([26,80,204,],[53,53,53,]),'DIVISION':([26,80,204,],[54,54,54,]),'COMPARA_IGUAL':([26,73,80,],[55,55,55,]),'MENORQUE':([26,73,80,],[56,56,56,]),'MAYORQUE':([26,73,80,],[57,57,57,]),'MAYORIGUALQUE':([26,73,80,],[58,58,58,]),'MENORIGUALQUE':([26,73,80,],[59,59,59,]),'DIFERENTE':([26,73,80,],[60,60,60,]),'VARIABLE':([27,35,37,38,43,47,48,49,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,71,72,75,76,78,79,86,91,95,96,98,99,101,102,112,113,116,117,126,134,142,164,168,169,174,176,181,185,187,188,191,194,204,205,207,226,232,243,245,246,252,],[62,75,78,78,88,78,78,78,-40,-41,-42,-43,-34,-35,-36,-37,-38,-39,-30,-27,78,-25,-26,-28,-29,112,-79,78,116,-30,78,124,78,78,78,78,78,151,-75,78,-80,78,-72,168,175,78,-81,-30,78,78,78,78,78,78,78,-46,78,78,78,78,78,245,-63,78,78,78,]),'STRING':([27,37,38,47,48,49,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,72,75,78,79,88,91,95,96,98,99,102,110,112,113,116,117,126,142,145,164,168,169,174,176,181,185,187,188,191,194,204,205,207,214,226,243,245,246,251,252,257,],[65,65,65,65,65,65,-40,-41,-42,-43,-34,-35,-36,-37,-38,-39,-30,-27,65,-25,-26,-28,-29,110,-79,65,-30,65,132,65,65,65,65,65,-75,110,65,-80,65,-72,65,65,188,-81,-30,65,65,65,65,65,65,65,-46,65,65,65,65,229,65,-63,65,65,255,65,259,]),'CHAR':([27,37,38,47,48,49,51,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,72,75,78,79,91,95,96,98,99,102,112,113,116,117,126,142,164,168,169,174,176,181,185,187,188,191,194,204,205,207,226,243,245,246,252,],[66,66,66,66,66,66,-40,-41,-42,-43,-34,-35,-36,-37,-38,-39,-30,-27,66,-25,-26,-28,-29,-79,66,-30,66,66,66,66,66,66,-75,66,-80,66,-72,66,66,-81,-30,66,66,66,66,66,66,66,-46,66,66,66,66,66,-63,66,66,66,]),'DOSPUNTOS':([29,112,117,137,138,146,187,188,211,212,250,255,],[71,71,-72,179,-47,190,-50,-51,-52,-53,254,-105,]),'INCREASE':([43,88,],[89,133,]),'RCOR':([61,62,63,64,65,66,67,68,78,98,102,103,104,136,148,153,154,155,162,168,169,175,184,186,199,228,240,],[102,-30,-27,-73,-25,-26,-28,-29,-30,-56,-75,152,-74,177,-57,-106,-107,-108,193,196,-56,200,208,210,219,241,248,]),'R_LLAVE':([63,65,66,67,68,70,78,105,106,107,108,109,110,156,157,158,159,160,],[-27,-25,-26,-28,-29,111,-30,153,154,155,-110,-112,-114,-111,-113,-115,-76,-77,]),'RECUR':([84,114,],[122,122,]),'PRN':([140,],[181,]),'INC':([165,],[194,]),'ELSE':([179,190,254,],[202,214,257,]),'RANGE':([183,],[207,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,39,40,74,81,87,88,100,129,172,],[1,81,83,81,119,119,119,119,119,119,]),'asignacion':([0,39,40,74,81,87,88,100,129,172,],[2,2,2,2,2,2,2,2,2,2,]),'impresion':([0,39,40,74,81,87,88,93,94,100,129,145,146,172,202,],[3,3,3,3,3,3,3,138,141,3,3,187,189,3,223,]),'operacion_aritmetica':([0,39,40,74,81,87,88,100,129,172,181,],[4,4,4,4,4,4,4,4,4,4,206,]),'conjuntos':([0,39,40,74,81,87,88,100,129,143,144,172,],[5,5,5,5,5,5,5,5,5,184,186,5,]),'vector':([0,39,40,74,81,87,88,95,100,129,143,172,209,],[6,6,6,6,6,6,6,144,6,6,185,6,228,]),'mapa':([0,39,40,74,81,87,88,100,129,172,],[7,7,7,7,7,7,7,7,7,7,]),'if':([0,26,39,40,74,80,81,87,88,100,129,135,170,172,220,],[8,41,8,8,8,41,8,8,8,8,8,176,197,8,234,]),'do':([0,39,40,41,74,81,87,88,100,129,172,],[9,9,9,85,9,9,9,9,9,9,9,]),'if_do':([0,39,40,74,81,87,88,100,129,172,],[10,10,10,10,10,10,10,10,10,10,]),'when':([0,39,40,74,81,87,88,100,129,172,],[11,11,11,11,11,11,11,11,11,11,]),'defn':([0,39,40,74,81,87,88,100,129,172,],[12,12,12,12,12,12,12,12,12,12,]),'defn_with_return':([0,39,40,74,81,87,88,100,129,172,],[13,13,13,13,13,13,13,13,13,13,]),'operacionesLogicas':([0,39,40,74,81,87,88,100,129,172,200,],[14,14,14,14,14,14,14,14,14,14,221,]),'sentenciaLoopRecur':([0,39,40,74,81,87,88,100,129,172,],[15,15,15,15,15,15,15,15,15,15,]),'cond_':([0,39,40,74,81,87,88,100,129,172,],[16,16,16,16,16,16,16,16,16,16,]),'cond_else':([0,39,40,74,81,87,88,100,129,172,],[17,17,17,17,17,17,17,17,17,17,]),'doseq':([0,39,40,74,81,87,88,100,129,172,],[18,18,18,18,18,18,18,18,18,18,]),'case_expression':([0,39,40,74,81,87,88,100,129,172,],[19,19,19,19,19,19,19,19,19,19,]),'lista':([0,39,40,74,81,87,88,100,129,172,],[20,20,20,20,20,20,20,20,20,20,]),'sentencia_booleana':([0,30,39,40,42,45,74,81,87,88,92,100,129,172,],[21,72,82,21,87,93,21,21,21,21,93,21,21,21,]),'function':([0,39,40,74,81,87,88,100,129,172,],[22,22,22,22,22,22,22,22,22,22,]),'dotimes':([0,39,40,74,81,87,88,100,129,172,],[23,23,23,23,23,23,23,23,23,23,]),'ciclo':([0,39,40,50,74,81,87,88,100,129,172,],[24,24,24,100,24,24,24,24,24,24,24,]),'valor':([0,39,40,74,81,87,88,100,129,172,],[25,25,25,25,25,25,25,25,25,25,]),'operador_aritmetico':([26,80,204,],[38,38,38,]),'operador_comparadores':([26,73,80,],[49,49,49,]),'secuencia_v':([27,64,126,142,169,],[61,104,61,61,104,]),'dato':([27,37,38,47,48,49,64,75,79,91,95,96,98,99,112,116,126,142,169,174,176,181,185,187,188,194,204,205,207,226,245,246,252,],[64,77,79,96,98,99,64,115,118,98,143,145,98,149,159,162,169,64,169,199,201,205,209,145,145,216,225,226,227,239,251,252,256,]),'secuencia_mapa':([29,112,],[70,160,]),'recur':([41,72,82,234,],[86,113,113,86,]),'argumments':([44,88,128,],[90,129,172,]),'linecondition':([45,92,],[92,137,]),'doseq_args':([46,],[94,]),'argumentos_lista':([48,91,98,126,169,],[97,136,148,136,148,]),'expresionConjuntoEnteros':([69,108,],[105,156,]),'expresionConjuntoDouble':([69,109,],[106,157,]),'expresionConjuntoString':([69,110,],[107,158,]),'body':([81,87,88,100,129,172,],[120,125,130,150,173,198,]),'internos':([88,],[127,]),'description':([88,],[128,]),'increase':([88,],[131,]),'case':([96,187,188,],[146,211,212,]),'doseq_prn':([140,],[180,]),'expresionDefnElse':([217,],[231,]),'defn_return':([235,249,],[247,253,]),'expresionCase':([245,],[250,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> operacion_aritmetica','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> vector','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> mapa','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> if','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> do','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> if_do','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> when','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> defn_with_return','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',22),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',23),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',24),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',25),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',26),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',27),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',28),
  ('instrucciones -> function','instrucciones',1,'p_instrucciones','clojure_sin.py',29),
  ('instrucciones -> dotimes','instrucciones',1,'p_instrucciones','clojure_sin.py',30),
  ('instrucciones -> ciclo','instrucciones',1,'p_instrucciones','clojure_sin.py',31),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','clojure_sin.py',32),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',37),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',38),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',39),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',40),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',41),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',42),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',47),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',48),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',49),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',55),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',56),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',57),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',58),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',59),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',60),
  ('operador_aritmetico -> MAS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',65),
  ('operador_aritmetico -> MENOS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',66),
  ('operador_aritmetico -> PRODUCTO','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',67),
  ('operador_aritmetico -> DIVISION','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',68),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',73),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',74),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',84),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',90),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',97),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',103),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',116),
  ('case -> dato STRING','case',2,'p_case','clojure_sin.py',117),
  ('case -> dato impresion case','case',3,'p_case','clojure_sin.py',118),
  ('case -> dato STRING case','case',3,'p_case','clojure_sin.py',119),
  ('case_expression -> LPAREN CASE dato case impresion RPAREN','case_expression',6,'p_case_expression','clojure_sin.py',129),
  ('case_expression -> LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN','case_expression',8,'p_case_expression','clojure_sin.py',130),
  ('argumentos_lista -> dato','argumentos_lista',1,'p_argumentos_lista','clojure_sin.py',140),
  ('argumentos_lista -> dato argumentos_lista','argumentos_lista',2,'p_argumentos_lista','clojure_sin.py',141),
  ('lista -> LPAREN LIST argumentos_lista RPAREN','lista',4,'p_lista','clojure_sin.py',150),
  ('description -> STRING','description',1,'p_description','clojure_sin.py',156),
  ('increase -> INCREASE LCOR dato RCOR','increase',4,'p_increase','clojure_sin.py',161),
  ('argumments -> LCOR argumentos_lista RCOR','argumments',3,'p_argumments','clojure_sin.py',166),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',171),
  ('recur -> LPAREN RECUR LPAREN INC dato RPAREN RPAREN','recur',7,'p_recur','clojure_sin.py',176),
  ('internos -> description','internos',1,'p_internos','clojure_sin.py',181),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',182),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',183),
  ('internos -> increase','internos',1,'p_internos','clojure_sin.py',184),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',185),
  ('internos -> description argumments body','internos',3,'p_internos','clojure_sin.py',186),
  ('function -> LPAREN DEFFUNCION VARIABLE internos RPAREN','function',5,'p_function','clojure_sin.py',205),
  ('function -> LPAREN DEFFUNCION VARIABLE internos LPAREN if RPAREN RPAREN','function',8,'p_function','clojure_sin.py',206),
  ('impresion -> LPAREN IMPRIMIR dato RPAREN','impresion',4,'p_impresion','clojure_sin.py',215),
  ('secuencia_v -> dato','secuencia_v',1,'p_secuencia_vector','clojure_sin.py',223),
  ('secuencia_v -> dato secuencia_v','secuencia_v',2,'p_secuencia_vector','clojure_sin.py',224),
  ('vector -> LCOR secuencia_v RCOR','vector',3,'p_vector','clojure_sin.py',233),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato','secuencia_mapa',3,'p_secuencia_mapa','clojure_sin.py',241),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE secuencia_mapa','secuencia_mapa',3,'p_secuencia_mapa','clojure_sin.py',242),
  ('mapa -> L_LLAVE secuencia_mapa R_LLAVE','mapa',3,'p_mapa','clojure_sin.py',248),
  ('if -> IF sentencia_booleana','if',2,'p_if','clojure_sin.py',253),
  ('if -> IF sentencia_booleana recur','if',3,'p_if','clojure_sin.py',254),
  ('if -> LPAREN IF instrucciones body RPAREN','if',5,'p_if','clojure_sin.py',255),
  ('do -> LPAREN DO instrucciones RPAREN','do',4,'p_do','clojure_sin.py',267),
  ('if_do -> LPAREN if do RPAREN','if_do',4,'p_if_do','clojure_sin.py',272),
  ('when -> LPAREN WHEN sentencia_booleana body RPAREN','when',5,'p_when','clojure_sin.py',277),
  ('ciclo -> LCOR VARIABLE ENTERO RCOR','ciclo',4,'p_ciclo','clojure_sin.py',282),
  ('dotimes -> LPAREN DOTIMES ciclo body RPAREN','dotimes',5,'p_dotimes','clojure_sin.py',287),
  ('operacionesLogicas -> LPAREN if recur VARIABLE RPAREN RPAREN','operacionesLogicas',6,'p_operacionesLogicas','clojure_sin.py',292),
  ('operacion_aritmetica -> LPAREN operador_aritmetico dato dato RPAREN','operacion_aritmetica',5,'p_operacion_aritmetica1','clojure_sin.py',297),
  ('doseq_args -> LCOR dato LPAREN RANGE dato RPAREN RCOR','doseq_args',7,'p_doseq_args','clojure_sin.py',303),
  ('doseq_args -> LCOR dato conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',304),
  ('doseq_args -> LCOR dato vector dato vector RCOR','doseq_args',6,'p_doseq_args','clojure_sin.py',305),
  ('doseq_args -> LCOR vector conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',306),
  ('doseq_prn -> PRN LPAREN dato RPAREN','doseq_prn',4,'p_doseq_prn','clojure_sin.py',317),
  ('doseq_prn -> PRN dato dato','doseq_prn',3,'p_doseq_prn','clojure_sin.py',318),
  ('doseq_prn -> PRN dato dato dato','doseq_prn',4,'p_doseq_prn','clojure_sin.py',319),
  ('doseq_prn -> PRN operacion_aritmetica','doseq_prn',2,'p_doseq_prn','clojure_sin.py',320),
  ('doseq -> LPAREN DOSEQ doseq_args impresion RPAREN','doseq',5,'p_doseq','clojure_sin.py',338),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',339),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',348),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',349),
  ('defn_with_return -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return','defn_with_return',11,'p_defn_with_return','clojure_sin.py',358),
  ('defn_with_return -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return','defn_with_return',9,'p_defn_with_return','clojure_sin.py',359),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',369),
  ('defn_return -> LPAREN dato dato RPAREN','defn_return',4,'p_defn_return','clojure_sin.py',374),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',379),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',385),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',386),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',387),
  ('sentenciaLoopRecur -> LPAREN LOOP argumments LPAREN if dato RPAREN RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',394),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',400),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',401),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',411),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',412),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',421),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',422),
]
