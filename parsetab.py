
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPA MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRN PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTOR WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica\n                    | conjuntos\n                    | vector\n                    | mapa\n                    | if\n                    | do\n                    | if_do\n                    | when\n                    | defn\n                    | defn_with_return\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | function\n                    | dotimes\n                    | ciclo\n                    | valor\n                    | recur\n                    | dato\n                    dato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEoperador_aritmetico : MAS\n                  | MENOS\n                  | PRODUCTO\n                  | DIVISION asignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresion\n            | dato STRING\n            | dato impresion case\n            | dato STRING case\n    case_expression : LPAREN CASE dato case impresion RPAREN\n                        | LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN\n    argumentos_lista : dato\n                        | dato argumentos_listalista : LPAREN LIST argumentos_lista RPARENargumments : LCOR argumentos_lista RCORdescription : STRINGnombre_funct : VARIABLEbody : instruccionesrecur : LPAREN RECUR LPAREN INC dato RPAREN RPARENinternos : description\n                | argumments\n                | body\n                | argumments body\n                | description argumments bodyfunction : LPAREN DEFFUNCION nombre_funct internos RPAREN\n                | LPAREN DEFFUNCION nombre_funct internos LPAREN if body RPAREN\n    info_imprimir : dato\n                    | dato info_imprimir\n    impresion : LPAREN IMPRIMIR info_imprimir RPAREN secuencia_v : dato \n                    | dato secuencia_v\n    vector : LCOR secuencia_v RCOR secuencia_mapa : DOSPUNTOS VARIABLE dato \n                        | DOSPUNTOS VARIABLE dato secuencia_mapa\n    mapa : L_LLAVE secuencia_mapa R_LLAVEsecuencia_expresion_if : body\n        | body secuencia_expresion_if\n    secuencia_if : IF sentencia_booleana secuencia_expresion_ifif : IF sentencia_booleana\n          | IF sentencia_booleana recur\n          | LPAREN secuencia_if RPAREN\n    secuencia_do : instrucciones\n        | instrucciones secuencia_do\n    do : LPAREN DO secuencia_do RPAREN if_do : LPAREN if do RPARENwhen : LPAREN WHEN sentencia_booleana body RPARENciclo : LCOR VARIABLE ENTERO RCORdotimes : LPAREN DOTIMES ciclo body RPARENoperacionesLogicas : LPAREN if recur VARIABLE RPAREN RPARENoperacion_aritmetica : LPAREN operador_aritmetico dato dato RPARENdoseq_args : LCOR dato LPAREN RANGE dato RPAREN RCOR\n                    | LCOR dato conjuntos RCOR\n                    | LCOR dato vector dato vector RCOR\n                    | LCOR vector conjuntos RCOR\n                    | LCOR dato vector RCOR\n    pnr_dato : dato\n            | dato pnr_dato\n    doseq_prn : PRN LPAREN dato RPAREN\n                | PRN pnr_dato\n                | PRN operacion_aritmetica\n    doseq : LPAREN DOSEQ doseq_args impresion RPAREN\n            | LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN\n    defn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n             | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n    defn_with_return : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return\n\n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGdefn_return : LPAREN dato dato RPARENexpresionCase : dato STRINGconjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP argumments LPAREN if dato RPAREN RPARENexpresionConjuntoEnteros : ENTERO\n                                 | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                                  | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36,37,38,45,46,47,50,56,61,70,72,73,77,79,85,87,91,92,94,95,97,98,99,105,108,109,118,120,122,125,128,130,133,136,137,138,139,140,142,145,150,152,153,154,161,162,163,164,165,166,167,172,174,176,179,180,181,182,185,186,189,190,195,196,199,200,205,206,207,208,209,211,218,220,221,222,223,224,227,229,234,240,243,244,245,246,247,250,251,255,256,257,261,266,],[28,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,39,-32,78,-27,-29,-30,-31,-28,28,88,78,78,107,78,-29,-30,-31,121,78,-87,28,28,-63,28,142,78,146,147,28,163,-78,-81,-86,28,-75,-90,-91,-64,179,-68,-66,28,-27,39,-49,191,146,146,-60,-25,28,39,-93,-116,-117,-118,-46,-96,-92,39,-71,28,-69,-61,-50,213,-107,-52,-53,-48,-94,-95,228,229,28,-70,146,-98,-101,-100,-54,-55,-56,-47,39,-108,-65,121,254,-72,-119,-51,-99,-57,-112,-97,254,-111,-114,]),'NUMERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,45,70,72,73,77,85,87,91,92,94,105,108,109,118,120,122,125,128,130,133,139,150,151,154,161,162,164,165,166,167,172,174,176,180,181,185,186,190,199,200,205,208,224,227,234,240,244,245,246,247,251,255,257,261,266,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,31,-29,-30,-31,-85,-87,31,31,-63,31,31,31,-78,-81,-86,31,-75,-90,-91,-64,31,31,31,-60,-25,31,-93,-116,-117,-118,-46,-96,-92,-71,31,-61,-50,-107,-48,-94,-95,31,-56,-47,-108,-65,-110,-72,-119,-51,-57,-112,-109,-111,-114,]),'LCOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,41,45,49,51,55,70,72,73,77,85,87,91,92,93,94,100,105,108,109,118,120,122,125,128,130,133,138,139,140,150,154,161,162,164,165,166,167,172,174,176,180,181,185,186,190,199,200,205,208,219,224,227,234,240,244,245,246,247,251,255,257,261,266,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,81,30,96,100,106,-29,-30,-31,-85,-87,30,30,134,135,141,149,30,30,-78,-81,-86,30,-75,-90,-91,-64,96,30,-62,149,-60,-25,30,-93,-116,-117,-118,-46,-96,-92,-71,30,-61,-50,-107,-48,-94,-95,30,149,-56,-47,-108,-65,-110,-72,-119,-51,-57,-112,-109,-111,-114,]),'L_LLAVE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,34,35,36,37,38,45,77,85,87,91,92,94,105,108,109,118,120,122,125,128,130,133,139,154,161,162,164,165,166,167,172,174,176,180,181,185,186,190,199,200,205,208,224,227,234,240,244,245,246,247,251,255,257,261,266,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,74,-27,-29,-30,-31,-28,32,-85,-87,32,32,-63,32,32,32,-78,-81,-86,32,-75,-90,-91,-64,32,-60,-25,32,-93,-116,-117,-118,-46,-96,-92,-71,32,-61,-50,-107,-48,-94,-95,32,-56,-47,-108,-65,-110,-72,-119,-51,-57,-112,-109,-111,-114,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,34,35,36,37,38,39,45,77,85,87,91,92,94,105,108,109,118,120,122,125,128,130,133,139,142,154,161,162,163,164,165,166,167,172,174,176,179,180,181,185,186,190,199,200,205,208,224,227,229,234,240,244,245,246,247,251,255,257,261,266,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,61,-32,-27,-29,-30,-31,-28,79,33,-85,-87,33,33,-63,33,33,33,-78,-81,-86,33,-75,-90,-91,-64,33,33,-60,-25,33,61,-93,-116,-117,-118,-46,-96,-92,33,-71,33,-61,-50,-107,-48,-94,-95,33,-56,-47,33,-108,-65,-110,-72,-119,-51,-57,-112,-109,-111,-114,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,74,77,80,83,84,85,87,91,92,94,96,100,101,103,104,105,108,109,115,118,119,120,122,124,125,128,130,133,139,141,149,154,158,159,161,162,164,165,166,167,172,174,176,180,181,183,184,185,186,189,190,193,195,196,199,200,205,208,213,214,217,224,227,234,240,244,245,246,247,251,253,254,255,257,260,261,266,],[35,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,70,-27,-29,-30,-31,-28,70,70,35,70,70,70,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,110,-29,70,-30,-31,115,-85,70,70,70,-87,35,35,-63,35,70,70,70,70,70,35,35,-78,115,-81,70,-86,35,70,-75,-90,-91,-64,35,70,70,-60,110,70,-25,35,-93,-116,-117,-118,-46,-96,-92,-71,35,70,70,-61,-50,70,-107,70,70,70,-48,-94,-95,35,70,70,70,-56,-47,-108,-65,-110,-72,-119,-51,-57,70,70,-112,-109,70,-111,-114,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,74,77,80,83,84,85,87,91,92,94,96,100,101,103,104,105,108,109,116,118,119,120,122,124,125,128,130,133,139,141,149,154,159,161,162,164,165,166,167,172,174,176,180,181,183,184,185,186,189,190,193,195,196,199,200,205,208,213,214,217,224,227,234,240,244,245,246,247,251,253,254,255,257,260,261,266,],[36,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,72,-27,-29,-30,-31,-28,72,72,36,72,72,72,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,72,-30,-31,116,-85,72,72,72,-87,36,36,-63,36,72,72,72,72,72,36,36,-78,116,-81,72,-86,36,72,-75,-90,-91,-64,36,72,72,-60,72,-25,36,-93,-116,-117,-118,-46,-96,-92,-71,36,72,72,-61,-50,72,-107,72,72,72,-48,-94,-95,36,72,72,72,-56,-47,-108,-65,-110,-72,-119,-51,-57,72,72,-112,-109,72,-111,-114,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,77,80,83,84,85,87,91,92,94,96,100,101,103,104,105,108,109,118,119,120,122,124,125,128,130,133,139,141,149,154,159,161,162,164,165,166,167,172,174,176,180,181,183,184,185,186,189,190,193,195,196,199,200,205,208,213,214,217,224,227,234,240,244,245,246,247,251,253,254,255,257,260,261,266,],[37,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,73,-27,-29,-30,-31,-28,73,73,37,73,73,73,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,73,-30,-31,-85,73,73,73,-87,37,37,-63,37,73,73,73,73,73,37,37,-78,-81,73,-86,37,73,-75,-90,-91,-64,37,73,73,-60,73,-25,37,-93,-116,-117,-118,-46,-96,-92,-71,37,73,73,-61,-50,73,-107,73,73,73,-48,-94,-95,37,73,73,73,-56,-47,-108,-65,-110,-72,-119,-51,-57,73,73,-112,-109,73,-111,-114,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,74,77,80,83,84,85,87,91,92,94,96,100,101,103,104,105,108,109,117,118,119,120,122,124,125,128,130,133,139,141,149,152,154,159,161,162,164,165,166,167,172,174,176,180,181,183,184,185,186,189,190,193,195,196,199,200,205,208,213,214,217,224,225,227,234,240,244,245,246,247,251,253,254,255,257,259,260,261,265,266,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,34,-27,-29,-30,-31,-28,34,34,34,34,34,34,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,34,-30,-31,117,-85,34,34,34,-87,34,34,-63,140,34,34,34,34,34,34,34,-78,117,-81,34,-86,34,34,-75,-90,-91,-64,34,34,34,196,-60,34,-25,34,-93,-116,-117,-118,-46,-96,-92,-71,34,34,34,-61,-50,34,-107,34,34,34,-48,-94,-95,34,34,34,34,-56,239,-47,-108,-65,-110,-72,-119,-51,-57,34,34,-112,-109,263,34,-111,267,-114,]),'CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,77,80,83,84,85,87,91,92,94,96,100,101,103,104,105,108,109,118,119,120,122,124,125,128,130,133,139,141,149,154,159,161,162,164,165,166,167,172,174,176,180,181,183,184,185,186,189,190,193,195,196,199,200,205,208,213,214,217,224,227,234,240,244,245,246,247,251,253,254,255,257,260,261,266,],[38,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,38,-27,-29,-30,-31,-28,38,38,38,38,38,38,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,38,-30,-31,-85,38,38,38,-87,38,38,-63,38,38,38,38,38,38,38,38,-78,-81,38,-86,38,38,-75,-90,-91,-64,38,38,38,-60,38,-25,38,-93,-116,-117,-118,-46,-96,-92,-71,38,38,38,-61,-50,38,-107,38,38,38,-48,-94,-95,38,38,38,38,-56,-47,-108,-65,-110,-72,-119,-51,-57,38,38,-112,-109,38,-111,-114,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,40,42,43,45,48,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,76,77,80,81,83,84,85,87,90,91,92,94,96,100,101,103,104,105,106,108,109,118,119,120,122,124,125,128,130,133,134,135,139,141,149,154,159,161,162,164,165,166,167,172,174,176,180,181,183,184,185,186,189,190,193,195,196,199,200,205,208,213,214,217,224,227,234,240,242,244,245,246,247,251,253,254,255,257,260,261,266,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,69,-27,-29,-30,-31,-28,80,29,29,29,92,29,29,29,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,29,-30,-31,119,-85,29,124,29,29,-87,29,131,29,-63,29,29,29,29,29,29,29,158,29,-78,-81,29,-86,29,29,-75,-90,-91,-64,177,178,29,69,29,-60,29,-25,29,-93,-116,-117,-118,-46,-96,-92,-71,29,29,29,-61,-50,29,-107,29,29,29,-48,-94,-95,29,29,29,29,-56,-47,-108,-65,253,-110,-72,-119,-51,-57,29,29,-112,-109,29,-111,-114,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,77,85,109,118,120,125,128,130,154,164,165,166,167,172,174,176,180,186,190,199,200,205,224,227,234,240,244,245,246,247,251,255,257,261,266,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,-85,-87,-78,-81,-86,-75,-90,-91,-60,-93,-116,-117,-118,-46,-96,-92,-71,-50,-107,-48,-94,-95,-56,-47,-108,-65,-110,-72,-119,-51,-57,-112,-109,-111,-114,]),'RPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,44,70,72,73,77,82,83,85,86,87,89,102,103,109,118,120,123,125,126,127,128,129,130,131,132,133,136,137,138,139,140,144,145,148,154,155,156,157,160,161,162,164,165,166,167,172,174,175,176,180,182,185,186,188,190,197,199,200,201,202,204,205,209,210,212,214,215,216,224,226,227,230,231,232,233,234,235,236,237,239,240,241,244,245,246,247,248,251,252,255,257,261,264,266,267,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,85,-29,-30,-31,-85,125,-73,-87,128,-88,130,154,-58,-78,-81,-86,172,-75,-74,174,-90,-89,-91,175,176,-64,180,-68,-66,-67,-27,186,-49,190,-60,-59,199,200,-84,-25,-82,-93,-116,-117,-118,-46,-96,205,-92,-71,-69,-61,-50,212,-107,224,-48,-94,226,-83,227,-95,-70,232,234,-102,-105,-106,-56,240,-47,244,245,246,247,-108,248,-103,249,251,-65,252,-110,-72,-119,-51,-104,-57,257,-112,-109,-111,266,-114,-113,]),'DEFICION':([28,163,],[40,40,]),'LET':([28,163,],[41,41,]),'IMPRIMIR':([28,146,147,163,],[42,42,42,42,]),'DO':([28,88,163,],[45,45,45,]),'WHEN':([28,163,],[47,47,]),'DEFFUNCION':([28,163,],[48,48,]),'LOOP':([28,163,],[49,49,]),'COND':([28,163,],[50,50,]),'DOSEQ':([28,163,],[51,51,]),'CASE':([28,163,228,],[52,52,242,]),'LIST':([28,163,],[53,53,]),'DOTIMES':([28,163,],[55,55,]),'RECUR':([28,88,121,163,],[56,56,56,56,]),'MAS':([28,163,213,],[57,57,57,]),'MENOS':([28,163,213,],[58,58,58,]),'PRODUCTO':([28,163,213,],[59,59,59,]),'DIVISION':([28,163,213,],[60,60,60,]),'COMPARA_IGUAL':([28,78,163,],[62,62,62,]),'MENORQUE':([28,78,163,],[63,63,63,]),'MAYORQUE':([28,78,163,],[64,64,64,]),'MAYORIGUALQUE':([28,78,163,],[65,65,65,]),'MENORIGUALQUE':([28,78,163,],[66,66,66,]),'DIFERENTE':([28,78,163,],[67,67,67,]),'RCOR':([29,34,38,68,69,70,71,72,73,103,109,110,111,143,155,165,166,167,173,177,178,183,192,193,194,238,249,],[-32,-27,-28,109,-32,-29,-76,-30,-31,-58,-78,164,-77,185,-59,-116,-117,-118,204,206,207,-58,218,220,221,250,256,]),'DOSPUNTOS':([29,32,34,38,70,72,73,125,144,145,153,171,195,196,222,223,258,263,],[-32,76,-27,-28,-29,-30,-31,-75,187,-49,198,76,-52,-53,-54,-55,262,-115,]),'R_LLAVE':([29,34,38,70,72,73,75,112,113,114,115,116,117,168,169,170,171,203,],[-32,-27,-28,-29,-30,-31,118,165,166,167,-120,-122,-124,-121,-123,-125,-79,-80,]),'INCREASE':([48,],[93,]),'INC':([107,],[159,]),'PRN':([147,],[189,]),'ELSE':([187,198,262,],[211,225,265,]),'RANGE':([191,],[217,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,45,87,91,94,105,108,122,139,162,181,208,],[1,87,87,133,133,133,133,133,133,133,133,133,]),'asignacion':([0,45,87,91,94,105,108,122,139,162,181,208,],[2,2,2,2,2,2,2,2,2,2,2,2,]),'impresion':([0,45,87,91,94,98,99,105,108,122,139,152,153,162,181,208,211,],[3,3,3,3,3,145,148,3,3,3,3,195,197,3,3,3,233,]),'operacion_aritmetica':([0,45,87,91,94,105,108,122,139,162,181,189,208,],[4,4,4,4,4,4,4,4,4,4,4,216,4,]),'conjuntos':([0,45,87,91,94,105,108,122,139,150,151,162,181,208,],[5,5,5,5,5,5,5,5,5,192,194,5,5,5,]),'vector':([0,45,87,91,94,100,105,108,122,139,150,162,181,208,219,],[6,6,6,6,6,151,6,6,6,6,193,6,6,6,238,]),'mapa':([0,45,87,91,94,105,108,122,139,162,181,208,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'if':([0,28,45,87,91,94,105,108,122,139,142,162,163,179,181,208,229,],[8,46,8,8,8,8,8,8,8,8,184,8,46,208,8,8,243,]),'do':([0,45,46,87,91,94,105,108,122,139,162,181,208,],[9,9,89,9,9,9,9,9,9,9,9,9,9,]),'if_do':([0,45,87,91,94,105,108,122,139,162,181,208,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'when':([0,45,87,91,94,105,108,122,139,162,181,208,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'defn':([0,45,87,91,94,105,108,122,139,162,181,208,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'defn_with_return':([0,45,87,91,94,105,108,122,139,162,181,208,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'operacionesLogicas':([0,45,87,91,94,105,108,122,139,162,181,207,208,],[14,14,14,14,14,14,14,14,14,14,14,230,14,]),'sentenciaLoopRecur':([0,45,87,91,94,105,108,122,139,162,181,208,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'cond_':([0,45,87,91,94,105,108,122,139,162,181,208,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'cond_else':([0,45,87,91,94,105,108,122,139,162,181,208,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'doseq':([0,45,87,91,94,105,108,122,139,162,181,208,],[18,18,18,18,18,18,18,18,18,18,18,18,]),'case_expression':([0,45,87,91,94,105,108,122,139,162,181,208,],[19,19,19,19,19,19,19,19,19,19,19,19,]),'lista':([0,45,87,91,94,105,108,122,139,162,181,208,],[20,20,20,20,20,20,20,20,20,20,20,20,]),'sentencia_booleana':([0,33,45,47,50,61,79,87,91,94,97,105,108,122,139,162,181,208,],[21,77,21,91,98,108,122,21,21,21,98,21,21,21,21,21,21,21,]),'function':([0,45,87,91,94,105,108,122,139,162,181,208,],[22,22,22,22,22,22,22,22,22,22,22,22,]),'dotimes':([0,45,87,91,94,105,108,122,139,162,181,208,],[23,23,23,23,23,23,23,23,23,23,23,23,]),'ciclo':([0,45,55,87,91,94,105,108,122,139,162,181,208,],[24,24,105,24,24,24,24,24,24,24,24,24,24,]),'valor':([0,45,87,91,94,105,108,122,139,162,181,208,],[25,25,25,25,25,25,25,25,25,25,25,25,]),'recur':([0,45,46,77,87,91,94,105,108,122,139,162,181,208,243,],[26,26,90,120,26,26,26,26,161,26,26,26,26,26,90,]),'dato':([0,30,42,43,45,52,53,54,71,80,83,84,87,91,94,96,100,101,103,104,105,108,119,122,124,139,141,149,159,162,181,183,184,189,193,195,196,208,213,214,217,253,254,260,],[27,71,83,84,27,101,103,104,71,123,83,127,27,27,27,103,150,152,103,156,27,27,171,27,173,27,183,71,201,27,27,183,210,214,219,152,152,27,235,214,237,259,260,264,]),'operador_aritmetico':([28,163,213,],[43,43,43,]),'secuencia_if':([28,39,163,],[44,44,44,]),'operador_comparadores':([28,78,163,],[54,54,54,]),'secuencia_v':([30,71,141,149,183,],[68,111,68,68,111,]),'secuencia_mapa':([32,171,],[75,203,]),'info_imprimir':([42,83,],[82,126,]),'secuencia_do':([45,87,],[86,129,]),'nombre_funct':([48,],[94,]),'argumments':([49,94,138,],[95,139,181,]),'linecondition':([50,97,],[97,144,]),'doseq_args':([51,],[99,]),'argumentos_lista':([53,96,103,141,183,],[102,143,155,143,155,]),'expresionConjuntoEnteros':([74,115,],[112,168,]),'expresionConjuntoDouble':([74,116,],[113,169,]),'expresionConjuntoString':([74,117,],[114,170,]),'body':([91,94,105,108,122,139,162,181,208,],[132,137,157,162,162,182,162,209,231,]),'internos':([94,],[136,]),'description':([94,],[138,]),'case':([101,195,196,],[153,222,223,]),'secuencia_expresion_if':([108,122,162,],[160,160,202,]),'doseq_prn':([147,],[188,]),'pnr_dato':([189,214,],[215,236,]),'expresionDefnElse':([228,],[241,]),'defn_return':([244,257,],[255,261,]),'expresionCase':([253,],[258,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> operacion_aritmetica','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> vector','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> mapa','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> if','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> do','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> if_do','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> when','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> defn_with_return','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',22),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',23),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',24),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',25),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',26),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',27),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',28),
  ('instrucciones -> function','instrucciones',1,'p_instrucciones','clojure_sin.py',29),
  ('instrucciones -> dotimes','instrucciones',1,'p_instrucciones','clojure_sin.py',30),
  ('instrucciones -> ciclo','instrucciones',1,'p_instrucciones','clojure_sin.py',31),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','clojure_sin.py',32),
  ('instrucciones -> recur','instrucciones',1,'p_instrucciones','clojure_sin.py',33),
  ('instrucciones -> dato','instrucciones',1,'p_instrucciones','clojure_sin.py',34),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',40),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',41),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',42),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',43),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',44),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',45),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',50),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',51),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',52),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',58),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',59),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',60),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',61),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',62),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',63),
  ('operador_aritmetico -> MAS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',68),
  ('operador_aritmetico -> MENOS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',69),
  ('operador_aritmetico -> PRODUCTO','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',70),
  ('operador_aritmetico -> DIVISION','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',71),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',76),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',77),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',87),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',93),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',100),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',106),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',119),
  ('case -> dato STRING','case',2,'p_case','clojure_sin.py',120),
  ('case -> dato impresion case','case',3,'p_case','clojure_sin.py',121),
  ('case -> dato STRING case','case',3,'p_case','clojure_sin.py',122),
  ('case_expression -> LPAREN CASE dato case impresion RPAREN','case_expression',6,'p_case_expression','clojure_sin.py',132),
  ('case_expression -> LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN','case_expression',8,'p_case_expression','clojure_sin.py',133),
  ('argumentos_lista -> dato','argumentos_lista',1,'p_argumentos_lista','clojure_sin.py',143),
  ('argumentos_lista -> dato argumentos_lista','argumentos_lista',2,'p_argumentos_lista','clojure_sin.py',144),
  ('lista -> LPAREN LIST argumentos_lista RPAREN','lista',4,'p_lista','clojure_sin.py',153),
  ('argumments -> LCOR argumentos_lista RCOR','argumments',3,'p_argumments','clojure_sin.py',158),
  ('description -> STRING','description',1,'p_description','clojure_sin.py',162),
  ('nombre_funct -> VARIABLE','nombre_funct',1,'p_nombre_funct','clojure_sin.py',166),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',170),
  ('recur -> LPAREN RECUR LPAREN INC dato RPAREN RPAREN','recur',7,'p_recur','clojure_sin.py',175),
  ('internos -> description','internos',1,'p_internos','clojure_sin.py',180),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',181),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',182),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',183),
  ('internos -> description argumments body','internos',3,'p_internos','clojure_sin.py',184),
  ('function -> LPAREN DEFFUNCION nombre_funct internos RPAREN','function',5,'p_function','clojure_sin.py',204),
  ('function -> LPAREN DEFFUNCION nombre_funct internos LPAREN if body RPAREN','function',8,'p_function','clojure_sin.py',205),
  ('info_imprimir -> dato','info_imprimir',1,'p_datos_impresion','clojure_sin.py',213),
  ('info_imprimir -> dato info_imprimir','info_imprimir',2,'p_datos_impresion','clojure_sin.py',214),
  ('impresion -> LPAREN IMPRIMIR info_imprimir RPAREN','impresion',4,'p_impresion','clojure_sin.py',222),
  ('secuencia_v -> dato','secuencia_v',1,'p_secuencia_vector','clojure_sin.py',230),
  ('secuencia_v -> dato secuencia_v','secuencia_v',2,'p_secuencia_vector','clojure_sin.py',231),
  ('vector -> LCOR secuencia_v RCOR','vector',3,'p_vector','clojure_sin.py',240),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato','secuencia_mapa',3,'p_secuencia_mapa','clojure_sin.py',248),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato secuencia_mapa','secuencia_mapa',4,'p_secuencia_mapa','clojure_sin.py',249),
  ('mapa -> L_LLAVE secuencia_mapa R_LLAVE','mapa',3,'p_mapa','clojure_sin.py',255),
  ('secuencia_expresion_if -> body','secuencia_expresion_if',1,'p_secuencia_expresion_if','clojure_sin.py',260),
  ('secuencia_expresion_if -> body secuencia_expresion_if','secuencia_expresion_if',2,'p_secuencia_expresion_if','clojure_sin.py',261),
  ('secuencia_if -> IF sentencia_booleana secuencia_expresion_if','secuencia_if',3,'p_secuencia_if','clojure_sin.py',269),
  ('if -> IF sentencia_booleana','if',2,'p_if','clojure_sin.py',273),
  ('if -> IF sentencia_booleana recur','if',3,'p_if','clojure_sin.py',274),
  ('if -> LPAREN secuencia_if RPAREN','if',3,'p_if','clojure_sin.py',275),
  ('secuencia_do -> instrucciones','secuencia_do',1,'p_secuencia_do','clojure_sin.py',287),
  ('secuencia_do -> instrucciones secuencia_do','secuencia_do',2,'p_secuencia_do','clojure_sin.py',288),
  ('do -> LPAREN DO secuencia_do RPAREN','do',4,'p_do','clojure_sin.py',296),
  ('if_do -> LPAREN if do RPAREN','if_do',4,'p_if_do','clojure_sin.py',301),
  ('when -> LPAREN WHEN sentencia_booleana body RPAREN','when',5,'p_when','clojure_sin.py',306),
  ('ciclo -> LCOR VARIABLE ENTERO RCOR','ciclo',4,'p_ciclo','clojure_sin.py',311),
  ('dotimes -> LPAREN DOTIMES ciclo body RPAREN','dotimes',5,'p_dotimes','clojure_sin.py',316),
  ('operacionesLogicas -> LPAREN if recur VARIABLE RPAREN RPAREN','operacionesLogicas',6,'p_operacionesLogicas','clojure_sin.py',321),
  ('operacion_aritmetica -> LPAREN operador_aritmetico dato dato RPAREN','operacion_aritmetica',5,'p_operacion_aritmetica1','clojure_sin.py',326),
  ('doseq_args -> LCOR dato LPAREN RANGE dato RPAREN RCOR','doseq_args',7,'p_doseq_args','clojure_sin.py',332),
  ('doseq_args -> LCOR dato conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',333),
  ('doseq_args -> LCOR dato vector dato vector RCOR','doseq_args',6,'p_doseq_args','clojure_sin.py',334),
  ('doseq_args -> LCOR vector conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',335),
  ('doseq_args -> LCOR dato vector RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',336),
  ('pnr_dato -> dato','pnr_dato',1,'p_pnr_dato','clojure_sin.py',347),
  ('pnr_dato -> dato pnr_dato','pnr_dato',2,'p_pnr_dato','clojure_sin.py',348),
  ('doseq_prn -> PRN LPAREN dato RPAREN','doseq_prn',4,'p_doseq_prn','clojure_sin.py',357),
  ('doseq_prn -> PRN pnr_dato','doseq_prn',2,'p_doseq_prn','clojure_sin.py',358),
  ('doseq_prn -> PRN operacion_aritmetica','doseq_prn',2,'p_doseq_prn','clojure_sin.py',359),
  ('doseq -> LPAREN DOSEQ doseq_args impresion RPAREN','doseq',5,'p_doseq','clojure_sin.py',373),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',374),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',383),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',384),
  ('defn_with_return -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return','defn_with_return',11,'p_defn_with_return','clojure_sin.py',393),
  ('defn_with_return -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return','defn_with_return',9,'p_defn_with_return','clojure_sin.py',394),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',404),
  ('defn_return -> LPAREN dato dato RPAREN','defn_return',4,'p_defn_return','clojure_sin.py',409),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',414),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',420),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',421),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',422),
  ('sentenciaLoopRecur -> LPAREN LOOP argumments LPAREN if dato RPAREN RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',429),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',435),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',436),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',446),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',447),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',456),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',457),
]
