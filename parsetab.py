
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CASE CLASE COMPARA_IGUAL COND DEFFUNCION DEFICION DEFMACRO DIFERENTE DIVISION DO DOSEQ DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR LCOR LET LOOP LPAREN L_LLAVE MAS MAYORQUE MENORQUE MENOS NUEVO PRODUCTO PUNTO_COMA RCOR RECURSION RPAREN R_LLAVE VARIABLE WHENinstrucciones : asignacion\n                    | impresion\n                    | sumatoria\n                    | diferencia\n                    | producto\n                    | divisionasignacion : VARIABLE IGUAL valorimpresion : IMPRIMIR LPAREN valor RPARENvalor : ENTERO\n          | FLOTANTE\n          valor : VARIABLEoperacion : MAS\n          | MENOS\n          | PRODUCTO\n          | DIVISIONsumatoria : LPAREN operacion valor valor RPARENdiferencia : LPAREN operacion valor valor RPARENproducto : LPAREN operacion valor valor RPARENdivision : LPAREN operacion valor valor RPAREN'
    
_lr_action_items = {'VARIABLE':([0,11,12,13,14,15,16,17,18,20,21,23,],[8,18,18,18,-12,-13,-14,-15,-11,-9,-10,18,]),'IMPRIMIR':([0,],[9,]),'LPAREN':([0,9,],[10,12,]),'$end':([1,2,3,4,5,6,7,18,19,20,21,24,26,],[0,-1,-2,-3,-4,-5,-6,-11,-7,-9,-10,-8,-16,]),'IGUAL':([8,],[11,]),'MAS':([10,],[14,]),'MENOS':([10,],[15,]),'PRODUCTO':([10,],[16,]),'DIVISION':([10,],[17,]),'ENTERO':([11,12,13,14,15,16,17,18,20,21,23,],[20,20,20,-12,-13,-14,-15,-11,-9,-10,20,]),'FLOTANTE':([11,12,13,14,15,16,17,18,20,21,23,],[21,21,21,-12,-13,-14,-15,-11,-9,-10,21,]),'RPAREN':([18,20,21,22,25,],[-11,-9,-10,24,26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,],[1,]),'asignacion':([0,],[2,]),'impresion':([0,],[3,]),'sumatoria':([0,],[4,]),'diferencia':([0,],[5,]),'producto':([0,],[6,]),'division':([0,],[7,]),'operacion':([10,],[13,]),'valor':([11,12,13,23,],[19,22,23,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',6),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',7),
  ('instrucciones -> sumatoria','instrucciones',1,'p_instrucciones','clojure_sin.py',8),
  ('instrucciones -> diferencia','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> producto','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> division','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('asignacion -> VARIABLE IGUAL valor','asignacion',3,'p_asignacion','clojure_sin.py',13),
  ('impresion -> IMPRIMIR LPAREN valor RPAREN','impresion',4,'p_impresion','clojure_sin.py',16),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',19),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',20),
  ('valor -> VARIABLE','valor',1,'p_valor_variable','clojure_sin.py',23),
  ('operacion -> MAS','operacion',1,'p_aritmetica1','clojure_sin.py',27),
  ('operacion -> MENOS','operacion',1,'p_aritmetica1','clojure_sin.py',28),
  ('operacion -> PRODUCTO','operacion',1,'p_aritmetica1','clojure_sin.py',29),
  ('operacion -> DIVISION','operacion',1,'p_aritmetica1','clojure_sin.py',30),
  ('sumatoria -> LPAREN operacion valor valor RPAREN','sumatoria',5,'p_suma','clojure_sin.py',33),
  ('diferencia -> LPAREN operacion valor valor RPAREN','diferencia',5,'p_resta','clojure_sin.py',36),
  ('producto -> LPAREN operacion valor valor RPAREN','producto',5,'p_multiplicacion','clojure_sin.py',39),
  ('division -> LPAREN operacion valor valor RPAREN','division',5,'p_division','clojure_sin.py',42),
]
