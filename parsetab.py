
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BOOLEAN CASE CHAR CLASE COMPARA_IGUAL COND CONJUNTOS DEFFUNCION DEFICION DIFERENTE DIVISION DO DOSEQ DOSPUNTOS DOTIMES ELSE ENTERO FLOTANTE FUNCION FUTURE IF IGUAL IMPRIMIR INC INCREASE INPUT LCOR LET LIST LISTA LOOP LPAREN L_LLAVE MAPA MAS MAYORIGUALQUE MAYORQUE MENORIGUALQUE MENORQUE MENOS NOT NS NUEVO NUMERAL PRN PRODUCTO RANGE RCOR RECUR RPAREN R_LLAVE STR STRING VARIABLE VECTOR WHENinstrucciones : asignacion\n                    | impresion\n                    | operacion_aritmetica\n                    | conjuntos\n                    | vector\n                    | mapa\n                    | if\n                    | do\n                    | if_do\n                    | when\n                    | defn\n                    | defn_with_return\n                    | operacionesLogicas\n                    | sentenciaLoopRecur\n                    | cond_\n                    | cond_else\n                    | doseq\n                    | case_expression\n                    | lista\n                    | sentencia_booleana\n                    | function\n                    | dotimes\n                    | ciclo\n                    | valor\n                    | recur\n                    | dato\n                    dato : STRING\n            | CHAR\n            | ENTERO\n            | FLOTANTE\n            | BOOLEAN\n            | VARIABLE valor : ENTERO\n          | FLOTANTE\n          | BOOLEAN\n          operador_comparadores : COMPARA_IGUAL\n                | MENORQUE\n                | MAYORQUE\n                | MAYORIGUALQUE\n                | MENORIGUALQUE\n                | DIFERENTEoperador_aritmetico : MAS\n                  | MENOS\n                  | PRODUCTO\n                  | DIVISION asignacion : LPAREN DEFICION VARIABLE dato RPAREN\n                | LPAREN LET LCOR VARIABLE dato RCOR RPARENsentencia_booleana : LPAREN operador_comparadores dato dato RPARENlinecondition : sentencia_booleana impresioncond_ : LPAREN COND linecondition linecondition RPARENcond_else : LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPARENcase : dato impresion\n            | dato STRING\n            | dato impresion case\n            | dato STRING case\n    case_expression : LPAREN CASE dato case impresion RPAREN\n                        | LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN\n    argumentos_lista : dato\n                        | dato argumentos_listalista : LPAREN LIST argumentos_lista RPARENargumments : LCOR argumentos_lista RCORdescription : STRINGnombre_funct : VARIABLEbody : instruccionesrecur : LPAREN RECUR LPAREN INC dato RPAREN RPARENinternos : description\n                | argumments\n                | body\n                | argumments body\n                | description argumments bodyfunction : LPAREN DEFFUNCION nombre_funct internos RPAREN\n                | LPAREN DEFFUNCION nombre_funct internos LPAREN if body RPAREN\n    info_imprimir : dato\n                    | dato info_imprimir\n    impresion : LPAREN IMPRIMIR info_imprimir RPAREN secuencia_v : dato \n                    | dato secuencia_v\n    vector : LCOR secuencia_v RCOR secuencia_mapa : DOSPUNTOS VARIABLE dato \n                        | DOSPUNTOS VARIABLE dato secuencia_mapa\n    mapa : L_LLAVE secuencia_mapa R_LLAVEsecuencia_expresion_if : body\n        | body secuencia_expresion_if\n    secuencia_if : IF sentencia_booleana secuencia_expresion_ifif : IF sentencia_booleana\n          | IF sentencia_booleana recur\n          | LPAREN secuencia_if RPAREN\n    do : LPAREN DO instrucciones RPARENif_do : LPAREN if do RPARENwhen : LPAREN WHEN sentencia_booleana body RPARENciclo : LCOR VARIABLE ENTERO RCORdotimes : LPAREN DOTIMES ciclo body RPARENoperacionesLogicas : LPAREN if recur VARIABLE RPAREN RPARENoperacion_aritmetica : LPAREN operador_aritmetico dato dato RPARENdoseq_args : LCOR dato LPAREN RANGE dato RPAREN RCOR\n                    | LCOR dato conjuntos RCOR\n                    | LCOR dato vector dato vector RCOR\n                    | LCOR vector conjuntos RCOR\n                    | LCOR dato vector RCOR\n    pnr_dato : dato\n            | dato pnr_dato\n    doseq_prn : PRN LPAREN dato RPAREN\n                | PRN pnr_dato\n                | PRN operacion_aritmetica\n    doseq : LPAREN DOSEQ doseq_args impresion RPAREN\n            | LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN\n    defn : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN\n             | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN\n    defn_with_return : LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return\n                        | LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return\n\n      expresionDefnElse : CASE VARIABLE expresionCase DOSPUNTOS ELSE STRINGdefn_return : LPAREN dato dato RPARENexpresionCase : dato STRINGconjuntos : NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE\n                | NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE\n                | NUMERAL L_LLAVE expresionConjuntoString R_LLAVE\n      sentenciaLoopRecur : LPAREN LOOP argumments LPAREN if dato RPAREN RPARENexpresionConjuntoEnteros : ENTERO\n                                 | ENTERO expresionConjuntoEnteros\n    expresionConjuntoDouble : FLOTANTE\n                     | FLOTANTE expresionConjuntoDouble\n    expresionConjuntoString : STRING\n                                  | STRING expresionConjuntoString\n    '
    
_lr_action_items = {'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33,34,35,36,37,38,45,46,47,50,56,61,70,72,73,77,79,85,90,91,93,94,96,97,98,104,107,108,117,119,121,124,127,128,131,134,135,136,137,138,140,143,148,150,151,152,159,160,161,162,163,164,165,170,172,174,177,178,179,180,183,184,187,188,193,194,197,198,203,204,205,206,207,209,216,218,219,220,221,222,225,227,232,238,241,242,243,244,245,248,249,253,254,255,259,264,],[28,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,39,-32,78,-27,-29,-30,-31,-28,28,87,78,78,106,78,-29,-30,-31,120,78,-87,28,-63,28,140,78,144,145,28,161,-78,-81,-86,28,-75,-88,-89,-64,177,-68,-66,28,-27,39,-49,189,144,144,-60,-25,28,39,-91,-114,-115,-116,-46,-94,-90,39,-71,28,-69,-61,-50,211,-105,-52,-53,-48,-92,-93,226,227,28,-70,144,-96,-99,-98,-54,-55,-56,-47,39,-106,-65,120,252,-72,-117,-51,-97,-57,-110,-95,252,-109,-112,]),'NUMERAL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,45,70,72,73,77,85,90,91,93,104,107,108,117,119,121,124,127,128,131,137,148,149,152,159,160,162,163,164,165,170,172,174,178,179,183,184,188,197,198,203,206,222,225,232,238,242,243,244,245,249,253,255,259,264,],[31,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,31,-29,-30,-31,-85,-87,31,-63,31,31,31,-78,-81,-86,31,-75,-88,-89,-64,31,31,31,-60,-25,31,-91,-114,-115,-116,-46,-94,-90,-71,31,-61,-50,-105,-48,-92,-93,31,-56,-47,-106,-65,-108,-72,-117,-51,-57,-110,-107,-109,-112,]),'LCOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,41,45,49,51,55,70,72,73,77,85,90,91,92,93,99,104,107,108,117,119,121,124,127,128,131,136,137,138,148,152,159,160,162,163,164,165,170,172,174,178,179,183,184,188,197,198,203,206,217,222,225,232,238,242,243,244,245,249,253,255,259,264,],[30,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,81,30,95,99,105,-29,-30,-31,-85,-87,30,132,133,139,147,30,30,-78,-81,-86,30,-75,-88,-89,-64,95,30,-62,147,-60,-25,30,-91,-114,-115,-116,-46,-94,-90,-71,30,-61,-50,-105,-48,-92,-93,30,147,-56,-47,-106,-65,-108,-72,-117,-51,-57,-110,-107,-109,-112,]),'L_LLAVE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,31,34,35,36,37,38,45,77,85,90,91,93,104,107,108,117,119,121,124,127,128,131,137,152,159,160,162,163,164,165,170,172,174,178,179,183,184,188,197,198,203,206,222,225,232,238,242,243,244,245,249,253,255,259,264,],[32,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,74,-27,-29,-30,-31,-28,32,-85,-87,32,-63,32,32,32,-78,-81,-86,32,-75,-88,-89,-64,32,-60,-25,32,-91,-114,-115,-116,-46,-94,-90,-71,32,-61,-50,-105,-48,-92,-93,32,-56,-47,-106,-65,-108,-72,-117,-51,-57,-110,-107,-109,-112,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,34,35,36,37,38,39,45,77,85,90,91,93,104,107,108,117,119,121,124,127,128,131,137,140,152,159,160,161,162,163,164,165,170,172,174,177,178,179,183,184,188,197,198,203,206,222,225,227,232,238,242,243,244,245,249,253,255,259,264,],[33,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,61,-32,-27,-29,-30,-31,-28,79,33,-85,-87,33,-63,33,33,33,-78,-81,-86,33,-75,-88,-89,-64,33,33,-60,-25,33,61,-91,-114,-115,-116,-46,-94,-90,33,-71,33,-61,-50,-105,-48,-92,-93,33,-56,-47,33,-106,-65,-108,-72,-117,-51,-57,-110,-107,-109,-112,]),'ENTERO':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,74,77,80,83,84,85,90,91,93,95,99,100,102,103,104,107,108,114,117,118,119,121,123,124,127,128,131,137,139,147,152,156,157,159,160,162,163,164,165,170,172,174,178,179,181,182,183,184,187,188,191,193,194,197,198,203,206,211,212,215,222,225,232,238,242,243,244,245,249,251,252,253,255,258,259,264,],[35,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,70,-27,-29,-30,-31,-28,70,70,35,70,70,70,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,109,-29,70,-30,-31,114,-85,70,70,70,-87,35,-63,35,70,70,70,70,70,35,35,-78,114,-81,70,-86,35,70,-75,-88,-89,-64,35,70,70,-60,109,70,-25,35,-91,-114,-115,-116,-46,-94,-90,-71,35,70,70,-61,-50,70,-105,70,70,70,-48,-92,-93,35,70,70,70,-56,-47,-106,-65,-108,-72,-117,-51,-57,70,70,-110,-107,70,-109,-112,]),'FLOTANTE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,74,77,80,83,84,85,90,91,93,95,99,100,102,103,104,107,108,115,117,118,119,121,123,124,127,128,131,137,139,147,152,157,159,160,162,163,164,165,170,172,174,178,179,181,182,183,184,187,188,191,193,194,197,198,203,206,211,212,215,222,225,232,238,242,243,244,245,249,251,252,253,255,258,259,264,],[36,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,72,-27,-29,-30,-31,-28,72,72,36,72,72,72,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,72,-30,-31,115,-85,72,72,72,-87,36,-63,36,72,72,72,72,72,36,36,-78,115,-81,72,-86,36,72,-75,-88,-89,-64,36,72,72,-60,72,-25,36,-91,-114,-115,-116,-46,-94,-90,-71,36,72,72,-61,-50,72,-105,72,72,72,-48,-92,-93,36,72,72,72,-56,-47,-106,-65,-108,-72,-117,-51,-57,72,72,-110,-107,72,-109,-112,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,77,80,83,84,85,90,91,93,95,99,100,102,103,104,107,108,117,118,119,121,123,124,127,128,131,137,139,147,152,157,159,160,162,163,164,165,170,172,174,178,179,181,182,183,184,187,188,191,193,194,197,198,203,206,211,212,215,222,225,232,238,242,243,244,245,249,251,252,253,255,258,259,264,],[37,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,73,-27,-29,-30,-31,-28,73,73,37,73,73,73,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,73,-30,-31,-85,73,73,73,-87,37,-63,37,73,73,73,73,73,37,37,-78,-81,73,-86,37,73,-75,-88,-89,-64,37,73,73,-60,73,-25,37,-91,-114,-115,-116,-46,-94,-90,-71,37,73,73,-61,-50,73,-105,73,73,73,-48,-92,-93,37,73,73,73,-56,-47,-106,-65,-108,-72,-117,-51,-57,73,73,-110,-107,73,-109,-112,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,74,77,80,83,84,85,90,91,93,95,99,100,102,103,104,107,108,116,117,118,119,121,123,124,127,128,131,137,139,147,150,152,157,159,160,162,163,164,165,170,172,174,178,179,181,182,183,184,187,188,191,193,194,197,198,203,206,211,212,215,222,223,225,232,238,242,243,244,245,249,251,252,253,255,257,258,259,263,264,],[34,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,34,-27,-29,-30,-31,-28,34,34,34,34,34,34,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,34,-30,-31,116,-85,34,34,34,-87,34,-63,138,34,34,34,34,34,34,34,-78,116,-81,34,-86,34,34,-75,-88,-89,-64,34,34,34,194,-60,34,-25,34,-91,-114,-115,-116,-46,-94,-90,-71,34,34,34,-61,-50,34,-105,34,34,34,-48,-92,-93,34,34,34,34,-56,237,-47,-106,-65,-108,-72,-117,-51,-57,34,34,-110,-107,261,34,-109,265,-112,]),'CHAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,42,43,45,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,77,80,83,84,85,90,91,93,95,99,100,102,103,104,107,108,117,118,119,121,123,124,127,128,131,137,139,147,152,157,159,160,162,163,164,165,170,172,174,178,179,181,182,183,184,187,188,191,193,194,197,198,203,206,211,212,215,222,225,232,238,242,243,244,245,249,251,252,253,255,258,259,264,],[38,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,38,-27,-29,-30,-31,-28,38,38,38,38,38,38,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,38,-30,-31,-85,38,38,38,-87,38,-63,38,38,38,38,38,38,38,38,-78,-81,38,-86,38,38,-75,-88,-89,-64,38,38,38,-60,38,-25,38,-91,-114,-115,-116,-46,-94,-90,-71,38,38,38,-61,-50,38,-105,38,38,38,-48,-92,-93,38,38,38,38,-56,-47,-106,-65,-108,-72,-117,-51,-57,38,38,-110,-107,38,-109,-112,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,34,35,36,37,38,40,42,43,45,48,52,53,54,57,58,59,60,62,63,64,65,66,67,69,70,71,72,73,76,77,80,81,83,84,85,89,90,91,93,95,99,100,102,103,104,105,107,108,117,118,119,121,123,124,127,128,131,132,133,137,139,147,152,157,159,160,162,163,164,165,170,172,174,178,179,181,182,183,184,187,188,191,193,194,197,198,203,206,211,212,215,222,225,232,238,240,242,243,244,245,249,251,252,253,255,258,259,264,],[29,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,69,-27,-29,-30,-31,-28,80,29,29,29,91,29,29,29,-42,-43,-44,-45,-36,-37,-38,-39,-40,-41,-32,-29,29,-30,-31,118,-85,29,123,29,29,-87,129,29,-63,29,29,29,29,29,29,29,156,29,-78,-81,29,-86,29,29,-75,-88,-89,-64,175,176,29,69,29,-60,29,-25,29,-91,-114,-115,-116,-46,-94,-90,-71,29,29,29,-61,-50,29,-105,29,29,29,-48,-92,-93,29,29,29,29,-56,-47,-106,-65,251,-108,-72,-117,-51,-57,29,29,-110,-107,29,-109,-112,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,77,85,108,117,119,124,127,128,152,162,163,164,165,170,172,174,178,184,188,197,198,203,222,225,232,238,242,243,244,245,249,253,255,259,264,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,-85,-87,-78,-81,-86,-75,-88,-89,-60,-91,-114,-115,-116,-46,-94,-90,-71,-50,-105,-48,-92,-93,-56,-47,-106,-65,-108,-72,-117,-51,-57,-110,-107,-109,-112,]),'RPAREN':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,34,35,36,37,38,44,70,72,73,77,82,83,85,86,88,101,102,108,117,119,122,124,125,126,127,128,129,130,131,134,135,136,137,138,142,143,146,152,153,154,155,158,159,160,162,163,164,165,170,172,173,174,178,180,183,184,186,188,195,197,198,199,200,202,203,207,208,210,212,213,214,222,224,225,228,229,230,231,232,233,234,235,237,238,239,242,243,244,245,246,249,250,253,255,259,262,264,265,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-32,-27,-29,-30,-31,-28,85,-29,-30,-31,-85,124,-73,-87,127,128,152,-58,-78,-81,-86,170,-75,-74,172,-88,-89,173,174,-64,178,-68,-66,-67,-27,184,-49,188,-60,-59,197,198,-84,-25,-82,-91,-114,-115,-116,-46,-94,203,-90,-71,-69,-61,-50,210,-105,222,-48,-92,224,-83,225,-93,-70,230,232,-100,-103,-104,-56,238,-47,242,243,244,245,-106,246,-101,247,249,-65,250,-108,-72,-117,-51,-102,-57,255,-110,-107,-109,264,-112,-111,]),'DEFICION':([28,161,],[40,40,]),'LET':([28,161,],[41,41,]),'IMPRIMIR':([28,144,145,161,],[42,42,42,42,]),'DO':([28,87,161,],[45,45,45,]),'WHEN':([28,161,],[47,47,]),'DEFFUNCION':([28,161,],[48,48,]),'LOOP':([28,161,],[49,49,]),'COND':([28,161,],[50,50,]),'DOSEQ':([28,161,],[51,51,]),'CASE':([28,161,226,],[52,52,240,]),'LIST':([28,161,],[53,53,]),'DOTIMES':([28,161,],[55,55,]),'RECUR':([28,87,120,161,],[56,56,56,56,]),'MAS':([28,161,211,],[57,57,57,]),'MENOS':([28,161,211,],[58,58,58,]),'PRODUCTO':([28,161,211,],[59,59,59,]),'DIVISION':([28,161,211,],[60,60,60,]),'COMPARA_IGUAL':([28,78,161,],[62,62,62,]),'MENORQUE':([28,78,161,],[63,63,63,]),'MAYORQUE':([28,78,161,],[64,64,64,]),'MAYORIGUALQUE':([28,78,161,],[65,65,65,]),'MENORIGUALQUE':([28,78,161,],[66,66,66,]),'DIFERENTE':([28,78,161,],[67,67,67,]),'RCOR':([29,34,38,68,69,70,71,72,73,102,108,109,110,141,153,163,164,165,171,175,176,181,190,191,192,236,247,],[-32,-27,-28,108,-32,-29,-76,-30,-31,-58,-78,162,-77,183,-59,-114,-115,-116,202,204,205,-58,216,218,219,248,254,]),'DOSPUNTOS':([29,32,34,38,70,72,73,124,142,143,151,169,193,194,220,221,256,261,],[-32,76,-27,-28,-29,-30,-31,-75,185,-49,196,76,-52,-53,-54,-55,260,-113,]),'R_LLAVE':([29,34,38,70,72,73,75,111,112,113,114,115,116,166,167,168,169,201,],[-32,-27,-28,-29,-30,-31,117,163,164,165,-118,-120,-122,-119,-121,-123,-79,-80,]),'INCREASE':([48,],[92,]),'INC':([106,],[157,]),'PRN':([145,],[187,]),'ELSE':([185,196,260,],[209,223,263,]),'RANGE':([189,],[215,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instrucciones':([0,45,90,93,104,107,121,137,160,179,206,],[1,86,131,131,131,131,131,131,131,131,131,]),'asignacion':([0,45,90,93,104,107,121,137,160,179,206,],[2,2,2,2,2,2,2,2,2,2,2,]),'impresion':([0,45,90,93,97,98,104,107,121,137,150,151,160,179,206,209,],[3,3,3,3,143,146,3,3,3,3,193,195,3,3,3,231,]),'operacion_aritmetica':([0,45,90,93,104,107,121,137,160,179,187,206,],[4,4,4,4,4,4,4,4,4,4,214,4,]),'conjuntos':([0,45,90,93,104,107,121,137,148,149,160,179,206,],[5,5,5,5,5,5,5,5,190,192,5,5,5,]),'vector':([0,45,90,93,99,104,107,121,137,148,160,179,206,217,],[6,6,6,6,149,6,6,6,6,191,6,6,6,236,]),'mapa':([0,45,90,93,104,107,121,137,160,179,206,],[7,7,7,7,7,7,7,7,7,7,7,]),'if':([0,28,45,90,93,104,107,121,137,140,160,161,177,179,206,227,],[8,46,8,8,8,8,8,8,8,182,8,46,206,8,8,241,]),'do':([0,45,46,90,93,104,107,121,137,160,179,206,],[9,9,88,9,9,9,9,9,9,9,9,9,]),'if_do':([0,45,90,93,104,107,121,137,160,179,206,],[10,10,10,10,10,10,10,10,10,10,10,]),'when':([0,45,90,93,104,107,121,137,160,179,206,],[11,11,11,11,11,11,11,11,11,11,11,]),'defn':([0,45,90,93,104,107,121,137,160,179,206,],[12,12,12,12,12,12,12,12,12,12,12,]),'defn_with_return':([0,45,90,93,104,107,121,137,160,179,206,],[13,13,13,13,13,13,13,13,13,13,13,]),'operacionesLogicas':([0,45,90,93,104,107,121,137,160,179,205,206,],[14,14,14,14,14,14,14,14,14,14,228,14,]),'sentenciaLoopRecur':([0,45,90,93,104,107,121,137,160,179,206,],[15,15,15,15,15,15,15,15,15,15,15,]),'cond_':([0,45,90,93,104,107,121,137,160,179,206,],[16,16,16,16,16,16,16,16,16,16,16,]),'cond_else':([0,45,90,93,104,107,121,137,160,179,206,],[17,17,17,17,17,17,17,17,17,17,17,]),'doseq':([0,45,90,93,104,107,121,137,160,179,206,],[18,18,18,18,18,18,18,18,18,18,18,]),'case_expression':([0,45,90,93,104,107,121,137,160,179,206,],[19,19,19,19,19,19,19,19,19,19,19,]),'lista':([0,45,90,93,104,107,121,137,160,179,206,],[20,20,20,20,20,20,20,20,20,20,20,]),'sentencia_booleana':([0,33,45,47,50,61,79,90,93,96,104,107,121,137,160,179,206,],[21,77,21,90,97,107,121,21,21,97,21,21,21,21,21,21,21,]),'function':([0,45,90,93,104,107,121,137,160,179,206,],[22,22,22,22,22,22,22,22,22,22,22,]),'dotimes':([0,45,90,93,104,107,121,137,160,179,206,],[23,23,23,23,23,23,23,23,23,23,23,]),'ciclo':([0,45,55,90,93,104,107,121,137,160,179,206,],[24,24,104,24,24,24,24,24,24,24,24,24,]),'valor':([0,45,90,93,104,107,121,137,160,179,206,],[25,25,25,25,25,25,25,25,25,25,25,]),'recur':([0,45,46,77,90,93,104,107,121,137,160,179,206,241,],[26,26,89,119,26,26,26,159,26,26,26,26,26,89,]),'dato':([0,30,42,43,45,52,53,54,71,80,83,84,90,93,95,99,100,102,103,104,107,118,121,123,137,139,147,157,160,179,181,182,187,191,193,194,206,211,212,215,251,252,258,],[27,71,83,84,27,100,102,103,71,122,83,126,27,27,102,148,150,102,154,27,27,169,27,171,27,181,71,199,27,27,181,208,212,217,150,150,27,233,212,235,257,258,262,]),'operador_aritmetico':([28,161,211,],[43,43,43,]),'secuencia_if':([28,39,161,],[44,44,44,]),'operador_comparadores':([28,78,161,],[54,54,54,]),'secuencia_v':([30,71,139,147,181,],[68,110,68,68,110,]),'secuencia_mapa':([32,169,],[75,201,]),'info_imprimir':([42,83,],[82,125,]),'nombre_funct':([48,],[93,]),'argumments':([49,93,136,],[94,137,179,]),'linecondition':([50,96,],[96,142,]),'doseq_args':([51,],[98,]),'argumentos_lista':([53,95,102,139,181,],[101,141,153,141,153,]),'expresionConjuntoEnteros':([74,114,],[111,166,]),'expresionConjuntoDouble':([74,115,],[112,167,]),'expresionConjuntoString':([74,116,],[113,168,]),'body':([90,93,104,107,121,137,160,179,206,],[130,135,155,160,160,180,160,207,229,]),'internos':([93,],[134,]),'description':([93,],[136,]),'case':([100,193,194,],[151,220,221,]),'secuencia_expresion_if':([107,121,160,],[158,158,200,]),'doseq_prn':([145,],[186,]),'pnr_dato':([187,212,],[213,234,]),'expresionDefnElse':([226,],[239,]),'defn_return':([242,255,],[253,259,]),'expresionCase':([251,],[256,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instrucciones","S'",1,None,None,None),
  ('instrucciones -> asignacion','instrucciones',1,'p_instrucciones','clojure_sin.py',9),
  ('instrucciones -> impresion','instrucciones',1,'p_instrucciones','clojure_sin.py',10),
  ('instrucciones -> operacion_aritmetica','instrucciones',1,'p_instrucciones','clojure_sin.py',11),
  ('instrucciones -> conjuntos','instrucciones',1,'p_instrucciones','clojure_sin.py',12),
  ('instrucciones -> vector','instrucciones',1,'p_instrucciones','clojure_sin.py',13),
  ('instrucciones -> mapa','instrucciones',1,'p_instrucciones','clojure_sin.py',14),
  ('instrucciones -> if','instrucciones',1,'p_instrucciones','clojure_sin.py',15),
  ('instrucciones -> do','instrucciones',1,'p_instrucciones','clojure_sin.py',16),
  ('instrucciones -> if_do','instrucciones',1,'p_instrucciones','clojure_sin.py',17),
  ('instrucciones -> when','instrucciones',1,'p_instrucciones','clojure_sin.py',18),
  ('instrucciones -> defn','instrucciones',1,'p_instrucciones','clojure_sin.py',19),
  ('instrucciones -> defn_with_return','instrucciones',1,'p_instrucciones','clojure_sin.py',20),
  ('instrucciones -> operacionesLogicas','instrucciones',1,'p_instrucciones','clojure_sin.py',21),
  ('instrucciones -> sentenciaLoopRecur','instrucciones',1,'p_instrucciones','clojure_sin.py',22),
  ('instrucciones -> cond_','instrucciones',1,'p_instrucciones','clojure_sin.py',23),
  ('instrucciones -> cond_else','instrucciones',1,'p_instrucciones','clojure_sin.py',24),
  ('instrucciones -> doseq','instrucciones',1,'p_instrucciones','clojure_sin.py',25),
  ('instrucciones -> case_expression','instrucciones',1,'p_instrucciones','clojure_sin.py',26),
  ('instrucciones -> lista','instrucciones',1,'p_instrucciones','clojure_sin.py',27),
  ('instrucciones -> sentencia_booleana','instrucciones',1,'p_instrucciones','clojure_sin.py',28),
  ('instrucciones -> function','instrucciones',1,'p_instrucciones','clojure_sin.py',29),
  ('instrucciones -> dotimes','instrucciones',1,'p_instrucciones','clojure_sin.py',30),
  ('instrucciones -> ciclo','instrucciones',1,'p_instrucciones','clojure_sin.py',31),
  ('instrucciones -> valor','instrucciones',1,'p_instrucciones','clojure_sin.py',32),
  ('instrucciones -> recur','instrucciones',1,'p_instrucciones','clojure_sin.py',33),
  ('instrucciones -> dato','instrucciones',1,'p_instrucciones','clojure_sin.py',34),
  ('dato -> STRING','dato',1,'p_tipos_datos','clojure_sin.py',40),
  ('dato -> CHAR','dato',1,'p_tipos_datos','clojure_sin.py',41),
  ('dato -> ENTERO','dato',1,'p_tipos_datos','clojure_sin.py',42),
  ('dato -> FLOTANTE','dato',1,'p_tipos_datos','clojure_sin.py',43),
  ('dato -> BOOLEAN','dato',1,'p_tipos_datos','clojure_sin.py',44),
  ('dato -> VARIABLE','dato',1,'p_tipos_datos','clojure_sin.py',45),
  ('valor -> ENTERO','valor',1,'p_valor','clojure_sin.py',50),
  ('valor -> FLOTANTE','valor',1,'p_valor','clojure_sin.py',51),
  ('valor -> BOOLEAN','valor',1,'p_valor','clojure_sin.py',52),
  ('operador_comparadores -> COMPARA_IGUAL','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',58),
  ('operador_comparadores -> MENORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',59),
  ('operador_comparadores -> MAYORQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',60),
  ('operador_comparadores -> MAYORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',61),
  ('operador_comparadores -> MENORIGUALQUE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',62),
  ('operador_comparadores -> DIFERENTE','operador_comparadores',1,'p_operadoresComparadores','clojure_sin.py',63),
  ('operador_aritmetico -> MAS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',68),
  ('operador_aritmetico -> MENOS','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',69),
  ('operador_aritmetico -> PRODUCTO','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',70),
  ('operador_aritmetico -> DIVISION','operador_aritmetico',1,'p_op_aritmetica1','clojure_sin.py',71),
  ('asignacion -> LPAREN DEFICION VARIABLE dato RPAREN','asignacion',5,'p_asignacion','clojure_sin.py',76),
  ('asignacion -> LPAREN LET LCOR VARIABLE dato RCOR RPAREN','asignacion',7,'p_asignacion','clojure_sin.py',77),
  ('sentencia_booleana -> LPAREN operador_comparadores dato dato RPAREN','sentencia_booleana',5,'p_sentenciaBooleana','clojure_sin.py',87),
  ('linecondition -> sentencia_booleana impresion','linecondition',2,'p_linecondition','clojure_sin.py',93),
  ('cond_ -> LPAREN COND linecondition linecondition RPAREN','cond_',5,'p_cond','clojure_sin.py',100),
  ('cond_else -> LPAREN COND linecondition linecondition DOSPUNTOS ELSE impresion RPAREN','cond_else',8,'p_condElse','clojure_sin.py',106),
  ('case -> dato impresion','case',2,'p_case','clojure_sin.py',119),
  ('case -> dato STRING','case',2,'p_case','clojure_sin.py',120),
  ('case -> dato impresion case','case',3,'p_case','clojure_sin.py',121),
  ('case -> dato STRING case','case',3,'p_case','clojure_sin.py',122),
  ('case_expression -> LPAREN CASE dato case impresion RPAREN','case_expression',6,'p_case_expression','clojure_sin.py',132),
  ('case_expression -> LPAREN CASE dato case DOSPUNTOS ELSE STRING RPAREN','case_expression',8,'p_case_expression','clojure_sin.py',133),
  ('argumentos_lista -> dato','argumentos_lista',1,'p_argumentos_lista','clojure_sin.py',143),
  ('argumentos_lista -> dato argumentos_lista','argumentos_lista',2,'p_argumentos_lista','clojure_sin.py',144),
  ('lista -> LPAREN LIST argumentos_lista RPAREN','lista',4,'p_lista','clojure_sin.py',153),
  ('argumments -> LCOR argumentos_lista RCOR','argumments',3,'p_argumments','clojure_sin.py',158),
  ('description -> STRING','description',1,'p_description','clojure_sin.py',162),
  ('nombre_funct -> VARIABLE','nombre_funct',1,'p_nombre_funct','clojure_sin.py',166),
  ('body -> instrucciones','body',1,'p_body','clojure_sin.py',170),
  ('recur -> LPAREN RECUR LPAREN INC dato RPAREN RPAREN','recur',7,'p_recur','clojure_sin.py',175),
  ('internos -> description','internos',1,'p_internos','clojure_sin.py',180),
  ('internos -> argumments','internos',1,'p_internos','clojure_sin.py',181),
  ('internos -> body','internos',1,'p_internos','clojure_sin.py',182),
  ('internos -> argumments body','internos',2,'p_internos','clojure_sin.py',183),
  ('internos -> description argumments body','internos',3,'p_internos','clojure_sin.py',184),
  ('function -> LPAREN DEFFUNCION nombre_funct internos RPAREN','function',5,'p_function','clojure_sin.py',204),
  ('function -> LPAREN DEFFUNCION nombre_funct internos LPAREN if body RPAREN','function',8,'p_function','clojure_sin.py',205),
  ('info_imprimir -> dato','info_imprimir',1,'p_datos_impresion','clojure_sin.py',213),
  ('info_imprimir -> dato info_imprimir','info_imprimir',2,'p_datos_impresion','clojure_sin.py',214),
  ('impresion -> LPAREN IMPRIMIR info_imprimir RPAREN','impresion',4,'p_impresion','clojure_sin.py',222),
  ('secuencia_v -> dato','secuencia_v',1,'p_secuencia_vector','clojure_sin.py',230),
  ('secuencia_v -> dato secuencia_v','secuencia_v',2,'p_secuencia_vector','clojure_sin.py',231),
  ('vector -> LCOR secuencia_v RCOR','vector',3,'p_vector','clojure_sin.py',240),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato','secuencia_mapa',3,'p_secuencia_mapa','clojure_sin.py',248),
  ('secuencia_mapa -> DOSPUNTOS VARIABLE dato secuencia_mapa','secuencia_mapa',4,'p_secuencia_mapa','clojure_sin.py',249),
  ('mapa -> L_LLAVE secuencia_mapa R_LLAVE','mapa',3,'p_mapa','clojure_sin.py',255),
  ('secuencia_expresion_if -> body','secuencia_expresion_if',1,'p_secuencia_expresion_if','clojure_sin.py',260),
  ('secuencia_expresion_if -> body secuencia_expresion_if','secuencia_expresion_if',2,'p_secuencia_expresion_if','clojure_sin.py',261),
  ('secuencia_if -> IF sentencia_booleana secuencia_expresion_if','secuencia_if',3,'p_secuencia_if','clojure_sin.py',265),
  ('if -> IF sentencia_booleana','if',2,'p_if','clojure_sin.py',269),
  ('if -> IF sentencia_booleana recur','if',3,'p_if','clojure_sin.py',270),
  ('if -> LPAREN secuencia_if RPAREN','if',3,'p_if','clojure_sin.py',271),
  ('do -> LPAREN DO instrucciones RPAREN','do',4,'p_do','clojure_sin.py',283),
  ('if_do -> LPAREN if do RPAREN','if_do',4,'p_if_do','clojure_sin.py',288),
  ('when -> LPAREN WHEN sentencia_booleana body RPAREN','when',5,'p_when','clojure_sin.py',293),
  ('ciclo -> LCOR VARIABLE ENTERO RCOR','ciclo',4,'p_ciclo','clojure_sin.py',298),
  ('dotimes -> LPAREN DOTIMES ciclo body RPAREN','dotimes',5,'p_dotimes','clojure_sin.py',303),
  ('operacionesLogicas -> LPAREN if recur VARIABLE RPAREN RPAREN','operacionesLogicas',6,'p_operacionesLogicas','clojure_sin.py',308),
  ('operacion_aritmetica -> LPAREN operador_aritmetico dato dato RPAREN','operacion_aritmetica',5,'p_operacion_aritmetica1','clojure_sin.py',313),
  ('doseq_args -> LCOR dato LPAREN RANGE dato RPAREN RCOR','doseq_args',7,'p_doseq_args','clojure_sin.py',319),
  ('doseq_args -> LCOR dato conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',320),
  ('doseq_args -> LCOR dato vector dato vector RCOR','doseq_args',6,'p_doseq_args','clojure_sin.py',321),
  ('doseq_args -> LCOR vector conjuntos RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',322),
  ('doseq_args -> LCOR dato vector RCOR','doseq_args',4,'p_doseq_args','clojure_sin.py',323),
  ('pnr_dato -> dato','pnr_dato',1,'p_pnr_dato','clojure_sin.py',334),
  ('pnr_dato -> dato pnr_dato','pnr_dato',2,'p_pnr_dato','clojure_sin.py',335),
  ('doseq_prn -> PRN LPAREN dato RPAREN','doseq_prn',4,'p_doseq_prn','clojure_sin.py',344),
  ('doseq_prn -> PRN pnr_dato','doseq_prn',2,'p_doseq_prn','clojure_sin.py',345),
  ('doseq_prn -> PRN operacion_aritmetica','doseq_prn',2,'p_doseq_prn','clojure_sin.py',346),
  ('doseq -> LPAREN DOSEQ doseq_args impresion RPAREN','doseq',5,'p_doseq','clojure_sin.py',360),
  ('doseq -> LPAREN DOSEQ doseq_args LPAREN doseq_prn RPAREN RPAREN','doseq',7,'p_doseq','clojure_sin.py',361),
  ('defn -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN','defn',10,'p_defn','clojure_sin.py',370),
  ('defn -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN','defn',8,'p_defn','clojure_sin.py',371),
  ('defn_with_return -> LPAREN DEFFUNCION VARIABLE LCOR VARIABLE RCOR LPAREN expresionDefnElse RPAREN RPAREN defn_return','defn_with_return',11,'p_defn_with_return','clojure_sin.py',380),
  ('defn_with_return -> LPAREN DEFFUNCION INCREASE LCOR VARIABLE RCOR operacionesLogicas RPAREN defn_return','defn_with_return',9,'p_defn_with_return','clojure_sin.py',381),
  ('expresionDefnElse -> CASE VARIABLE expresionCase DOSPUNTOS ELSE STRING','expresionDefnElse',6,'p_expresionDefnElse','clojure_sin.py',391),
  ('defn_return -> LPAREN dato dato RPAREN','defn_return',4,'p_defn_return','clojure_sin.py',396),
  ('expresionCase -> dato STRING','expresionCase',2,'p_expresionCase','clojure_sin.py',401),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoEnteros R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',407),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoDouble R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',408),
  ('conjuntos -> NUMERAL L_LLAVE expresionConjuntoString R_LLAVE','conjuntos',4,'p_conjuntos','clojure_sin.py',409),
  ('sentenciaLoopRecur -> LPAREN LOOP argumments LPAREN if dato RPAREN RPAREN','sentenciaLoopRecur',8,'p_sentenciaLoopRecur','clojure_sin.py',416),
  ('expresionConjuntoEnteros -> ENTERO','expresionConjuntoEnteros',1,'p_expresionConjuntoEnteros','clojure_sin.py',422),
  ('expresionConjuntoEnteros -> ENTERO expresionConjuntoEnteros','expresionConjuntoEnteros',2,'p_expresionConjuntoEnteros','clojure_sin.py',423),
  ('expresionConjuntoDouble -> FLOTANTE','expresionConjuntoDouble',1,'p_expresionConjuntoDouble','clojure_sin.py',433),
  ('expresionConjuntoDouble -> FLOTANTE expresionConjuntoDouble','expresionConjuntoDouble',2,'p_expresionConjuntoDouble','clojure_sin.py',434),
  ('expresionConjuntoString -> STRING','expresionConjuntoString',1,'p_expresionConjuntoString','clojure_sin.py',443),
  ('expresionConjuntoString -> STRING expresionConjuntoString','expresionConjuntoString',2,'p_expresionConjuntoString','clojure_sin.py',444),
]
